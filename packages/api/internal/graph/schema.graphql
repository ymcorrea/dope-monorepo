# This file defines supplementary types that are not autogenerated by ent.

# scalar Type
scalar Sex
# scalar Tier

type Hash {
  value: String!
}

"Timestamp is a RFC3339 string."
scalar Timestamp
"Bytes32 is a 32 byte binary string, represented as 0x-prefixed hexadecimal."
scalar Bytes32
"Address is a 20 byte Ethereum address, represented as 0x-prefixed hexadecimal."
scalar Address
"""
Bytes is an arbitrary length binary string, represented as 0x-prefixed hexadecimal.
An empty byte string is represented as '0x'. Byte strings must have an even number of hexadecimal nybbles.
"""
scalar Bytes
"BigInt is a large integer represented as a string."
scalar BigInt
"Long is a 64 bit unsigned integer."
scalar Long

type Sprites {
  Female: String
  Male: String
}

type RLEs {
  female: String!
  male: String!
}

union SearchResult = Dope | Item | Hustler

# For the MMO

type Position {
  currentMap: String!
  x: Float!
  y: Float!
}

# type GameHustlerQuest implements Node {
#   quest: String!
#   completed: Boolean!
# }

# type GameHustlerItem implements Node {
#   item: String!
#   count: Int!
# }

# type GameHustlerRelation implements Node {

#   citizen: String!
#   conversation: Int!
#   text: Int!
# }

# type GameHustler implements Node {
#   id: ID!
#   hustler: Hustler!
#   lastPosition: Position!
#   relations: [GameHustlerCitizen!]!
#   inventory: [GameHustlerItem!]!
#   quests: [GameHustlerQuest!]!
# }

# All other model resolvers and gql are autogenerated by ent,
# using annotations on the schema. See the last block of
# code on each one in the internal/ent/schema folder.
# This is a custom resolver for Search because I wasn't
# sure how to annotate that we need to receive the "query"
# argument as a string.
#
# When running go generate ./... in the root of the project,
# the entc code generator will generate a blank Search
# resolver. We can then add our own custom resolver there.
extend type Query {
  search(
    query: String!
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: SearchOrder
    where: SearchWhereInput
  ): SearchConnection!
}

extend type Item {
  fullname: String!
}
