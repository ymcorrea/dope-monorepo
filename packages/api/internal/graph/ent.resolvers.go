package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent"
	"github.com/dopedao/dope-monorepo/packages/api/internal/graph/generated"
	"github.com/dopedao/dope-monorepo/packages/api/internal/graph/model"
)

// Address is the resolver for the address field.
func (r *eventResolver) Address(ctx context.Context, obj *ent.Event) (string, error) {
	panic(fmt.Errorf("not implemented: Address - address"))
}

// Hash is the resolver for the hash field.
func (r *eventResolver) Hash(ctx context.Context, obj *ent.Event) (*model.Hash, error) {
	panic(fmt.Errorf("not implemented: Hash - hash"))
}

// LastPosition is the resolver for the lastPosition field.
func (r *gameHustlerResolver) LastPosition(ctx context.Context, obj *ent.GameHustler) (*model.Position, error) {
	panic(fmt.Errorf("not implemented: LastPosition - lastPosition"))
}

// Text is the resolver for the text field.
func (r *gameHustlerRelationResolver) Text(ctx context.Context, obj *ent.GameHustlerRelation) (int, error) {
	panic(fmt.Errorf("not implemented: Text - text"))
}

// Sprite is the resolver for the sprite field.
func (r *itemResolver) Sprite(ctx context.Context, obj *ent.Item) (*model.Sprites, error) {
	panic(fmt.Errorf("not implemented: Sprite - sprite"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// BodyParts is the resolver for the bodyParts field.
func (r *queryResolver) BodyParts(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *ent.BodyPartWhereInput) (*ent.BodyPartConnection, error) {
	return r.client.BodyPart.Query().Paginate(ctx, after, first, before, last, ent.WithBodyPartFilter(where.Filter))
}

// Dopes is the resolver for the dopes field.
func (r *queryResolver) Dopes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.DopeOrder, where *ent.DopeWhereInput) (*ent.DopeConnection, error) {
	if orderBy == nil {
		orderBy = &ent.DopeOrder{Field: ent.DopeOrderFieldOrder, Direction: entgql.OrderDirectionAsc}
	}
	return r.client.Dope.Query().Paginate(ctx, after, first, before, last, ent.WithDopeOrder(orderBy), ent.WithDopeFilter(where.Filter))
}

// Hustlers is the resolver for the hustlers field.
func (r *queryResolver) Hustlers(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.HustlerOrder, where *ent.HustlerWhereInput) (*ent.HustlerConnection, error) {
	return r.client.Hustler.Query().Paginate(ctx, after, first, before, last, ent.WithHustlerOrder(orderBy), ent.WithHustlerFilter(where.Filter))
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.ItemOrder, where *ent.ItemWhereInput) (*ent.ItemConnection, error) {
	return r.client.Item.Query().Paginate(ctx, after, first, before, last, ent.WithItemOrder(orderBy), ent.WithItemFilter(where.Filter))
}

// Wallets is the resolver for the wallets field.
func (r *queryResolver) Wallets(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.WalletOrder, where *ent.WalletWhereInput) (*ent.WalletConnection, error) {
	return r.client.Wallet.Query().Paginate(ctx, after, first, before, last, ent.WithWalletOrder(orderBy), ent.WithWalletFilter(where.Filter))
}

// WalletItems is the resolver for the wallet_items field.
func (r *queryResolver) WalletItems(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *ent.WalletItemsWhereInput) (*ent.WalletItemsConnection, error) {
	return r.client.WalletItems.Query().Paginate(ctx, after, first, before, last, ent.WithWalletItemsFilter(where.Filter))
}

// Text is the resolver for the text field.
func (r *gameHustlerRelationWhereInputResolver) Text(ctx context.Context, obj *ent.GameHustlerRelationWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: Text - text"))
}

// TextNeq is the resolver for the textNEQ field.
func (r *gameHustlerRelationWhereInputResolver) TextNeq(ctx context.Context, obj *ent.GameHustlerRelationWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TextNeq - textNEQ"))
}

// TextIn is the resolver for the textIn field.
func (r *gameHustlerRelationWhereInputResolver) TextIn(ctx context.Context, obj *ent.GameHustlerRelationWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: TextIn - textIn"))
}

// TextNotIn is the resolver for the textNotIn field.
func (r *gameHustlerRelationWhereInputResolver) TextNotIn(ctx context.Context, obj *ent.GameHustlerRelationWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: TextNotIn - textNotIn"))
}

// TextGt is the resolver for the textGT field.
func (r *gameHustlerRelationWhereInputResolver) TextGt(ctx context.Context, obj *ent.GameHustlerRelationWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TextGt - textGT"))
}

// TextGte is the resolver for the textGTE field.
func (r *gameHustlerRelationWhereInputResolver) TextGte(ctx context.Context, obj *ent.GameHustlerRelationWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TextGte - textGTE"))
}

// TextLt is the resolver for the textLT field.
func (r *gameHustlerRelationWhereInputResolver) TextLt(ctx context.Context, obj *ent.GameHustlerRelationWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TextLt - textLT"))
}

// TextLte is the resolver for the textLTE field.
func (r *gameHustlerRelationWhereInputResolver) TextLte(ctx context.Context, obj *ent.GameHustlerRelationWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TextLte - textLTE"))
}

// Event returns generated.EventResolver implementation.
func (r *Resolver) Event() generated.EventResolver { return &eventResolver{r} }

// GameHustler returns generated.GameHustlerResolver implementation.
func (r *Resolver) GameHustler() generated.GameHustlerResolver { return &gameHustlerResolver{r} }

// GameHustlerRelation returns generated.GameHustlerRelationResolver implementation.
func (r *Resolver) GameHustlerRelation() generated.GameHustlerRelationResolver {
	return &gameHustlerRelationResolver{r}
}

// Item returns generated.ItemResolver implementation.
func (r *Resolver) Item() generated.ItemResolver { return &itemResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// GameHustlerRelationWhereInput returns generated.GameHustlerRelationWhereInputResolver implementation.
func (r *Resolver) GameHustlerRelationWhereInput() generated.GameHustlerRelationWhereInputResolver {
	return &gameHustlerRelationWhereInputResolver{r}
}

type eventResolver struct{ *Resolver }
type gameHustlerResolver struct{ *Resolver }
type gameHustlerRelationResolver struct{ *Resolver }
type itemResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type gameHustlerRelationWhereInputResolver struct{ *Resolver }
