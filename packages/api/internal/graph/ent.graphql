directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type BodyPart implements Node {
  id: ID!
  type: BodyPartBodyPartType!
  sex: BodyPartBodyPartSex!
  rle: String!
  sprite: String
  hustlerBodies: [Hustler!]
  hustlerHairs: [Hustler!]
  hustlerBeards: [Hustler!]
}
"""
BodyPartBodyPartSex is enum for the field sex
"""
enum BodyPartBodyPartSex @goModel(model: "github.com/dopedao/dope-monorepo/packages/api/internal/ent/bodypart.Sex") {
  MALE
  FEMALE
}
"""
BodyPartBodyPartType is enum for the field type
"""
enum BodyPartBodyPartType @goModel(model: "github.com/dopedao/dope-monorepo/packages/api/internal/ent/bodypart.Type") {
  BODY
  HAIR
  BEARD
}
"""
A connection to a list of items.
"""
type BodyPartConnection {
  """
  A list of edges.
  """
  edges: [BodyPartEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type BodyPartEdge {
  """
  The item at the end of the edge.
  """
  node: BodyPart
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
BodyPartWhereInput is used for filtering BodyPart objects.
Input was generated by ent.
"""
input BodyPartWhereInput {
  not: BodyPartWhereInput
  and: [BodyPartWhereInput!]
  or: [BodyPartWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  type field predicates
  """
  type: BodyPartBodyPartType
  typeNEQ: BodyPartBodyPartType
  typeIn: [BodyPartBodyPartType!]
  typeNotIn: [BodyPartBodyPartType!]
  """
  sex field predicates
  """
  sex: BodyPartBodyPartSex
  sexNEQ: BodyPartBodyPartSex
  sexIn: [BodyPartBodyPartSex!]
  sexNotIn: [BodyPartBodyPartSex!]
  """
  rle field predicates
  """
  rle: String
  rleNEQ: String
  rleIn: [String!]
  rleNotIn: [String!]
  rleGT: String
  rleGTE: String
  rleLT: String
  rleLTE: String
  rleContains: String
  rleHasPrefix: String
  rleHasSuffix: String
  rleEqualFold: String
  rleContainsFold: String
  """
  sprite field predicates
  """
  sprite: String
  spriteNEQ: String
  spriteIn: [String!]
  spriteNotIn: [String!]
  spriteGT: String
  spriteGTE: String
  spriteLT: String
  spriteLTE: String
  spriteContains: String
  spriteHasPrefix: String
  spriteHasSuffix: String
  spriteIsNil: Boolean
  spriteNotNil: Boolean
  spriteEqualFold: String
  spriteContainsFold: String
  """
  hustler_bodies edge predicates
  """
  hasHustlerBodies: Boolean
  hasHustlerBodiesWith: [HustlerWhereInput!]
  """
  hustler_hairs edge predicates
  """
  hasHustlerHairs: Boolean
  hasHustlerHairsWith: [HustlerWhereInput!]
  """
  hustler_beards edge predicates
  """
  hasHustlerBeards: Boolean
  hasHustlerBeardsWith: [HustlerWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Dope implements Node {
  id: ID!
  claimed: Boolean!
  lastCheckedPaperClaim: Time
  opened: Boolean!
  lastCheckedGearClaim: Time
  score: Int
  rank: Int
  order: Int!
  bestAskPriceEth: Float
  wallet: Wallet
  items: [Item!]
  index: Search
}
"""
A connection to a list of items.
"""
type DopeConnection {
  """
  A list of edges.
  """
  edges: [DopeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DopeEdge {
  """
  The item at the end of the edge.
  """
  node: Dope
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Dope connections
"""
input DopeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Dopes.
  """
  field: DopeOrderField!
}
"""
Properties by which Dope connections can be ordered.
"""
enum DopeOrderField {
  RANK
  ID
  BEST_ASK_PRICE
}
"""
DopeWhereInput is used for filtering Dope objects.
Input was generated by ent.
"""
input DopeWhereInput {
  not: DopeWhereInput
  and: [DopeWhereInput!]
  or: [DopeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  claimed field predicates
  """
  claimed: Boolean
  claimedNEQ: Boolean
  """
  last_checked_paper_claim field predicates
  """
  lastCheckedPaperClaim: Time
  lastCheckedPaperClaimNEQ: Time
  lastCheckedPaperClaimIn: [Time!]
  lastCheckedPaperClaimNotIn: [Time!]
  lastCheckedPaperClaimGT: Time
  lastCheckedPaperClaimGTE: Time
  lastCheckedPaperClaimLT: Time
  lastCheckedPaperClaimLTE: Time
  lastCheckedPaperClaimIsNil: Boolean
  lastCheckedPaperClaimNotNil: Boolean
  """
  opened field predicates
  """
  opened: Boolean
  openedNEQ: Boolean
  """
  last_checked_gear_claim field predicates
  """
  lastCheckedGearClaim: Time
  lastCheckedGearClaimNEQ: Time
  lastCheckedGearClaimIn: [Time!]
  lastCheckedGearClaimNotIn: [Time!]
  lastCheckedGearClaimGT: Time
  lastCheckedGearClaimGTE: Time
  lastCheckedGearClaimLT: Time
  lastCheckedGearClaimLTE: Time
  lastCheckedGearClaimIsNil: Boolean
  lastCheckedGearClaimNotNil: Boolean
  """
  score field predicates
  """
  score: Int
  scoreNEQ: Int
  scoreIn: [Int!]
  scoreNotIn: [Int!]
  scoreGT: Int
  scoreGTE: Int
  scoreLT: Int
  scoreLTE: Int
  scoreIsNil: Boolean
  scoreNotNil: Boolean
  """
  rank field predicates
  """
  rank: Int
  rankNEQ: Int
  rankIn: [Int!]
  rankNotIn: [Int!]
  rankGT: Int
  rankGTE: Int
  rankLT: Int
  rankLTE: Int
  rankIsNil: Boolean
  rankNotNil: Boolean
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  best_ask_price_eth field predicates
  """
  bestAskPriceEth: Float
  bestAskPriceEthNEQ: Float
  bestAskPriceEthIn: [Float!]
  bestAskPriceEthNotIn: [Float!]
  bestAskPriceEthGT: Float
  bestAskPriceEthGTE: Float
  bestAskPriceEthLT: Float
  bestAskPriceEthLTE: Float
  bestAskPriceEthIsNil: Boolean
  bestAskPriceEthNotNil: Boolean
  """
  wallet edge predicates
  """
  hasWallet: Boolean
  hasWalletWith: [WalletWhereInput!]
  """
  items edge predicates
  """
  hasItems: Boolean
  hasItemsWith: [ItemWhereInput!]
  """
  index edge predicates
  """
  hasIndex: Boolean
  hasIndexWith: [SearchWhereInput!]
}
type Event implements Node {
  id: ID!
  address: Address!
  index: Long!
  hash: Hash!
  createdAt: Time!
  updatedAt: Time!
}
"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
  not: EventWhereInput
  and: [EventWhereInput!]
  or: [EventWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  index field predicates
  """
  index: Long
  indexNEQ: Long
  indexIn: [Long!]
  indexNotIn: [Long!]
  indexGT: Long
  indexGTE: Long
  indexLT: Long
  indexLTE: Long
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
}
type GameHustler implements Node {
  id: ID!
  lastPosition: Position!
  createdAt: Time!
  relations: [GameHustlerRelation!]
  items: [GameHustlerItem!]
  quests: [GameHustlerQuest!]
}
type GameHustlerItem implements Node {
  id: ID!
  item: String!
  hustler: GameHustler
}
"""
GameHustlerItemWhereInput is used for filtering GameHustlerItem objects.
Input was generated by ent.
"""
input GameHustlerItemWhereInput {
  not: GameHustlerItemWhereInput
  and: [GameHustlerItemWhereInput!]
  or: [GameHustlerItemWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  item field predicates
  """
  item: String
  itemNEQ: String
  itemIn: [String!]
  itemNotIn: [String!]
  itemGT: String
  itemGTE: String
  itemLT: String
  itemLTE: String
  itemContains: String
  itemHasPrefix: String
  itemHasSuffix: String
  itemEqualFold: String
  itemContainsFold: String
  """
  hustler edge predicates
  """
  hasHustler: Boolean
  hasHustlerWith: [GameHustlerWhereInput!]
}
"""
Ordering options for GameHustler connections
"""
input GameHustlerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order GameHustlers.
  """
  field: GameHustlerOrderField!
}
"""
Properties by which GameHustler connections can be ordered.
"""
enum GameHustlerOrderField {
  CREATED_AT
}
type GameHustlerQuest implements Node {
  id: ID!
  quest: String!
  completed: Boolean!
  hustler: GameHustler
}
"""
GameHustlerQuestWhereInput is used for filtering GameHustlerQuest objects.
Input was generated by ent.
"""
input GameHustlerQuestWhereInput {
  not: GameHustlerQuestWhereInput
  and: [GameHustlerQuestWhereInput!]
  or: [GameHustlerQuestWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  quest field predicates
  """
  quest: String
  questNEQ: String
  questIn: [String!]
  questNotIn: [String!]
  questGT: String
  questGTE: String
  questLT: String
  questLTE: String
  questContains: String
  questHasPrefix: String
  questHasSuffix: String
  questEqualFold: String
  questContainsFold: String
  """
  completed field predicates
  """
  completed: Boolean
  completedNEQ: Boolean
  """
  hustler edge predicates
  """
  hasHustler: Boolean
  hasHustlerWith: [GameHustlerWhereInput!]
}
type GameHustlerRelation implements Node {
  id: ID!
  citizen: String!
  conversation: String!
  text: Int!
  hustler: GameHustler
}
"""
GameHustlerRelationWhereInput is used for filtering GameHustlerRelation objects.
Input was generated by ent.
"""
input GameHustlerRelationWhereInput {
  not: GameHustlerRelationWhereInput
  and: [GameHustlerRelationWhereInput!]
  or: [GameHustlerRelationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  citizen field predicates
  """
  citizen: String
  citizenNEQ: String
  citizenIn: [String!]
  citizenNotIn: [String!]
  citizenGT: String
  citizenGTE: String
  citizenLT: String
  citizenLTE: String
  citizenContains: String
  citizenHasPrefix: String
  citizenHasSuffix: String
  citizenEqualFold: String
  citizenContainsFold: String
  """
  conversation field predicates
  """
  conversation: String
  conversationNEQ: String
  conversationIn: [String!]
  conversationNotIn: [String!]
  conversationGT: String
  conversationGTE: String
  conversationLT: String
  conversationLTE: String
  conversationContains: String
  conversationHasPrefix: String
  conversationHasSuffix: String
  conversationEqualFold: String
  conversationContainsFold: String
  """
  text field predicates
  """
  text: Int
  textNEQ: Int
  textIn: [Int!]
  textNotIn: [Int!]
  textGT: Int
  textGTE: Int
  textLT: Int
  textLTE: Int
  """
  hustler edge predicates
  """
  hasHustler: Boolean
  hasHustlerWith: [GameHustlerWhereInput!]
}
"""
GameHustlerWhereInput is used for filtering GameHustler objects.
Input was generated by ent.
"""
input GameHustlerWhereInput {
  not: GameHustlerWhereInput
  and: [GameHustlerWhereInput!]
  or: [GameHustlerWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  relations edge predicates
  """
  hasRelations: Boolean
  hasRelationsWith: [GameHustlerRelationWhereInput!]
  """
  items edge predicates
  """
  hasItems: Boolean
  hasItemsWith: [GameHustlerItemWhereInput!]
  """
  quests edge predicates
  """
  hasQuests: Boolean
  hasQuestsWith: [GameHustlerQuestWhereInput!]
}
type Hustler implements Node {
  id: ID!
  type: HustlerHustlerType!
  name: String
  title: String
  color: String
  background: String
  age: Long!
  sex: HustlerHustlerSex!
  viewbox: [Int!]!
  order: [Int!]!
  svg: String
  createdAt: Time!
  bestAskPriceEth: Float
  wallet: Wallet
  weapon: Item
  clothes: Item
  vehicle: Item
  waist: Item
  foot: Item
  hand: Item
  drug: Item
  neck: Item
  ring: Item
  accessory: Item
  body: BodyPart
  hair: BodyPart
  beard: BodyPart
  index: Search
}
"""
A connection to a list of items.
"""
type HustlerConnection {
  """
  A list of edges.
  """
  edges: [HustlerEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type HustlerEdge {
  """
  The item at the end of the edge.
  """
  node: Hustler
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
HustlerHustlerSex is enum for the field sex
"""
enum HustlerHustlerSex @goModel(model: "github.com/dopedao/dope-monorepo/packages/api/internal/ent/hustler.Sex") {
  MALE
  FEMALE
}
"""
HustlerHustlerType is enum for the field type
"""
enum HustlerHustlerType @goModel(model: "github.com/dopedao/dope-monorepo/packages/api/internal/ent/hustler.Type") {
  ORIGINAL_GANGSTA
  REGULAR
}
"""
Ordering options for Hustler connections
"""
input HustlerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Hustlers.
  """
  field: HustlerOrderField!
}
"""
Properties by which Hustler connections can be ordered.
"""
enum HustlerOrderField {
  CREATED_AT
  BEST_ASK_PRICE
}
"""
HustlerWhereInput is used for filtering Hustler objects.
Input was generated by ent.
"""
input HustlerWhereInput {
  not: HustlerWhereInput
  and: [HustlerWhereInput!]
  or: [HustlerWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  type field predicates
  """
  type: HustlerHustlerType
  typeNEQ: HustlerHustlerType
  typeIn: [HustlerHustlerType!]
  typeNotIn: [HustlerHustlerType!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """
  color field predicates
  """
  color: String
  colorNEQ: String
  colorIn: [String!]
  colorNotIn: [String!]
  colorGT: String
  colorGTE: String
  colorLT: String
  colorLTE: String
  colorContains: String
  colorHasPrefix: String
  colorHasSuffix: String
  colorIsNil: Boolean
  colorNotNil: Boolean
  colorEqualFold: String
  colorContainsFold: String
  """
  background field predicates
  """
  background: String
  backgroundNEQ: String
  backgroundIn: [String!]
  backgroundNotIn: [String!]
  backgroundGT: String
  backgroundGTE: String
  backgroundLT: String
  backgroundLTE: String
  backgroundContains: String
  backgroundHasPrefix: String
  backgroundHasSuffix: String
  backgroundIsNil: Boolean
  backgroundNotNil: Boolean
  backgroundEqualFold: String
  backgroundContainsFold: String
  """
  age field predicates
  """
  age: Long
  ageNEQ: Long
  ageIn: [Long!]
  ageNotIn: [Long!]
  ageGT: Long
  ageGTE: Long
  ageLT: Long
  ageLTE: Long
  """
  sex field predicates
  """
  sex: HustlerHustlerSex
  sexNEQ: HustlerHustlerSex
  sexIn: [HustlerHustlerSex!]
  sexNotIn: [HustlerHustlerSex!]
  """
  svg field predicates
  """
  svg: String
  svgNEQ: String
  svgIn: [String!]
  svgNotIn: [String!]
  svgGT: String
  svgGTE: String
  svgLT: String
  svgLTE: String
  svgContains: String
  svgHasPrefix: String
  svgHasSuffix: String
  svgIsNil: Boolean
  svgNotNil: Boolean
  svgEqualFold: String
  svgContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  best_ask_price_eth field predicates
  """
  bestAskPriceEth: Float
  bestAskPriceEthNEQ: Float
  bestAskPriceEthIn: [Float!]
  bestAskPriceEthNotIn: [Float!]
  bestAskPriceEthGT: Float
  bestAskPriceEthGTE: Float
  bestAskPriceEthLT: Float
  bestAskPriceEthLTE: Float
  bestAskPriceEthIsNil: Boolean
  bestAskPriceEthNotNil: Boolean
  """
  wallet edge predicates
  """
  hasWallet: Boolean
  hasWalletWith: [WalletWhereInput!]
  """
  weapon edge predicates
  """
  hasWeapon: Boolean
  hasWeaponWith: [ItemWhereInput!]
  """
  clothes edge predicates
  """
  hasClothes: Boolean
  hasClothesWith: [ItemWhereInput!]
  """
  vehicle edge predicates
  """
  hasVehicle: Boolean
  hasVehicleWith: [ItemWhereInput!]
  """
  waist edge predicates
  """
  hasWaist: Boolean
  hasWaistWith: [ItemWhereInput!]
  """
  foot edge predicates
  """
  hasFoot: Boolean
  hasFootWith: [ItemWhereInput!]
  """
  hand edge predicates
  """
  hasHand: Boolean
  hasHandWith: [ItemWhereInput!]
  """
  drug edge predicates
  """
  hasDrug: Boolean
  hasDrugWith: [ItemWhereInput!]
  """
  neck edge predicates
  """
  hasNeck: Boolean
  hasNeckWith: [ItemWhereInput!]
  """
  ring edge predicates
  """
  hasRing: Boolean
  hasRingWith: [ItemWhereInput!]
  """
  accessory edge predicates
  """
  hasAccessory: Boolean
  hasAccessoryWith: [ItemWhereInput!]
  """
  body edge predicates
  """
  hasBody: Boolean
  hasBodyWith: [BodyPartWhereInput!]
  """
  hair edge predicates
  """
  hasHair: Boolean
  hasHairWith: [BodyPartWhereInput!]
  """
  beard edge predicates
  """
  hasBeard: Boolean
  hasBeardWith: [BodyPartWhereInput!]
  """
  index edge predicates
  """
  hasIndex: Boolean
  hasIndexWith: [SearchWhereInput!]
}
type Item implements Node {
  id: ID!
  type: ItemItemType!
  namePrefix: String
  nameSuffix: String
  name: String!
  suffix: String
  augmented: Boolean
  count: Int
  tier: ItemItemTier
  greatness: Int
  rles: RLEs
  svg: String
  sprite: Sprites
  bestAskPriceEth: Float
  wallets: [WalletItems!]
  dopes: [Dope!]
  hustlerWeapons: [Hustler!]
  hustlerClothes: [Hustler!]
  hustlerVehicles: [Hustler!]
  hustlerWaists: [Hustler!]
  hustlerFeet: [Hustler!]
  hustlerHands: [Hustler!]
  hustlerDrugs: [Hustler!]
  hustlerNecks: [Hustler!]
  hustlerRings: [Hustler!]
  hustlerAccessories: [Hustler!]
  base: Item
  derivative: [Item!]
  index: Search
}
"""
A connection to a list of items.
"""
type ItemConnection {
  """
  A list of edges.
  """
  edges: [ItemEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ItemEdge {
  """
  The item at the end of the edge.
  """
  node: Item
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ItemItemTier is enum for the field tier
"""
enum ItemItemTier @goModel(model: "github.com/dopedao/dope-monorepo/packages/api/internal/ent/item.Tier") {
  COMMON
  RARE
  CUSTOM
  BLACK_MARKET
}
"""
ItemItemType is enum for the field type
"""
enum ItemItemType @goModel(model: "github.com/dopedao/dope-monorepo/packages/api/internal/ent/item.Type") {
  WEAPON
  CLOTHES
  VEHICLE
  WAIST
  FOOT
  HAND
  DRUGS
  NECK
  RING
  ACCESSORY
}
"""
Ordering options for Item connections
"""
input ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Items.
  """
  field: ItemOrderField!
}
"""
Properties by which Item connections can be ordered.
"""
enum ItemOrderField {
  GREATNESS
  BEST_ASK_PRICE
}
"""
ItemWhereInput is used for filtering Item objects.
Input was generated by ent.
"""
input ItemWhereInput {
  not: ItemWhereInput
  and: [ItemWhereInput!]
  or: [ItemWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  type field predicates
  """
  type: ItemItemType
  typeNEQ: ItemItemType
  typeIn: [ItemItemType!]
  typeNotIn: [ItemItemType!]
  """
  name_prefix field predicates
  """
  namePrefix: String
  namePrefixNEQ: String
  namePrefixIn: [String!]
  namePrefixNotIn: [String!]
  namePrefixGT: String
  namePrefixGTE: String
  namePrefixLT: String
  namePrefixLTE: String
  namePrefixContains: String
  namePrefixHasPrefix: String
  namePrefixHasSuffix: String
  namePrefixIsNil: Boolean
  namePrefixNotNil: Boolean
  namePrefixEqualFold: String
  namePrefixContainsFold: String
  """
  name_suffix field predicates
  """
  nameSuffix: String
  nameSuffixNEQ: String
  nameSuffixIn: [String!]
  nameSuffixNotIn: [String!]
  nameSuffixGT: String
  nameSuffixGTE: String
  nameSuffixLT: String
  nameSuffixLTE: String
  nameSuffixContains: String
  nameSuffixHasPrefix: String
  nameSuffixHasSuffix: String
  nameSuffixIsNil: Boolean
  nameSuffixNotNil: Boolean
  nameSuffixEqualFold: String
  nameSuffixContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  suffix field predicates
  """
  suffix: String
  suffixNEQ: String
  suffixIn: [String!]
  suffixNotIn: [String!]
  suffixGT: String
  suffixGTE: String
  suffixLT: String
  suffixLTE: String
  suffixContains: String
  suffixHasPrefix: String
  suffixHasSuffix: String
  suffixIsNil: Boolean
  suffixNotNil: Boolean
  suffixEqualFold: String
  suffixContainsFold: String
  """
  augmented field predicates
  """
  augmented: Boolean
  augmentedNEQ: Boolean
  augmentedIsNil: Boolean
  augmentedNotNil: Boolean
  """
  count field predicates
  """
  count: Int
  countNEQ: Int
  countIn: [Int!]
  countNotIn: [Int!]
  countGT: Int
  countGTE: Int
  countLT: Int
  countLTE: Int
  countIsNil: Boolean
  countNotNil: Boolean
  """
  tier field predicates
  """
  tier: ItemItemTier
  tierNEQ: ItemItemTier
  tierIn: [ItemItemTier!]
  tierNotIn: [ItemItemTier!]
  tierIsNil: Boolean
  tierNotNil: Boolean
  """
  greatness field predicates
  """
  greatness: Int
  greatnessNEQ: Int
  greatnessIn: [Int!]
  greatnessNotIn: [Int!]
  greatnessGT: Int
  greatnessGTE: Int
  greatnessLT: Int
  greatnessLTE: Int
  greatnessIsNil: Boolean
  greatnessNotNil: Boolean
  """
  svg field predicates
  """
  svg: String
  svgNEQ: String
  svgIn: [String!]
  svgNotIn: [String!]
  svgGT: String
  svgGTE: String
  svgLT: String
  svgLTE: String
  svgContains: String
  svgHasPrefix: String
  svgHasSuffix: String
  svgIsNil: Boolean
  svgNotNil: Boolean
  svgEqualFold: String
  svgContainsFold: String
  """
  best_ask_price_eth field predicates
  """
  bestAskPriceEth: Float
  bestAskPriceEthNEQ: Float
  bestAskPriceEthIn: [Float!]
  bestAskPriceEthNotIn: [Float!]
  bestAskPriceEthGT: Float
  bestAskPriceEthGTE: Float
  bestAskPriceEthLT: Float
  bestAskPriceEthLTE: Float
  bestAskPriceEthIsNil: Boolean
  bestAskPriceEthNotNil: Boolean
  """
  wallets edge predicates
  """
  hasWallets: Boolean
  hasWalletsWith: [WalletItemsWhereInput!]
  """
  dopes edge predicates
  """
  hasDopes: Boolean
  hasDopesWith: [DopeWhereInput!]
  """
  hustler_weapons edge predicates
  """
  hasHustlerWeapons: Boolean
  hasHustlerWeaponsWith: [HustlerWhereInput!]
  """
  hustler_clothes edge predicates
  """
  hasHustlerClothes: Boolean
  hasHustlerClothesWith: [HustlerWhereInput!]
  """
  hustler_vehicles edge predicates
  """
  hasHustlerVehicles: Boolean
  hasHustlerVehiclesWith: [HustlerWhereInput!]
  """
  hustler_waists edge predicates
  """
  hasHustlerWaists: Boolean
  hasHustlerWaistsWith: [HustlerWhereInput!]
  """
  hustler_feet edge predicates
  """
  hasHustlerFeet: Boolean
  hasHustlerFeetWith: [HustlerWhereInput!]
  """
  hustler_hands edge predicates
  """
  hasHustlerHands: Boolean
  hasHustlerHandsWith: [HustlerWhereInput!]
  """
  hustler_drugs edge predicates
  """
  hasHustlerDrugs: Boolean
  hasHustlerDrugsWith: [HustlerWhereInput!]
  """
  hustler_necks edge predicates
  """
  hasHustlerNecks: Boolean
  hasHustlerNecksWith: [HustlerWhereInput!]
  """
  hustler_rings edge predicates
  """
  hasHustlerRings: Boolean
  hasHustlerRingsWith: [HustlerWhereInput!]
  """
  hustler_accessories edge predicates
  """
  hasHustlerAccessories: Boolean
  hasHustlerAccessoriesWith: [HustlerWhereInput!]
  """
  base edge predicates
  """
  hasBase: Boolean
  hasBaseWith: [ItemWhereInput!]
  """
  derivative edge predicates
  """
  hasDerivative: Boolean
  hasDerivativeWith: [ItemWhereInput!]
  """
  index edge predicates
  """
  hasIndex: Boolean
  hasIndexWith: [SearchWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/dopedao/dope-monorepo/packages/api/internal/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  bodyParts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for BodyParts returned from the connection.
    """
    where: BodyPartWhereInput
  ): BodyPartConnection!
  dopes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Dopes returned from the connection.
    """
    orderBy: DopeOrder

    """
    Filtering options for Dopes returned from the connection.
    """
    where: DopeWhereInput
  ): DopeConnection!
  hustlers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Hustlers returned from the connection.
    """
    orderBy: HustlerOrder

    """
    Filtering options for Hustlers returned from the connection.
    """
    where: HustlerWhereInput
  ): HustlerConnection!
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Items returned from the connection.
    """
    orderBy: ItemOrder

    """
    Filtering options for Items returned from the connection.
    """
    where: ItemWhereInput
  ): ItemConnection!
  wallets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Wallets returned from the connection.
    """
    orderBy: WalletOrder

    """
    Filtering options for Wallets returned from the connection.
    """
    where: WalletWhereInput
  ): WalletConnection!
  walletItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for WalletItemsSlice returned from the connection.
    """
    where: WalletItemsWhereInput
  ): WalletItemsConnection!
}
type Search implements Node {
  id: ID!
  type: SearchSearchType!
  greatness: Int
  claimed: Boolean!
  opened: Boolean!
  banned: Boolean!
  salePrice: Float
  dope: Dope
  item: Item
  hustler: Hustler
}
"""
A connection to a list of items.
"""
type SearchConnection {
  """
  A list of edges.
  """
  edges: [SearchEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SearchEdge {
  """
  The item at the end of the edge.
  """
  node: Search
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Search connections
"""
input SearchOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Searches.
  """
  field: SearchOrderField!
}
"""
Properties by which Search connections can be ordered.
"""
enum SearchOrderField {
  GREATNESS
  SALE_PRICE
}
"""
SearchSearchType is enum for the field type
"""
enum SearchSearchType @goModel(model: "github.com/dopedao/dope-monorepo/packages/api/internal/ent/search.Type") {
  DOPE
  ITEM
  HUSTLER
}
"""
SearchWhereInput is used for filtering Search objects.
Input was generated by ent.
"""
input SearchWhereInput {
  not: SearchWhereInput
  and: [SearchWhereInput!]
  or: [SearchWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  type field predicates
  """
  type: SearchSearchType
  typeNEQ: SearchSearchType
  typeIn: [SearchSearchType!]
  typeNotIn: [SearchSearchType!]
  """
  greatness field predicates
  """
  greatness: Int
  greatnessNEQ: Int
  greatnessIn: [Int!]
  greatnessNotIn: [Int!]
  greatnessGT: Int
  greatnessGTE: Int
  greatnessLT: Int
  greatnessLTE: Int
  greatnessIsNil: Boolean
  greatnessNotNil: Boolean
  """
  claimed field predicates
  """
  claimed: Boolean
  claimedNEQ: Boolean
  """
  opened field predicates
  """
  opened: Boolean
  openedNEQ: Boolean
  """
  banned field predicates
  """
  banned: Boolean
  bannedNEQ: Boolean
  """
  sale_price field predicates
  """
  salePrice: Float
  salePriceNEQ: Float
  salePriceIn: [Float!]
  salePriceNotIn: [Float!]
  salePriceGT: Float
  salePriceGTE: Float
  salePriceLT: Float
  salePriceLTE: Float
  salePriceIsNil: Boolean
  salePriceNotNil: Boolean
  """
  dope edge predicates
  """
  hasDope: Boolean
  hasDopeWith: [DopeWhereInput!]
  """
  item edge predicates
  """
  hasItem: Boolean
  hasItemWith: [ItemWhereInput!]
  """
  hustler edge predicates
  """
  hasHustler: Boolean
  hasHustlerWith: [HustlerWhereInput!]
}
type SyncState implements Node {
  id: ID!
  contractName: String
  startBlock: Long!
  blockTime: Time
  lastSyncedAt: Time
}
"""
SyncStateWhereInput is used for filtering SyncState objects.
Input was generated by ent.
"""
input SyncStateWhereInput {
  not: SyncStateWhereInput
  and: [SyncStateWhereInput!]
  or: [SyncStateWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  contract_name field predicates
  """
  contractName: String
  contractNameNEQ: String
  contractNameIn: [String!]
  contractNameNotIn: [String!]
  contractNameGT: String
  contractNameGTE: String
  contractNameLT: String
  contractNameLTE: String
  contractNameContains: String
  contractNameHasPrefix: String
  contractNameHasSuffix: String
  contractNameIsNil: Boolean
  contractNameNotNil: Boolean
  contractNameEqualFold: String
  contractNameContainsFold: String
  """
  start_block field predicates
  """
  startBlock: Long
  startBlockNEQ: Long
  startBlockIn: [Long!]
  startBlockNotIn: [Long!]
  startBlockGT: Long
  startBlockGTE: Long
  startBlockLT: Long
  startBlockLTE: Long
  """
  block_time field predicates
  """
  blockTime: Time
  blockTimeNEQ: Time
  blockTimeIn: [Time!]
  blockTimeNotIn: [Time!]
  blockTimeGT: Time
  blockTimeGTE: Time
  blockTimeLT: Time
  blockTimeLTE: Time
  blockTimeIsNil: Boolean
  blockTimeNotNil: Boolean
  """
  last_synced_at field predicates
  """
  lastSyncedAt: Time
  lastSyncedAtNEQ: Time
  lastSyncedAtIn: [Time!]
  lastSyncedAtNotIn: [Time!]
  lastSyncedAtGT: Time
  lastSyncedAtGTE: Time
  lastSyncedAtLT: Time
  lastSyncedAtLTE: Time
  lastSyncedAtIsNil: Boolean
  lastSyncedAtNotNil: Boolean
}
"""
The builtin Time type
"""
scalar Time
type Wallet implements Node {
  id: ID!
  paper: BigInt!
  lastSetPaperBalanceAt: Time
  createdAt: Time!
  dopes: [Dope!]
  items: [WalletItems!]
  hustlers: [Hustler!]
}
"""
A connection to a list of items.
"""
type WalletConnection {
  """
  A list of edges.
  """
  edges: [WalletEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type WalletEdge {
  """
  The item at the end of the edge.
  """
  node: Wallet
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type WalletItems implements Node {
  id: ID!
  balance: BigInt!
  wallet: Wallet
  item: Item
}
"""
A connection to a list of items.
"""
type WalletItemsConnection {
  """
  A list of edges.
  """
  edges: [WalletItemsEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type WalletItemsEdge {
  """
  The item at the end of the edge.
  """
  node: WalletItems
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
WalletItemsWhereInput is used for filtering WalletItems objects.
Input was generated by ent.
"""
input WalletItemsWhereInput {
  not: WalletItemsWhereInput
  and: [WalletItemsWhereInput!]
  or: [WalletItemsWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  balance field predicates
  """
  balance: BigInt
  balanceNEQ: BigInt
  balanceIn: [BigInt!]
  balanceNotIn: [BigInt!]
  balanceGT: BigInt
  balanceGTE: BigInt
  balanceLT: BigInt
  balanceLTE: BigInt
  """
  wallet edge predicates
  """
  hasWallet: Boolean
  hasWalletWith: [WalletWhereInput!]
  """
  item edge predicates
  """
  hasItem: Boolean
  hasItemWith: [ItemWhereInput!]
}
"""
Ordering options for Wallet connections
"""
input WalletOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Wallets.
  """
  field: WalletOrderField!
}
"""
Properties by which Wallet connections can be ordered.
"""
enum WalletOrderField {
  CREATED_AT
}
"""
WalletWhereInput is used for filtering Wallet objects.
Input was generated by ent.
"""
input WalletWhereInput {
  not: WalletWhereInput
  and: [WalletWhereInput!]
  or: [WalletWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  paper field predicates
  """
  paper: BigInt
  paperNEQ: BigInt
  paperIn: [BigInt!]
  paperNotIn: [BigInt!]
  paperGT: BigInt
  paperGTE: BigInt
  paperLT: BigInt
  paperLTE: BigInt
  """
  last_set_paper_balance_at field predicates
  """
  lastSetPaperBalanceAt: Time
  lastSetPaperBalanceAtNEQ: Time
  lastSetPaperBalanceAtIn: [Time!]
  lastSetPaperBalanceAtNotIn: [Time!]
  lastSetPaperBalanceAtGT: Time
  lastSetPaperBalanceAtGTE: Time
  lastSetPaperBalanceAtLT: Time
  lastSetPaperBalanceAtLTE: Time
  lastSetPaperBalanceAtIsNil: Boolean
  lastSetPaperBalanceAtNotNil: Boolean
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  dopes edge predicates
  """
  hasDopes: Boolean
  hasDopesWith: [DopeWhereInput!]
  """
  items edge predicates
  """
  hasItems: Boolean
  hasItemsWith: [WalletItemsWhereInput!]
  """
  hustlers edge predicates
  """
  hasHustlers: Boolean
  hasHustlersWith: [HustlerWhereInput!]
}
