// Code generated by ent, DO NOT EDIT.

package gamehustlerquest

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldContainsFold(FieldID, id))
}

// Quest applies equality check predicate on the "quest" field. It's identical to QuestEQ.
func Quest(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldEQ(FieldQuest, v))
}

// Completed applies equality check predicate on the "completed" field. It's identical to CompletedEQ.
func Completed(v bool) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldEQ(FieldCompleted, v))
}

// QuestEQ applies the EQ predicate on the "quest" field.
func QuestEQ(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldEQ(FieldQuest, v))
}

// QuestNEQ applies the NEQ predicate on the "quest" field.
func QuestNEQ(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldNEQ(FieldQuest, v))
}

// QuestIn applies the In predicate on the "quest" field.
func QuestIn(vs ...string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldIn(FieldQuest, vs...))
}

// QuestNotIn applies the NotIn predicate on the "quest" field.
func QuestNotIn(vs ...string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldNotIn(FieldQuest, vs...))
}

// QuestGT applies the GT predicate on the "quest" field.
func QuestGT(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldGT(FieldQuest, v))
}

// QuestGTE applies the GTE predicate on the "quest" field.
func QuestGTE(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldGTE(FieldQuest, v))
}

// QuestLT applies the LT predicate on the "quest" field.
func QuestLT(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldLT(FieldQuest, v))
}

// QuestLTE applies the LTE predicate on the "quest" field.
func QuestLTE(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldLTE(FieldQuest, v))
}

// QuestContains applies the Contains predicate on the "quest" field.
func QuestContains(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldContains(FieldQuest, v))
}

// QuestHasPrefix applies the HasPrefix predicate on the "quest" field.
func QuestHasPrefix(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldHasPrefix(FieldQuest, v))
}

// QuestHasSuffix applies the HasSuffix predicate on the "quest" field.
func QuestHasSuffix(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldHasSuffix(FieldQuest, v))
}

// QuestEqualFold applies the EqualFold predicate on the "quest" field.
func QuestEqualFold(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldEqualFold(FieldQuest, v))
}

// QuestContainsFold applies the ContainsFold predicate on the "quest" field.
func QuestContainsFold(v string) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldContainsFold(FieldQuest, v))
}

// CompletedEQ applies the EQ predicate on the "completed" field.
func CompletedEQ(v bool) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldEQ(FieldCompleted, v))
}

// CompletedNEQ applies the NEQ predicate on the "completed" field.
func CompletedNEQ(v bool) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.FieldNEQ(FieldCompleted, v))
}

// HasHustler applies the HasEdge predicate on the "hustler" edge.
func HasHustler() predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HustlerTable, HustlerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerWith applies the HasEdge predicate on the "hustler" edge with a given conditions (other predicates).
func HasHustlerWith(preds ...predicate.GameHustler) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(func(s *sql.Selector) {
		step := newHustlerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GameHustlerQuest) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GameHustlerQuest) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GameHustlerQuest) predicate.GameHustlerQuest {
	return predicate.GameHustlerQuest(sql.NotPredicates(p))
}
