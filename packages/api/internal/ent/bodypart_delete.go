// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/bodypart"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// BodyPartDelete is the builder for deleting a BodyPart entity.
type BodyPartDelete struct {
	config
	hooks    []Hook
	mutation *BodyPartMutation
}

// Where appends a list predicates to the BodyPartDelete builder.
func (bpd *BodyPartDelete) Where(ps ...predicate.BodyPart) *BodyPartDelete {
	bpd.mutation.Where(ps...)
	return bpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bpd *BodyPartDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, BodyPartMutation](ctx, bpd.sqlExec, bpd.mutation, bpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bpd *BodyPartDelete) ExecX(ctx context.Context) int {
	n, err := bpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bpd *BodyPartDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(bodypart.Table, sqlgraph.NewFieldSpec(bodypart.FieldID, field.TypeString))
	if ps := bpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bpd.mutation.done = true
	return affected, err
}

// BodyPartDeleteOne is the builder for deleting a single BodyPart entity.
type BodyPartDeleteOne struct {
	bpd *BodyPartDelete
}

// Where appends a list predicates to the BodyPartDelete builder.
func (bpdo *BodyPartDeleteOne) Where(ps ...predicate.BodyPart) *BodyPartDeleteOne {
	bpdo.bpd.mutation.Where(ps...)
	return bpdo
}

// Exec executes the deletion query.
func (bpdo *BodyPartDeleteOne) Exec(ctx context.Context) error {
	n, err := bpdo.bpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{bodypart.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bpdo *BodyPartDeleteOne) ExecX(ctx context.Context) {
	if err := bpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
