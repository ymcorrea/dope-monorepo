// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustleritem"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// GameHustlerItemQuery is the builder for querying GameHustlerItem entities.
type GameHustlerItemQuery struct {
	config
	ctx         *QueryContext
	order       []gamehustleritem.OrderOption
	inters      []Interceptor
	predicates  []predicate.GameHustlerItem
	withHustler *GameHustlerQuery
	withFKs     bool
	modifiers   []func(*sql.Selector)
	loadTotal   []func(context.Context, []*GameHustlerItem) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameHustlerItemQuery builder.
func (ghiq *GameHustlerItemQuery) Where(ps ...predicate.GameHustlerItem) *GameHustlerItemQuery {
	ghiq.predicates = append(ghiq.predicates, ps...)
	return ghiq
}

// Limit the number of records to be returned by this query.
func (ghiq *GameHustlerItemQuery) Limit(limit int) *GameHustlerItemQuery {
	ghiq.ctx.Limit = &limit
	return ghiq
}

// Offset to start from.
func (ghiq *GameHustlerItemQuery) Offset(offset int) *GameHustlerItemQuery {
	ghiq.ctx.Offset = &offset
	return ghiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ghiq *GameHustlerItemQuery) Unique(unique bool) *GameHustlerItemQuery {
	ghiq.ctx.Unique = &unique
	return ghiq
}

// Order specifies how the records should be ordered.
func (ghiq *GameHustlerItemQuery) Order(o ...gamehustleritem.OrderOption) *GameHustlerItemQuery {
	ghiq.order = append(ghiq.order, o...)
	return ghiq
}

// QueryHustler chains the current query on the "hustler" edge.
func (ghiq *GameHustlerItemQuery) QueryHustler() *GameHustlerQuery {
	query := (&GameHustlerClient{config: ghiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ghiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ghiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamehustleritem.Table, gamehustleritem.FieldID, selector),
			sqlgraph.To(gamehustler.Table, gamehustler.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gamehustleritem.HustlerTable, gamehustleritem.HustlerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ghiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameHustlerItem entity from the query.
// Returns a *NotFoundError when no GameHustlerItem was found.
func (ghiq *GameHustlerItemQuery) First(ctx context.Context) (*GameHustlerItem, error) {
	nodes, err := ghiq.Limit(1).All(setContextOp(ctx, ghiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gamehustleritem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ghiq *GameHustlerItemQuery) FirstX(ctx context.Context) *GameHustlerItem {
	node, err := ghiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameHustlerItem ID from the query.
// Returns a *NotFoundError when no GameHustlerItem ID was found.
func (ghiq *GameHustlerItemQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ghiq.Limit(1).IDs(setContextOp(ctx, ghiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gamehustleritem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ghiq *GameHustlerItemQuery) FirstIDX(ctx context.Context) string {
	id, err := ghiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameHustlerItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameHustlerItem entity is found.
// Returns a *NotFoundError when no GameHustlerItem entities are found.
func (ghiq *GameHustlerItemQuery) Only(ctx context.Context) (*GameHustlerItem, error) {
	nodes, err := ghiq.Limit(2).All(setContextOp(ctx, ghiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gamehustleritem.Label}
	default:
		return nil, &NotSingularError{gamehustleritem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ghiq *GameHustlerItemQuery) OnlyX(ctx context.Context) *GameHustlerItem {
	node, err := ghiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameHustlerItem ID in the query.
// Returns a *NotSingularError when more than one GameHustlerItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (ghiq *GameHustlerItemQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ghiq.Limit(2).IDs(setContextOp(ctx, ghiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gamehustleritem.Label}
	default:
		err = &NotSingularError{gamehustleritem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ghiq *GameHustlerItemQuery) OnlyIDX(ctx context.Context) string {
	id, err := ghiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameHustlerItems.
func (ghiq *GameHustlerItemQuery) All(ctx context.Context) ([]*GameHustlerItem, error) {
	ctx = setContextOp(ctx, ghiq.ctx, "All")
	if err := ghiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GameHustlerItem, *GameHustlerItemQuery]()
	return withInterceptors[[]*GameHustlerItem](ctx, ghiq, qr, ghiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ghiq *GameHustlerItemQuery) AllX(ctx context.Context) []*GameHustlerItem {
	nodes, err := ghiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameHustlerItem IDs.
func (ghiq *GameHustlerItemQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ghiq.ctx.Unique == nil && ghiq.path != nil {
		ghiq.Unique(true)
	}
	ctx = setContextOp(ctx, ghiq.ctx, "IDs")
	if err = ghiq.Select(gamehustleritem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ghiq *GameHustlerItemQuery) IDsX(ctx context.Context) []string {
	ids, err := ghiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ghiq *GameHustlerItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ghiq.ctx, "Count")
	if err := ghiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ghiq, querierCount[*GameHustlerItemQuery](), ghiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ghiq *GameHustlerItemQuery) CountX(ctx context.Context) int {
	count, err := ghiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ghiq *GameHustlerItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ghiq.ctx, "Exist")
	switch _, err := ghiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ghiq *GameHustlerItemQuery) ExistX(ctx context.Context) bool {
	exist, err := ghiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameHustlerItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ghiq *GameHustlerItemQuery) Clone() *GameHustlerItemQuery {
	if ghiq == nil {
		return nil
	}
	return &GameHustlerItemQuery{
		config:      ghiq.config,
		ctx:         ghiq.ctx.Clone(),
		order:       append([]gamehustleritem.OrderOption{}, ghiq.order...),
		inters:      append([]Interceptor{}, ghiq.inters...),
		predicates:  append([]predicate.GameHustlerItem{}, ghiq.predicates...),
		withHustler: ghiq.withHustler.Clone(),
		// clone intermediate query.
		sql:  ghiq.sql.Clone(),
		path: ghiq.path,
	}
}

// WithHustler tells the query-builder to eager-load the nodes that are connected to
// the "hustler" edge. The optional arguments are used to configure the query builder of the edge.
func (ghiq *GameHustlerItemQuery) WithHustler(opts ...func(*GameHustlerQuery)) *GameHustlerItemQuery {
	query := (&GameHustlerClient{config: ghiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ghiq.withHustler = query
	return ghiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Item string `json:"item,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameHustlerItem.Query().
//		GroupBy(gamehustleritem.FieldItem).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ghiq *GameHustlerItemQuery) GroupBy(field string, fields ...string) *GameHustlerItemGroupBy {
	ghiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GameHustlerItemGroupBy{build: ghiq}
	grbuild.flds = &ghiq.ctx.Fields
	grbuild.label = gamehustleritem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Item string `json:"item,omitempty"`
//	}
//
//	client.GameHustlerItem.Query().
//		Select(gamehustleritem.FieldItem).
//		Scan(ctx, &v)
func (ghiq *GameHustlerItemQuery) Select(fields ...string) *GameHustlerItemSelect {
	ghiq.ctx.Fields = append(ghiq.ctx.Fields, fields...)
	sbuild := &GameHustlerItemSelect{GameHustlerItemQuery: ghiq}
	sbuild.label = gamehustleritem.Label
	sbuild.flds, sbuild.scan = &ghiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GameHustlerItemSelect configured with the given aggregations.
func (ghiq *GameHustlerItemQuery) Aggregate(fns ...AggregateFunc) *GameHustlerItemSelect {
	return ghiq.Select().Aggregate(fns...)
}

func (ghiq *GameHustlerItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ghiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ghiq); err != nil {
				return err
			}
		}
	}
	for _, f := range ghiq.ctx.Fields {
		if !gamehustleritem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ghiq.path != nil {
		prev, err := ghiq.path(ctx)
		if err != nil {
			return err
		}
		ghiq.sql = prev
	}
	return nil
}

func (ghiq *GameHustlerItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameHustlerItem, error) {
	var (
		nodes       = []*GameHustlerItem{}
		withFKs     = ghiq.withFKs
		_spec       = ghiq.querySpec()
		loadedTypes = [1]bool{
			ghiq.withHustler != nil,
		}
	)
	if ghiq.withHustler != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gamehustleritem.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameHustlerItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameHustlerItem{config: ghiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ghiq.modifiers) > 0 {
		_spec.Modifiers = ghiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ghiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ghiq.withHustler; query != nil {
		if err := ghiq.loadHustler(ctx, query, nodes, nil,
			func(n *GameHustlerItem, e *GameHustler) { n.Edges.Hustler = e }); err != nil {
			return nil, err
		}
	}
	for i := range ghiq.loadTotal {
		if err := ghiq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ghiq *GameHustlerItemQuery) loadHustler(ctx context.Context, query *GameHustlerQuery, nodes []*GameHustlerItem, init func(*GameHustlerItem), assign func(*GameHustlerItem, *GameHustler)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*GameHustlerItem)
	for i := range nodes {
		if nodes[i].game_hustler_items == nil {
			continue
		}
		fk := *nodes[i].game_hustler_items
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(gamehustler.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_hustler_items" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ghiq *GameHustlerItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ghiq.querySpec()
	if len(ghiq.modifiers) > 0 {
		_spec.Modifiers = ghiq.modifiers
	}
	_spec.Node.Columns = ghiq.ctx.Fields
	if len(ghiq.ctx.Fields) > 0 {
		_spec.Unique = ghiq.ctx.Unique != nil && *ghiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ghiq.driver, _spec)
}

func (ghiq *GameHustlerItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gamehustleritem.Table, gamehustleritem.Columns, sqlgraph.NewFieldSpec(gamehustleritem.FieldID, field.TypeString))
	_spec.From = ghiq.sql
	if unique := ghiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ghiq.path != nil {
		_spec.Unique = true
	}
	if fields := ghiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamehustleritem.FieldID)
		for i := range fields {
			if fields[i] != gamehustleritem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ghiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ghiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ghiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ghiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ghiq *GameHustlerItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ghiq.driver.Dialect())
	t1 := builder.Table(gamehustleritem.Table)
	columns := ghiq.ctx.Fields
	if len(columns) == 0 {
		columns = gamehustleritem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ghiq.sql != nil {
		selector = ghiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ghiq.ctx.Unique != nil && *ghiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ghiq.predicates {
		p(selector)
	}
	for _, p := range ghiq.order {
		p(selector)
	}
	if offset := ghiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ghiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameHustlerItemGroupBy is the group-by builder for GameHustlerItem entities.
type GameHustlerItemGroupBy struct {
	selector
	build *GameHustlerItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ghigb *GameHustlerItemGroupBy) Aggregate(fns ...AggregateFunc) *GameHustlerItemGroupBy {
	ghigb.fns = append(ghigb.fns, fns...)
	return ghigb
}

// Scan applies the selector query and scans the result into the given value.
func (ghigb *GameHustlerItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ghigb.build.ctx, "GroupBy")
	if err := ghigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameHustlerItemQuery, *GameHustlerItemGroupBy](ctx, ghigb.build, ghigb, ghigb.build.inters, v)
}

func (ghigb *GameHustlerItemGroupBy) sqlScan(ctx context.Context, root *GameHustlerItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ghigb.fns))
	for _, fn := range ghigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ghigb.flds)+len(ghigb.fns))
		for _, f := range *ghigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ghigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ghigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GameHustlerItemSelect is the builder for selecting fields of GameHustlerItem entities.
type GameHustlerItemSelect struct {
	*GameHustlerItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ghis *GameHustlerItemSelect) Aggregate(fns ...AggregateFunc) *GameHustlerItemSelect {
	ghis.fns = append(ghis.fns, fns...)
	return ghis
}

// Scan applies the selector query and scans the result into the given value.
func (ghis *GameHustlerItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ghis.ctx, "Select")
	if err := ghis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameHustlerItemQuery, *GameHustlerItemSelect](ctx, ghis.GameHustlerItemQuery, ghis, ghis.inters, v)
}

func (ghis *GameHustlerItemSelect) sqlScan(ctx context.Context, root *GameHustlerItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ghis.fns))
	for _, fn := range ghis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ghis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ghis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
