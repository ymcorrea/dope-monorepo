// Code generated by ent, DO NOT EDIT.

package bodypart

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldContainsFold(FieldID, id))
}

// Rle applies equality check predicate on the "rle" field. It's identical to RleEQ.
func Rle(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEQ(FieldRle, v))
}

// Sprite applies equality check predicate on the "sprite" field. It's identical to SpriteEQ.
func Sprite(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEQ(FieldSprite, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNotIn(FieldType, vs...))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v Sex) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v Sex) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...Sex) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...Sex) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNotIn(FieldSex, vs...))
}

// RleEQ applies the EQ predicate on the "rle" field.
func RleEQ(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEQ(FieldRle, v))
}

// RleNEQ applies the NEQ predicate on the "rle" field.
func RleNEQ(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNEQ(FieldRle, v))
}

// RleIn applies the In predicate on the "rle" field.
func RleIn(vs ...string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldIn(FieldRle, vs...))
}

// RleNotIn applies the NotIn predicate on the "rle" field.
func RleNotIn(vs ...string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNotIn(FieldRle, vs...))
}

// RleGT applies the GT predicate on the "rle" field.
func RleGT(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldGT(FieldRle, v))
}

// RleGTE applies the GTE predicate on the "rle" field.
func RleGTE(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldGTE(FieldRle, v))
}

// RleLT applies the LT predicate on the "rle" field.
func RleLT(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldLT(FieldRle, v))
}

// RleLTE applies the LTE predicate on the "rle" field.
func RleLTE(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldLTE(FieldRle, v))
}

// RleContains applies the Contains predicate on the "rle" field.
func RleContains(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldContains(FieldRle, v))
}

// RleHasPrefix applies the HasPrefix predicate on the "rle" field.
func RleHasPrefix(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldHasPrefix(FieldRle, v))
}

// RleHasSuffix applies the HasSuffix predicate on the "rle" field.
func RleHasSuffix(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldHasSuffix(FieldRle, v))
}

// RleEqualFold applies the EqualFold predicate on the "rle" field.
func RleEqualFold(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEqualFold(FieldRle, v))
}

// RleContainsFold applies the ContainsFold predicate on the "rle" field.
func RleContainsFold(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldContainsFold(FieldRle, v))
}

// SpriteEQ applies the EQ predicate on the "sprite" field.
func SpriteEQ(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEQ(FieldSprite, v))
}

// SpriteNEQ applies the NEQ predicate on the "sprite" field.
func SpriteNEQ(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNEQ(FieldSprite, v))
}

// SpriteIn applies the In predicate on the "sprite" field.
func SpriteIn(vs ...string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldIn(FieldSprite, vs...))
}

// SpriteNotIn applies the NotIn predicate on the "sprite" field.
func SpriteNotIn(vs ...string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNotIn(FieldSprite, vs...))
}

// SpriteGT applies the GT predicate on the "sprite" field.
func SpriteGT(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldGT(FieldSprite, v))
}

// SpriteGTE applies the GTE predicate on the "sprite" field.
func SpriteGTE(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldGTE(FieldSprite, v))
}

// SpriteLT applies the LT predicate on the "sprite" field.
func SpriteLT(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldLT(FieldSprite, v))
}

// SpriteLTE applies the LTE predicate on the "sprite" field.
func SpriteLTE(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldLTE(FieldSprite, v))
}

// SpriteContains applies the Contains predicate on the "sprite" field.
func SpriteContains(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldContains(FieldSprite, v))
}

// SpriteHasPrefix applies the HasPrefix predicate on the "sprite" field.
func SpriteHasPrefix(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldHasPrefix(FieldSprite, v))
}

// SpriteHasSuffix applies the HasSuffix predicate on the "sprite" field.
func SpriteHasSuffix(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldHasSuffix(FieldSprite, v))
}

// SpriteIsNil applies the IsNil predicate on the "sprite" field.
func SpriteIsNil() predicate.BodyPart {
	return predicate.BodyPart(sql.FieldIsNull(FieldSprite))
}

// SpriteNotNil applies the NotNil predicate on the "sprite" field.
func SpriteNotNil() predicate.BodyPart {
	return predicate.BodyPart(sql.FieldNotNull(FieldSprite))
}

// SpriteEqualFold applies the EqualFold predicate on the "sprite" field.
func SpriteEqualFold(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldEqualFold(FieldSprite, v))
}

// SpriteContainsFold applies the ContainsFold predicate on the "sprite" field.
func SpriteContainsFold(v string) predicate.BodyPart {
	return predicate.BodyPart(sql.FieldContainsFold(FieldSprite, v))
}

// HasHustlerBodies applies the HasEdge predicate on the "hustler_bodies" edge.
func HasHustlerBodies() predicate.BodyPart {
	return predicate.BodyPart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerBodiesTable, HustlerBodiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerBodiesWith applies the HasEdge predicate on the "hustler_bodies" edge with a given conditions (other predicates).
func HasHustlerBodiesWith(preds ...predicate.Hustler) predicate.BodyPart {
	return predicate.BodyPart(func(s *sql.Selector) {
		step := newHustlerBodiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerHairs applies the HasEdge predicate on the "hustler_hairs" edge.
func HasHustlerHairs() predicate.BodyPart {
	return predicate.BodyPart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerHairsTable, HustlerHairsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerHairsWith applies the HasEdge predicate on the "hustler_hairs" edge with a given conditions (other predicates).
func HasHustlerHairsWith(preds ...predicate.Hustler) predicate.BodyPart {
	return predicate.BodyPart(func(s *sql.Selector) {
		step := newHustlerHairsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerBeards applies the HasEdge predicate on the "hustler_beards" edge.
func HasHustlerBeards() predicate.BodyPart {
	return predicate.BodyPart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerBeardsTable, HustlerBeardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerBeardsWith applies the HasEdge predicate on the "hustler_beards" edge with a given conditions (other predicates).
func HasHustlerBeardsWith(preds ...predicate.Hustler) predicate.BodyPart {
	return predicate.BodyPart(func(s *sql.Selector) {
		step := newHustlerBeardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BodyPart) predicate.BodyPart {
	return predicate.BodyPart(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BodyPart) predicate.BodyPart {
	return predicate.BodyPart(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BodyPart) predicate.BodyPart {
	return predicate.BodyPart(sql.NotPredicates(p))
}
