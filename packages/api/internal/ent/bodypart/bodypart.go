// Code generated by ent, DO NOT EDIT.

package bodypart

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bodypart type in the database.
	Label = "body_part"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldRle holds the string denoting the rle field in the database.
	FieldRle = "rle"
	// FieldSprite holds the string denoting the sprite field in the database.
	FieldSprite = "sprite"
	// EdgeHustlerBodies holds the string denoting the hustler_bodies edge name in mutations.
	EdgeHustlerBodies = "hustler_bodies"
	// EdgeHustlerHairs holds the string denoting the hustler_hairs edge name in mutations.
	EdgeHustlerHairs = "hustler_hairs"
	// EdgeHustlerBeards holds the string denoting the hustler_beards edge name in mutations.
	EdgeHustlerBeards = "hustler_beards"
	// Table holds the table name of the bodypart in the database.
	Table = "body_parts"
	// HustlerBodiesTable is the table that holds the hustler_bodies relation/edge.
	HustlerBodiesTable = "hustlers"
	// HustlerBodiesInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerBodiesInverseTable = "hustlers"
	// HustlerBodiesColumn is the table column denoting the hustler_bodies relation/edge.
	HustlerBodiesColumn = "body_part_hustler_bodies"
	// HustlerHairsTable is the table that holds the hustler_hairs relation/edge.
	HustlerHairsTable = "hustlers"
	// HustlerHairsInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerHairsInverseTable = "hustlers"
	// HustlerHairsColumn is the table column denoting the hustler_hairs relation/edge.
	HustlerHairsColumn = "body_part_hustler_hairs"
	// HustlerBeardsTable is the table that holds the hustler_beards relation/edge.
	HustlerBeardsTable = "hustlers"
	// HustlerBeardsInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerBeardsInverseTable = "hustlers"
	// HustlerBeardsColumn is the table column denoting the hustler_beards relation/edge.
	HustlerBeardsColumn = "body_part_hustler_beards"
)

// Columns holds all SQL columns for bodypart fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldSex,
	FieldRle,
	FieldSprite,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeBODY  Type = "BODY"
	TypeHAIR  Type = "HAIR"
	TypeBEARD Type = "BEARD"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeBODY, TypeHAIR, TypeBEARD:
		return nil
	default:
		return fmt.Errorf("bodypart: invalid enum value for type field: %q", _type)
	}
}

// Sex defines the type for the "sex" enum field.
type Sex string

// Sex values.
const (
	SexMALE   Sex = "MALE"
	SexFEMALE Sex = "FEMALE"
)

func (s Sex) String() string {
	return string(s)
}

// SexValidator is a validator for the "sex" field enum values. It is called by the builders before save.
func SexValidator(s Sex) error {
	switch s {
	case SexMALE, SexFEMALE:
		return nil
	default:
		return fmt.Errorf("bodypart: invalid enum value for sex field: %q", s)
	}
}

// OrderOption defines the ordering options for the BodyPart queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySex orders the results by the sex field.
func BySex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSex, opts...).ToFunc()
}

// ByRle orders the results by the rle field.
func ByRle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRle, opts...).ToFunc()
}

// BySprite orders the results by the sprite field.
func BySprite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSprite, opts...).ToFunc()
}

// ByHustlerBodiesCount orders the results by hustler_bodies count.
func ByHustlerBodiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerBodiesStep(), opts...)
	}
}

// ByHustlerBodies orders the results by hustler_bodies terms.
func ByHustlerBodies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerBodiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerHairsCount orders the results by hustler_hairs count.
func ByHustlerHairsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerHairsStep(), opts...)
	}
}

// ByHustlerHairs orders the results by hustler_hairs terms.
func ByHustlerHairs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerHairsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerBeardsCount orders the results by hustler_beards count.
func ByHustlerBeardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerBeardsStep(), opts...)
	}
}

// ByHustlerBeards orders the results by hustler_beards terms.
func ByHustlerBeards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerBeardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHustlerBodiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerBodiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerBodiesTable, HustlerBodiesColumn),
	)
}
func newHustlerHairsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerHairsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerHairsTable, HustlerHairsColumn),
	)
}
func newHustlerBeardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerBeardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerBeardsTable, HustlerBeardsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Sex) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Sex) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Sex(str)
	if err := SexValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Sex", str)
	}
	return nil
}
