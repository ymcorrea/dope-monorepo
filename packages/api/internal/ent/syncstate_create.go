// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/syncstate"
)

// SyncStateCreate is the builder for creating a SyncState entity.
type SyncStateCreate struct {
	config
	mutation *SyncStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetContractName sets the "contract_name" field.
func (ssc *SyncStateCreate) SetContractName(s string) *SyncStateCreate {
	ssc.mutation.SetContractName(s)
	return ssc
}

// SetNillableContractName sets the "contract_name" field if the given value is not nil.
func (ssc *SyncStateCreate) SetNillableContractName(s *string) *SyncStateCreate {
	if s != nil {
		ssc.SetContractName(*s)
	}
	return ssc
}

// SetStartBlock sets the "start_block" field.
func (ssc *SyncStateCreate) SetStartBlock(u uint64) *SyncStateCreate {
	ssc.mutation.SetStartBlock(u)
	return ssc
}

// SetBlockTime sets the "block_time" field.
func (ssc *SyncStateCreate) SetBlockTime(t time.Time) *SyncStateCreate {
	ssc.mutation.SetBlockTime(t)
	return ssc
}

// SetNillableBlockTime sets the "block_time" field if the given value is not nil.
func (ssc *SyncStateCreate) SetNillableBlockTime(t *time.Time) *SyncStateCreate {
	if t != nil {
		ssc.SetBlockTime(*t)
	}
	return ssc
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (ssc *SyncStateCreate) SetLastSyncedAt(t time.Time) *SyncStateCreate {
	ssc.mutation.SetLastSyncedAt(t)
	return ssc
}

// SetNillableLastSyncedAt sets the "last_synced_at" field if the given value is not nil.
func (ssc *SyncStateCreate) SetNillableLastSyncedAt(t *time.Time) *SyncStateCreate {
	if t != nil {
		ssc.SetLastSyncedAt(*t)
	}
	return ssc
}

// SetID sets the "id" field.
func (ssc *SyncStateCreate) SetID(s string) *SyncStateCreate {
	ssc.mutation.SetID(s)
	return ssc
}

// Mutation returns the SyncStateMutation object of the builder.
func (ssc *SyncStateCreate) Mutation() *SyncStateMutation {
	return ssc.mutation
}

// Save creates the SyncState in the database.
func (ssc *SyncStateCreate) Save(ctx context.Context) (*SyncState, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SyncStateCreate) SaveX(ctx context.Context) *SyncState {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SyncStateCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SyncStateCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *SyncStateCreate) defaults() {
	if _, ok := ssc.mutation.LastSyncedAt(); !ok {
		v := syncstate.DefaultLastSyncedAt()
		ssc.mutation.SetLastSyncedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SyncStateCreate) check() error {
	if _, ok := ssc.mutation.StartBlock(); !ok {
		return &ValidationError{Name: "start_block", err: errors.New(`ent: missing required field "SyncState.start_block"`)}
	}
	return nil
}

func (ssc *SyncStateCreate) sqlSave(ctx context.Context) (*SyncState, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SyncState.ID type: %T", _spec.ID.Value)
		}
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *SyncStateCreate) createSpec() (*SyncState, *sqlgraph.CreateSpec) {
	var (
		_node = &SyncState{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(syncstate.Table, sqlgraph.NewFieldSpec(syncstate.FieldID, field.TypeString))
	)
	_spec.OnConflict = ssc.conflict
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssc.mutation.ContractName(); ok {
		_spec.SetField(syncstate.FieldContractName, field.TypeString, value)
		_node.ContractName = value
	}
	if value, ok := ssc.mutation.StartBlock(); ok {
		_spec.SetField(syncstate.FieldStartBlock, field.TypeUint64, value)
		_node.StartBlock = value
	}
	if value, ok := ssc.mutation.BlockTime(); ok {
		_spec.SetField(syncstate.FieldBlockTime, field.TypeTime, value)
		_node.BlockTime = value
	}
	if value, ok := ssc.mutation.LastSyncedAt(); ok {
		_spec.SetField(syncstate.FieldLastSyncedAt, field.TypeTime, value)
		_node.LastSyncedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SyncState.Create().
//		SetContractName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SyncStateUpsert) {
//			SetContractName(v+v).
//		}).
//		Exec(ctx)
func (ssc *SyncStateCreate) OnConflict(opts ...sql.ConflictOption) *SyncStateUpsertOne {
	ssc.conflict = opts
	return &SyncStateUpsertOne{
		create: ssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SyncState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ssc *SyncStateCreate) OnConflictColumns(columns ...string) *SyncStateUpsertOne {
	ssc.conflict = append(ssc.conflict, sql.ConflictColumns(columns...))
	return &SyncStateUpsertOne{
		create: ssc,
	}
}

type (
	// SyncStateUpsertOne is the builder for "upsert"-ing
	//  one SyncState node.
	SyncStateUpsertOne struct {
		create *SyncStateCreate
	}

	// SyncStateUpsert is the "OnConflict" setter.
	SyncStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetContractName sets the "contract_name" field.
func (u *SyncStateUpsert) SetContractName(v string) *SyncStateUpsert {
	u.Set(syncstate.FieldContractName, v)
	return u
}

// UpdateContractName sets the "contract_name" field to the value that was provided on create.
func (u *SyncStateUpsert) UpdateContractName() *SyncStateUpsert {
	u.SetExcluded(syncstate.FieldContractName)
	return u
}

// ClearContractName clears the value of the "contract_name" field.
func (u *SyncStateUpsert) ClearContractName() *SyncStateUpsert {
	u.SetNull(syncstate.FieldContractName)
	return u
}

// SetStartBlock sets the "start_block" field.
func (u *SyncStateUpsert) SetStartBlock(v uint64) *SyncStateUpsert {
	u.Set(syncstate.FieldStartBlock, v)
	return u
}

// UpdateStartBlock sets the "start_block" field to the value that was provided on create.
func (u *SyncStateUpsert) UpdateStartBlock() *SyncStateUpsert {
	u.SetExcluded(syncstate.FieldStartBlock)
	return u
}

// AddStartBlock adds v to the "start_block" field.
func (u *SyncStateUpsert) AddStartBlock(v uint64) *SyncStateUpsert {
	u.Add(syncstate.FieldStartBlock, v)
	return u
}

// SetBlockTime sets the "block_time" field.
func (u *SyncStateUpsert) SetBlockTime(v time.Time) *SyncStateUpsert {
	u.Set(syncstate.FieldBlockTime, v)
	return u
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *SyncStateUpsert) UpdateBlockTime() *SyncStateUpsert {
	u.SetExcluded(syncstate.FieldBlockTime)
	return u
}

// ClearBlockTime clears the value of the "block_time" field.
func (u *SyncStateUpsert) ClearBlockTime() *SyncStateUpsert {
	u.SetNull(syncstate.FieldBlockTime)
	return u
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (u *SyncStateUpsert) SetLastSyncedAt(v time.Time) *SyncStateUpsert {
	u.Set(syncstate.FieldLastSyncedAt, v)
	return u
}

// UpdateLastSyncedAt sets the "last_synced_at" field to the value that was provided on create.
func (u *SyncStateUpsert) UpdateLastSyncedAt() *SyncStateUpsert {
	u.SetExcluded(syncstate.FieldLastSyncedAt)
	return u
}

// ClearLastSyncedAt clears the value of the "last_synced_at" field.
func (u *SyncStateUpsert) ClearLastSyncedAt() *SyncStateUpsert {
	u.SetNull(syncstate.FieldLastSyncedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SyncState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(syncstate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SyncStateUpsertOne) UpdateNewValues() *SyncStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(syncstate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SyncState.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SyncStateUpsertOne) Ignore() *SyncStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SyncStateUpsertOne) DoNothing() *SyncStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SyncStateCreate.OnConflict
// documentation for more info.
func (u *SyncStateUpsertOne) Update(set func(*SyncStateUpsert)) *SyncStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SyncStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetContractName sets the "contract_name" field.
func (u *SyncStateUpsertOne) SetContractName(v string) *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.SetContractName(v)
	})
}

// UpdateContractName sets the "contract_name" field to the value that was provided on create.
func (u *SyncStateUpsertOne) UpdateContractName() *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.UpdateContractName()
	})
}

// ClearContractName clears the value of the "contract_name" field.
func (u *SyncStateUpsertOne) ClearContractName() *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.ClearContractName()
	})
}

// SetStartBlock sets the "start_block" field.
func (u *SyncStateUpsertOne) SetStartBlock(v uint64) *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.SetStartBlock(v)
	})
}

// AddStartBlock adds v to the "start_block" field.
func (u *SyncStateUpsertOne) AddStartBlock(v uint64) *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.AddStartBlock(v)
	})
}

// UpdateStartBlock sets the "start_block" field to the value that was provided on create.
func (u *SyncStateUpsertOne) UpdateStartBlock() *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.UpdateStartBlock()
	})
}

// SetBlockTime sets the "block_time" field.
func (u *SyncStateUpsertOne) SetBlockTime(v time.Time) *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.SetBlockTime(v)
	})
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *SyncStateUpsertOne) UpdateBlockTime() *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.UpdateBlockTime()
	})
}

// ClearBlockTime clears the value of the "block_time" field.
func (u *SyncStateUpsertOne) ClearBlockTime() *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.ClearBlockTime()
	})
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (u *SyncStateUpsertOne) SetLastSyncedAt(v time.Time) *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.SetLastSyncedAt(v)
	})
}

// UpdateLastSyncedAt sets the "last_synced_at" field to the value that was provided on create.
func (u *SyncStateUpsertOne) UpdateLastSyncedAt() *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.UpdateLastSyncedAt()
	})
}

// ClearLastSyncedAt clears the value of the "last_synced_at" field.
func (u *SyncStateUpsertOne) ClearLastSyncedAt() *SyncStateUpsertOne {
	return u.Update(func(s *SyncStateUpsert) {
		s.ClearLastSyncedAt()
	})
}

// Exec executes the query.
func (u *SyncStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SyncStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SyncStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SyncStateUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SyncStateUpsertOne.ID is not supported by MySQL driver. Use SyncStateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SyncStateUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SyncStateCreateBulk is the builder for creating many SyncState entities in bulk.
type SyncStateCreateBulk struct {
	config
	err      error
	builders []*SyncStateCreate
	conflict []sql.ConflictOption
}

// Save creates the SyncState entities in the database.
func (sscb *SyncStateCreateBulk) Save(ctx context.Context) ([]*SyncState, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SyncState, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SyncStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SyncStateCreateBulk) SaveX(ctx context.Context) []*SyncState {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SyncStateCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SyncStateCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SyncState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SyncStateUpsert) {
//			SetContractName(v+v).
//		}).
//		Exec(ctx)
func (sscb *SyncStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *SyncStateUpsertBulk {
	sscb.conflict = opts
	return &SyncStateUpsertBulk{
		create: sscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SyncState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sscb *SyncStateCreateBulk) OnConflictColumns(columns ...string) *SyncStateUpsertBulk {
	sscb.conflict = append(sscb.conflict, sql.ConflictColumns(columns...))
	return &SyncStateUpsertBulk{
		create: sscb,
	}
}

// SyncStateUpsertBulk is the builder for "upsert"-ing
// a bulk of SyncState nodes.
type SyncStateUpsertBulk struct {
	create *SyncStateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SyncState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(syncstate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SyncStateUpsertBulk) UpdateNewValues() *SyncStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(syncstate.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SyncState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SyncStateUpsertBulk) Ignore() *SyncStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SyncStateUpsertBulk) DoNothing() *SyncStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SyncStateCreateBulk.OnConflict
// documentation for more info.
func (u *SyncStateUpsertBulk) Update(set func(*SyncStateUpsert)) *SyncStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SyncStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetContractName sets the "contract_name" field.
func (u *SyncStateUpsertBulk) SetContractName(v string) *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.SetContractName(v)
	})
}

// UpdateContractName sets the "contract_name" field to the value that was provided on create.
func (u *SyncStateUpsertBulk) UpdateContractName() *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.UpdateContractName()
	})
}

// ClearContractName clears the value of the "contract_name" field.
func (u *SyncStateUpsertBulk) ClearContractName() *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.ClearContractName()
	})
}

// SetStartBlock sets the "start_block" field.
func (u *SyncStateUpsertBulk) SetStartBlock(v uint64) *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.SetStartBlock(v)
	})
}

// AddStartBlock adds v to the "start_block" field.
func (u *SyncStateUpsertBulk) AddStartBlock(v uint64) *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.AddStartBlock(v)
	})
}

// UpdateStartBlock sets the "start_block" field to the value that was provided on create.
func (u *SyncStateUpsertBulk) UpdateStartBlock() *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.UpdateStartBlock()
	})
}

// SetBlockTime sets the "block_time" field.
func (u *SyncStateUpsertBulk) SetBlockTime(v time.Time) *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.SetBlockTime(v)
	})
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *SyncStateUpsertBulk) UpdateBlockTime() *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.UpdateBlockTime()
	})
}

// ClearBlockTime clears the value of the "block_time" field.
func (u *SyncStateUpsertBulk) ClearBlockTime() *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.ClearBlockTime()
	})
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (u *SyncStateUpsertBulk) SetLastSyncedAt(v time.Time) *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.SetLastSyncedAt(v)
	})
}

// UpdateLastSyncedAt sets the "last_synced_at" field to the value that was provided on create.
func (u *SyncStateUpsertBulk) UpdateLastSyncedAt() *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.UpdateLastSyncedAt()
	})
}

// ClearLastSyncedAt clears the value of the "last_synced_at" field.
func (u *SyncStateUpsertBulk) ClearLastSyncedAt() *SyncStateUpsertBulk {
	return u.Update(func(s *SyncStateUpsert) {
		s.ClearLastSyncedAt()
	})
}

// Exec executes the query.
func (u *SyncStateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SyncStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SyncStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SyncStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
