// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/syncstate"
)

// SyncStateUpdate is the builder for updating SyncState entities.
type SyncStateUpdate struct {
	config
	hooks    []Hook
	mutation *SyncStateMutation
}

// Where appends a list predicates to the SyncStateUpdate builder.
func (ssu *SyncStateUpdate) Where(ps ...predicate.SyncState) *SyncStateUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetContractName sets the "contract_name" field.
func (ssu *SyncStateUpdate) SetContractName(s string) *SyncStateUpdate {
	ssu.mutation.SetContractName(s)
	return ssu
}

// SetNillableContractName sets the "contract_name" field if the given value is not nil.
func (ssu *SyncStateUpdate) SetNillableContractName(s *string) *SyncStateUpdate {
	if s != nil {
		ssu.SetContractName(*s)
	}
	return ssu
}

// ClearContractName clears the value of the "contract_name" field.
func (ssu *SyncStateUpdate) ClearContractName() *SyncStateUpdate {
	ssu.mutation.ClearContractName()
	return ssu
}

// SetStartBlock sets the "start_block" field.
func (ssu *SyncStateUpdate) SetStartBlock(u uint64) *SyncStateUpdate {
	ssu.mutation.ResetStartBlock()
	ssu.mutation.SetStartBlock(u)
	return ssu
}

// SetNillableStartBlock sets the "start_block" field if the given value is not nil.
func (ssu *SyncStateUpdate) SetNillableStartBlock(u *uint64) *SyncStateUpdate {
	if u != nil {
		ssu.SetStartBlock(*u)
	}
	return ssu
}

// AddStartBlock adds u to the "start_block" field.
func (ssu *SyncStateUpdate) AddStartBlock(u int64) *SyncStateUpdate {
	ssu.mutation.AddStartBlock(u)
	return ssu
}

// SetBlockTime sets the "block_time" field.
func (ssu *SyncStateUpdate) SetBlockTime(t time.Time) *SyncStateUpdate {
	ssu.mutation.SetBlockTime(t)
	return ssu
}

// SetNillableBlockTime sets the "block_time" field if the given value is not nil.
func (ssu *SyncStateUpdate) SetNillableBlockTime(t *time.Time) *SyncStateUpdate {
	if t != nil {
		ssu.SetBlockTime(*t)
	}
	return ssu
}

// ClearBlockTime clears the value of the "block_time" field.
func (ssu *SyncStateUpdate) ClearBlockTime() *SyncStateUpdate {
	ssu.mutation.ClearBlockTime()
	return ssu
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (ssu *SyncStateUpdate) SetLastSyncedAt(t time.Time) *SyncStateUpdate {
	ssu.mutation.SetLastSyncedAt(t)
	return ssu
}

// ClearLastSyncedAt clears the value of the "last_synced_at" field.
func (ssu *SyncStateUpdate) ClearLastSyncedAt() *SyncStateUpdate {
	ssu.mutation.ClearLastSyncedAt()
	return ssu
}

// Mutation returns the SyncStateMutation object of the builder.
func (ssu *SyncStateUpdate) Mutation() *SyncStateMutation {
	return ssu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SyncStateUpdate) Save(ctx context.Context) (int, error) {
	ssu.defaults()
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SyncStateUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SyncStateUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SyncStateUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssu *SyncStateUpdate) defaults() {
	if _, ok := ssu.mutation.LastSyncedAt(); !ok && !ssu.mutation.LastSyncedAtCleared() {
		v := syncstate.UpdateDefaultLastSyncedAt()
		ssu.mutation.SetLastSyncedAt(v)
	}
}

func (ssu *SyncStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(syncstate.Table, syncstate.Columns, sqlgraph.NewFieldSpec(syncstate.FieldID, field.TypeString))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.ContractName(); ok {
		_spec.SetField(syncstate.FieldContractName, field.TypeString, value)
	}
	if ssu.mutation.ContractNameCleared() {
		_spec.ClearField(syncstate.FieldContractName, field.TypeString)
	}
	if value, ok := ssu.mutation.StartBlock(); ok {
		_spec.SetField(syncstate.FieldStartBlock, field.TypeUint64, value)
	}
	if value, ok := ssu.mutation.AddedStartBlock(); ok {
		_spec.AddField(syncstate.FieldStartBlock, field.TypeUint64, value)
	}
	if value, ok := ssu.mutation.BlockTime(); ok {
		_spec.SetField(syncstate.FieldBlockTime, field.TypeTime, value)
	}
	if ssu.mutation.BlockTimeCleared() {
		_spec.ClearField(syncstate.FieldBlockTime, field.TypeTime)
	}
	if value, ok := ssu.mutation.LastSyncedAt(); ok {
		_spec.SetField(syncstate.FieldLastSyncedAt, field.TypeTime, value)
	}
	if ssu.mutation.LastSyncedAtCleared() {
		_spec.ClearField(syncstate.FieldLastSyncedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syncstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SyncStateUpdateOne is the builder for updating a single SyncState entity.
type SyncStateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SyncStateMutation
}

// SetContractName sets the "contract_name" field.
func (ssuo *SyncStateUpdateOne) SetContractName(s string) *SyncStateUpdateOne {
	ssuo.mutation.SetContractName(s)
	return ssuo
}

// SetNillableContractName sets the "contract_name" field if the given value is not nil.
func (ssuo *SyncStateUpdateOne) SetNillableContractName(s *string) *SyncStateUpdateOne {
	if s != nil {
		ssuo.SetContractName(*s)
	}
	return ssuo
}

// ClearContractName clears the value of the "contract_name" field.
func (ssuo *SyncStateUpdateOne) ClearContractName() *SyncStateUpdateOne {
	ssuo.mutation.ClearContractName()
	return ssuo
}

// SetStartBlock sets the "start_block" field.
func (ssuo *SyncStateUpdateOne) SetStartBlock(u uint64) *SyncStateUpdateOne {
	ssuo.mutation.ResetStartBlock()
	ssuo.mutation.SetStartBlock(u)
	return ssuo
}

// SetNillableStartBlock sets the "start_block" field if the given value is not nil.
func (ssuo *SyncStateUpdateOne) SetNillableStartBlock(u *uint64) *SyncStateUpdateOne {
	if u != nil {
		ssuo.SetStartBlock(*u)
	}
	return ssuo
}

// AddStartBlock adds u to the "start_block" field.
func (ssuo *SyncStateUpdateOne) AddStartBlock(u int64) *SyncStateUpdateOne {
	ssuo.mutation.AddStartBlock(u)
	return ssuo
}

// SetBlockTime sets the "block_time" field.
func (ssuo *SyncStateUpdateOne) SetBlockTime(t time.Time) *SyncStateUpdateOne {
	ssuo.mutation.SetBlockTime(t)
	return ssuo
}

// SetNillableBlockTime sets the "block_time" field if the given value is not nil.
func (ssuo *SyncStateUpdateOne) SetNillableBlockTime(t *time.Time) *SyncStateUpdateOne {
	if t != nil {
		ssuo.SetBlockTime(*t)
	}
	return ssuo
}

// ClearBlockTime clears the value of the "block_time" field.
func (ssuo *SyncStateUpdateOne) ClearBlockTime() *SyncStateUpdateOne {
	ssuo.mutation.ClearBlockTime()
	return ssuo
}

// SetLastSyncedAt sets the "last_synced_at" field.
func (ssuo *SyncStateUpdateOne) SetLastSyncedAt(t time.Time) *SyncStateUpdateOne {
	ssuo.mutation.SetLastSyncedAt(t)
	return ssuo
}

// ClearLastSyncedAt clears the value of the "last_synced_at" field.
func (ssuo *SyncStateUpdateOne) ClearLastSyncedAt() *SyncStateUpdateOne {
	ssuo.mutation.ClearLastSyncedAt()
	return ssuo
}

// Mutation returns the SyncStateMutation object of the builder.
func (ssuo *SyncStateUpdateOne) Mutation() *SyncStateMutation {
	return ssuo.mutation
}

// Where appends a list predicates to the SyncStateUpdate builder.
func (ssuo *SyncStateUpdateOne) Where(ps ...predicate.SyncState) *SyncStateUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SyncStateUpdateOne) Select(field string, fields ...string) *SyncStateUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SyncState entity.
func (ssuo *SyncStateUpdateOne) Save(ctx context.Context) (*SyncState, error) {
	ssuo.defaults()
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SyncStateUpdateOne) SaveX(ctx context.Context) *SyncState {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SyncStateUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SyncStateUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssuo *SyncStateUpdateOne) defaults() {
	if _, ok := ssuo.mutation.LastSyncedAt(); !ok && !ssuo.mutation.LastSyncedAtCleared() {
		v := syncstate.UpdateDefaultLastSyncedAt()
		ssuo.mutation.SetLastSyncedAt(v)
	}
}

func (ssuo *SyncStateUpdateOne) sqlSave(ctx context.Context) (_node *SyncState, err error) {
	_spec := sqlgraph.NewUpdateSpec(syncstate.Table, syncstate.Columns, sqlgraph.NewFieldSpec(syncstate.FieldID, field.TypeString))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SyncState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, syncstate.FieldID)
		for _, f := range fields {
			if !syncstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != syncstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.ContractName(); ok {
		_spec.SetField(syncstate.FieldContractName, field.TypeString, value)
	}
	if ssuo.mutation.ContractNameCleared() {
		_spec.ClearField(syncstate.FieldContractName, field.TypeString)
	}
	if value, ok := ssuo.mutation.StartBlock(); ok {
		_spec.SetField(syncstate.FieldStartBlock, field.TypeUint64, value)
	}
	if value, ok := ssuo.mutation.AddedStartBlock(); ok {
		_spec.AddField(syncstate.FieldStartBlock, field.TypeUint64, value)
	}
	if value, ok := ssuo.mutation.BlockTime(); ok {
		_spec.SetField(syncstate.FieldBlockTime, field.TypeTime, value)
	}
	if ssuo.mutation.BlockTimeCleared() {
		_spec.ClearField(syncstate.FieldBlockTime, field.TypeTime)
	}
	if value, ok := ssuo.mutation.LastSyncedAt(); ok {
		_spec.SetField(syncstate.FieldLastSyncedAt, field.TypeTime, value)
	}
	if ssuo.mutation.LastSyncedAtCleared() {
		_spec.ClearField(syncstate.FieldLastSyncedAt, field.TypeTime)
	}
	_node = &SyncState{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syncstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
