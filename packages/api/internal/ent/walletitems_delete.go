// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/walletitems"
)

// WalletItemsDelete is the builder for deleting a WalletItems entity.
type WalletItemsDelete struct {
	config
	hooks    []Hook
	mutation *WalletItemsMutation
}

// Where appends a list predicates to the WalletItemsDelete builder.
func (wid *WalletItemsDelete) Where(ps ...predicate.WalletItems) *WalletItemsDelete {
	wid.mutation.Where(ps...)
	return wid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wid *WalletItemsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, WalletItemsMutation](ctx, wid.sqlExec, wid.mutation, wid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wid *WalletItemsDelete) ExecX(ctx context.Context) int {
	n, err := wid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wid *WalletItemsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(walletitems.Table, sqlgraph.NewFieldSpec(walletitems.FieldID, field.TypeString))
	if ps := wid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wid.mutation.done = true
	return affected, err
}

// WalletItemsDeleteOne is the builder for deleting a single WalletItems entity.
type WalletItemsDeleteOne struct {
	wid *WalletItemsDelete
}

// Where appends a list predicates to the WalletItemsDelete builder.
func (wido *WalletItemsDeleteOne) Where(ps ...predicate.WalletItems) *WalletItemsDeleteOne {
	wido.wid.mutation.Where(ps...)
	return wido
}

// Exec executes the deletion query.
func (wido *WalletItemsDeleteOne) Exec(ctx context.Context) error {
	n, err := wido.wid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{walletitems.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wido *WalletItemsDeleteOne) ExecX(ctx context.Context) {
	if err := wido.Exec(ctx); err != nil {
		panic(err)
	}
}
