// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/search"
)

// SearchCreate is the builder for creating a Search entity.
type SearchCreate struct {
	config
	mutation *SearchMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (sc *SearchCreate) SetType(s search.Type) *SearchCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetGreatness sets the "greatness" field.
func (sc *SearchCreate) SetGreatness(i int) *SearchCreate {
	sc.mutation.SetGreatness(i)
	return sc
}

// SetNillableGreatness sets the "greatness" field if the given value is not nil.
func (sc *SearchCreate) SetNillableGreatness(i *int) *SearchCreate {
	if i != nil {
		sc.SetGreatness(*i)
	}
	return sc
}

// SetClaimed sets the "claimed" field.
func (sc *SearchCreate) SetClaimed(b bool) *SearchCreate {
	sc.mutation.SetClaimed(b)
	return sc
}

// SetOpened sets the "opened" field.
func (sc *SearchCreate) SetOpened(b bool) *SearchCreate {
	sc.mutation.SetOpened(b)
	return sc
}

// SetBanned sets the "banned" field.
func (sc *SearchCreate) SetBanned(b bool) *SearchCreate {
	sc.mutation.SetBanned(b)
	return sc
}

// SetSalePrice sets the "sale_price" field.
func (sc *SearchCreate) SetSalePrice(f float64) *SearchCreate {
	sc.mutation.SetSalePrice(f)
	return sc
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (sc *SearchCreate) SetNillableSalePrice(f *float64) *SearchCreate {
	if f != nil {
		sc.SetSalePrice(*f)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SearchCreate) SetID(s string) *SearchCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetDopeID sets the "dope" edge to the Dope entity by ID.
func (sc *SearchCreate) SetDopeID(id string) *SearchCreate {
	sc.mutation.SetDopeID(id)
	return sc
}

// SetNillableDopeID sets the "dope" edge to the Dope entity by ID if the given value is not nil.
func (sc *SearchCreate) SetNillableDopeID(id *string) *SearchCreate {
	if id != nil {
		sc = sc.SetDopeID(*id)
	}
	return sc
}

// SetDope sets the "dope" edge to the Dope entity.
func (sc *SearchCreate) SetDope(d *Dope) *SearchCreate {
	return sc.SetDopeID(d.ID)
}

// SetItemID sets the "item" edge to the Item entity by ID.
func (sc *SearchCreate) SetItemID(id string) *SearchCreate {
	sc.mutation.SetItemID(id)
	return sc
}

// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
func (sc *SearchCreate) SetNillableItemID(id *string) *SearchCreate {
	if id != nil {
		sc = sc.SetItemID(*id)
	}
	return sc
}

// SetItem sets the "item" edge to the Item entity.
func (sc *SearchCreate) SetItem(i *Item) *SearchCreate {
	return sc.SetItemID(i.ID)
}

// SetHustlerID sets the "hustler" edge to the Hustler entity by ID.
func (sc *SearchCreate) SetHustlerID(id string) *SearchCreate {
	sc.mutation.SetHustlerID(id)
	return sc
}

// SetNillableHustlerID sets the "hustler" edge to the Hustler entity by ID if the given value is not nil.
func (sc *SearchCreate) SetNillableHustlerID(id *string) *SearchCreate {
	if id != nil {
		sc = sc.SetHustlerID(*id)
	}
	return sc
}

// SetHustler sets the "hustler" edge to the Hustler entity.
func (sc *SearchCreate) SetHustler(h *Hustler) *SearchCreate {
	return sc.SetHustlerID(h.ID)
}

// Mutation returns the SearchMutation object of the builder.
func (sc *SearchCreate) Mutation() *SearchMutation {
	return sc.mutation
}

// Save creates the Search in the database.
func (sc *SearchCreate) Save(ctx context.Context) (*Search, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SearchCreate) SaveX(ctx context.Context) *Search {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SearchCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SearchCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SearchCreate) check() error {
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Search.type"`)}
	}
	if v, ok := sc.mutation.GetType(); ok {
		if err := search.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Search.type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Claimed(); !ok {
		return &ValidationError{Name: "claimed", err: errors.New(`ent: missing required field "Search.claimed"`)}
	}
	if _, ok := sc.mutation.Opened(); !ok {
		return &ValidationError{Name: "opened", err: errors.New(`ent: missing required field "Search.opened"`)}
	}
	if _, ok := sc.mutation.Banned(); !ok {
		return &ValidationError{Name: "banned", err: errors.New(`ent: missing required field "Search.banned"`)}
	}
	return nil
}

func (sc *SearchCreate) sqlSave(ctx context.Context) (*Search, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Search.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SearchCreate) createSpec() (*Search, *sqlgraph.CreateSpec) {
	var (
		_node = &Search{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(search.Table, sqlgraph.NewFieldSpec(search.FieldID, field.TypeString))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(search.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.Greatness(); ok {
		_spec.SetField(search.FieldGreatness, field.TypeInt, value)
		_node.Greatness = value
	}
	if value, ok := sc.mutation.Claimed(); ok {
		_spec.SetField(search.FieldClaimed, field.TypeBool, value)
		_node.Claimed = value
	}
	if value, ok := sc.mutation.Opened(); ok {
		_spec.SetField(search.FieldOpened, field.TypeBool, value)
		_node.Opened = value
	}
	if value, ok := sc.mutation.Banned(); ok {
		_spec.SetField(search.FieldBanned, field.TypeBool, value)
		_node.Banned = value
	}
	if value, ok := sc.mutation.SalePrice(); ok {
		_spec.SetField(search.FieldSalePrice, field.TypeFloat64, value)
		_node.SalePrice = value
	}
	if nodes := sc.mutation.DopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   search.DopeTable,
			Columns: []string{search.DopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.dope_index = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   search.ItemTable,
			Columns: []string{search.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.item_index = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.HustlerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   search.HustlerTable,
			Columns: []string{search.HustlerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hustler.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hustler_index = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Search.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SearchUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (sc *SearchCreate) OnConflict(opts ...sql.ConflictOption) *SearchUpsertOne {
	sc.conflict = opts
	return &SearchUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Search.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SearchCreate) OnConflictColumns(columns ...string) *SearchUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SearchUpsertOne{
		create: sc,
	}
}

type (
	// SearchUpsertOne is the builder for "upsert"-ing
	//  one Search node.
	SearchUpsertOne struct {
		create *SearchCreate
	}

	// SearchUpsert is the "OnConflict" setter.
	SearchUpsert struct {
		*sql.UpdateSet
	}
)

// SetGreatness sets the "greatness" field.
func (u *SearchUpsert) SetGreatness(v int) *SearchUpsert {
	u.Set(search.FieldGreatness, v)
	return u
}

// UpdateGreatness sets the "greatness" field to the value that was provided on create.
func (u *SearchUpsert) UpdateGreatness() *SearchUpsert {
	u.SetExcluded(search.FieldGreatness)
	return u
}

// AddGreatness adds v to the "greatness" field.
func (u *SearchUpsert) AddGreatness(v int) *SearchUpsert {
	u.Add(search.FieldGreatness, v)
	return u
}

// ClearGreatness clears the value of the "greatness" field.
func (u *SearchUpsert) ClearGreatness() *SearchUpsert {
	u.SetNull(search.FieldGreatness)
	return u
}

// SetClaimed sets the "claimed" field.
func (u *SearchUpsert) SetClaimed(v bool) *SearchUpsert {
	u.Set(search.FieldClaimed, v)
	return u
}

// UpdateClaimed sets the "claimed" field to the value that was provided on create.
func (u *SearchUpsert) UpdateClaimed() *SearchUpsert {
	u.SetExcluded(search.FieldClaimed)
	return u
}

// SetOpened sets the "opened" field.
func (u *SearchUpsert) SetOpened(v bool) *SearchUpsert {
	u.Set(search.FieldOpened, v)
	return u
}

// UpdateOpened sets the "opened" field to the value that was provided on create.
func (u *SearchUpsert) UpdateOpened() *SearchUpsert {
	u.SetExcluded(search.FieldOpened)
	return u
}

// SetBanned sets the "banned" field.
func (u *SearchUpsert) SetBanned(v bool) *SearchUpsert {
	u.Set(search.FieldBanned, v)
	return u
}

// UpdateBanned sets the "banned" field to the value that was provided on create.
func (u *SearchUpsert) UpdateBanned() *SearchUpsert {
	u.SetExcluded(search.FieldBanned)
	return u
}

// SetSalePrice sets the "sale_price" field.
func (u *SearchUpsert) SetSalePrice(v float64) *SearchUpsert {
	u.Set(search.FieldSalePrice, v)
	return u
}

// UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
func (u *SearchUpsert) UpdateSalePrice() *SearchUpsert {
	u.SetExcluded(search.FieldSalePrice)
	return u
}

// AddSalePrice adds v to the "sale_price" field.
func (u *SearchUpsert) AddSalePrice(v float64) *SearchUpsert {
	u.Add(search.FieldSalePrice, v)
	return u
}

// ClearSalePrice clears the value of the "sale_price" field.
func (u *SearchUpsert) ClearSalePrice() *SearchUpsert {
	u.SetNull(search.FieldSalePrice)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Search.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(search.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SearchUpsertOne) UpdateNewValues() *SearchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(search.FieldID)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(search.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Search.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SearchUpsertOne) Ignore() *SearchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SearchUpsertOne) DoNothing() *SearchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SearchCreate.OnConflict
// documentation for more info.
func (u *SearchUpsertOne) Update(set func(*SearchUpsert)) *SearchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SearchUpsert{UpdateSet: update})
	}))
	return u
}

// SetGreatness sets the "greatness" field.
func (u *SearchUpsertOne) SetGreatness(v int) *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.SetGreatness(v)
	})
}

// AddGreatness adds v to the "greatness" field.
func (u *SearchUpsertOne) AddGreatness(v int) *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.AddGreatness(v)
	})
}

// UpdateGreatness sets the "greatness" field to the value that was provided on create.
func (u *SearchUpsertOne) UpdateGreatness() *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.UpdateGreatness()
	})
}

// ClearGreatness clears the value of the "greatness" field.
func (u *SearchUpsertOne) ClearGreatness() *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.ClearGreatness()
	})
}

// SetClaimed sets the "claimed" field.
func (u *SearchUpsertOne) SetClaimed(v bool) *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.SetClaimed(v)
	})
}

// UpdateClaimed sets the "claimed" field to the value that was provided on create.
func (u *SearchUpsertOne) UpdateClaimed() *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.UpdateClaimed()
	})
}

// SetOpened sets the "opened" field.
func (u *SearchUpsertOne) SetOpened(v bool) *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.SetOpened(v)
	})
}

// UpdateOpened sets the "opened" field to the value that was provided on create.
func (u *SearchUpsertOne) UpdateOpened() *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.UpdateOpened()
	})
}

// SetBanned sets the "banned" field.
func (u *SearchUpsertOne) SetBanned(v bool) *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.SetBanned(v)
	})
}

// UpdateBanned sets the "banned" field to the value that was provided on create.
func (u *SearchUpsertOne) UpdateBanned() *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.UpdateBanned()
	})
}

// SetSalePrice sets the "sale_price" field.
func (u *SearchUpsertOne) SetSalePrice(v float64) *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.SetSalePrice(v)
	})
}

// AddSalePrice adds v to the "sale_price" field.
func (u *SearchUpsertOne) AddSalePrice(v float64) *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.AddSalePrice(v)
	})
}

// UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
func (u *SearchUpsertOne) UpdateSalePrice() *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.UpdateSalePrice()
	})
}

// ClearSalePrice clears the value of the "sale_price" field.
func (u *SearchUpsertOne) ClearSalePrice() *SearchUpsertOne {
	return u.Update(func(s *SearchUpsert) {
		s.ClearSalePrice()
	})
}

// Exec executes the query.
func (u *SearchUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SearchCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SearchUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SearchUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SearchUpsertOne.ID is not supported by MySQL driver. Use SearchUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SearchUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SearchCreateBulk is the builder for creating many Search entities in bulk.
type SearchCreateBulk struct {
	config
	err      error
	builders []*SearchCreate
	conflict []sql.ConflictOption
}

// Save creates the Search entities in the database.
func (scb *SearchCreateBulk) Save(ctx context.Context) ([]*Search, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Search, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SearchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SearchCreateBulk) SaveX(ctx context.Context) []*Search {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SearchCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SearchCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Search.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SearchUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (scb *SearchCreateBulk) OnConflict(opts ...sql.ConflictOption) *SearchUpsertBulk {
	scb.conflict = opts
	return &SearchUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Search.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SearchCreateBulk) OnConflictColumns(columns ...string) *SearchUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SearchUpsertBulk{
		create: scb,
	}
}

// SearchUpsertBulk is the builder for "upsert"-ing
// a bulk of Search nodes.
type SearchUpsertBulk struct {
	create *SearchCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Search.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(search.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SearchUpsertBulk) UpdateNewValues() *SearchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(search.FieldID)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(search.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Search.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SearchUpsertBulk) Ignore() *SearchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SearchUpsertBulk) DoNothing() *SearchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SearchCreateBulk.OnConflict
// documentation for more info.
func (u *SearchUpsertBulk) Update(set func(*SearchUpsert)) *SearchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SearchUpsert{UpdateSet: update})
	}))
	return u
}

// SetGreatness sets the "greatness" field.
func (u *SearchUpsertBulk) SetGreatness(v int) *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.SetGreatness(v)
	})
}

// AddGreatness adds v to the "greatness" field.
func (u *SearchUpsertBulk) AddGreatness(v int) *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.AddGreatness(v)
	})
}

// UpdateGreatness sets the "greatness" field to the value that was provided on create.
func (u *SearchUpsertBulk) UpdateGreatness() *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.UpdateGreatness()
	})
}

// ClearGreatness clears the value of the "greatness" field.
func (u *SearchUpsertBulk) ClearGreatness() *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.ClearGreatness()
	})
}

// SetClaimed sets the "claimed" field.
func (u *SearchUpsertBulk) SetClaimed(v bool) *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.SetClaimed(v)
	})
}

// UpdateClaimed sets the "claimed" field to the value that was provided on create.
func (u *SearchUpsertBulk) UpdateClaimed() *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.UpdateClaimed()
	})
}

// SetOpened sets the "opened" field.
func (u *SearchUpsertBulk) SetOpened(v bool) *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.SetOpened(v)
	})
}

// UpdateOpened sets the "opened" field to the value that was provided on create.
func (u *SearchUpsertBulk) UpdateOpened() *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.UpdateOpened()
	})
}

// SetBanned sets the "banned" field.
func (u *SearchUpsertBulk) SetBanned(v bool) *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.SetBanned(v)
	})
}

// UpdateBanned sets the "banned" field to the value that was provided on create.
func (u *SearchUpsertBulk) UpdateBanned() *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.UpdateBanned()
	})
}

// SetSalePrice sets the "sale_price" field.
func (u *SearchUpsertBulk) SetSalePrice(v float64) *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.SetSalePrice(v)
	})
}

// AddSalePrice adds v to the "sale_price" field.
func (u *SearchUpsertBulk) AddSalePrice(v float64) *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.AddSalePrice(v)
	})
}

// UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
func (u *SearchUpsertBulk) UpdateSalePrice() *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.UpdateSalePrice()
	})
}

// ClearSalePrice clears the value of the "sale_price" field.
func (u *SearchUpsertBulk) ClearSalePrice() *SearchUpsertBulk {
	return u.Update(func(s *SearchUpsert) {
		s.ClearSalePrice()
	})
}

// Exec executes the query.
func (u *SearchUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SearchCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SearchCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SearchUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
