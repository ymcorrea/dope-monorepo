// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/bodypart"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/search"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/wallet"
)

// HustlerQuery is the builder for querying Hustler entities.
type HustlerQuery struct {
	config
	ctx           *QueryContext
	order         []OrderFunc
	inters        []Interceptor
	predicates    []predicate.Hustler
	withWallet    *WalletQuery
	withWeapon    *ItemQuery
	withClothes   *ItemQuery
	withVehicle   *ItemQuery
	withWaist     *ItemQuery
	withFoot      *ItemQuery
	withHand      *ItemQuery
	withDrug      *ItemQuery
	withNeck      *ItemQuery
	withRing      *ItemQuery
	withAccessory *ItemQuery
	withBody      *BodyPartQuery
	withHair      *BodyPartQuery
	withBeard     *BodyPartQuery
	withIndex     *SearchQuery
	withFKs       bool
	modifiers     []func(*sql.Selector)
	loadTotal     []func(context.Context, []*Hustler) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HustlerQuery builder.
func (hq *HustlerQuery) Where(ps ...predicate.Hustler) *HustlerQuery {
	hq.predicates = append(hq.predicates, ps...)
	return hq
}

// Limit the number of records to be returned by this query.
func (hq *HustlerQuery) Limit(limit int) *HustlerQuery {
	hq.ctx.Limit = &limit
	return hq
}

// Offset to start from.
func (hq *HustlerQuery) Offset(offset int) *HustlerQuery {
	hq.ctx.Offset = &offset
	return hq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hq *HustlerQuery) Unique(unique bool) *HustlerQuery {
	hq.ctx.Unique = &unique
	return hq
}

// Order specifies how the records should be ordered.
func (hq *HustlerQuery) Order(o ...OrderFunc) *HustlerQuery {
	hq.order = append(hq.order, o...)
	return hq
}

// QueryWallet chains the current query on the "wallet" edge.
func (hq *HustlerQuery) QueryWallet() *WalletQuery {
	query := (&WalletClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(wallet.Table, wallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.WalletTable, hustler.WalletColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWeapon chains the current query on the "weapon" edge.
func (hq *HustlerQuery) QueryWeapon() *ItemQuery {
	query := (&ItemClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.WeaponTable, hustler.WeaponColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClothes chains the current query on the "clothes" edge.
func (hq *HustlerQuery) QueryClothes() *ItemQuery {
	query := (&ItemClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.ClothesTable, hustler.ClothesColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVehicle chains the current query on the "vehicle" edge.
func (hq *HustlerQuery) QueryVehicle() *ItemQuery {
	query := (&ItemClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.VehicleTable, hustler.VehicleColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWaist chains the current query on the "waist" edge.
func (hq *HustlerQuery) QueryWaist() *ItemQuery {
	query := (&ItemClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.WaistTable, hustler.WaistColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFoot chains the current query on the "foot" edge.
func (hq *HustlerQuery) QueryFoot() *ItemQuery {
	query := (&ItemClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.FootTable, hustler.FootColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHand chains the current query on the "hand" edge.
func (hq *HustlerQuery) QueryHand() *ItemQuery {
	query := (&ItemClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.HandTable, hustler.HandColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDrug chains the current query on the "drug" edge.
func (hq *HustlerQuery) QueryDrug() *ItemQuery {
	query := (&ItemClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.DrugTable, hustler.DrugColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNeck chains the current query on the "neck" edge.
func (hq *HustlerQuery) QueryNeck() *ItemQuery {
	query := (&ItemClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.NeckTable, hustler.NeckColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRing chains the current query on the "ring" edge.
func (hq *HustlerQuery) QueryRing() *ItemQuery {
	query := (&ItemClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.RingTable, hustler.RingColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccessory chains the current query on the "accessory" edge.
func (hq *HustlerQuery) QueryAccessory() *ItemQuery {
	query := (&ItemClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.AccessoryTable, hustler.AccessoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBody chains the current query on the "body" edge.
func (hq *HustlerQuery) QueryBody() *BodyPartQuery {
	query := (&BodyPartClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(bodypart.Table, bodypart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.BodyTable, hustler.BodyColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHair chains the current query on the "hair" edge.
func (hq *HustlerQuery) QueryHair() *BodyPartQuery {
	query := (&BodyPartClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(bodypart.Table, bodypart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.HairTable, hustler.HairColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBeard chains the current query on the "beard" edge.
func (hq *HustlerQuery) QueryBeard() *BodyPartQuery {
	query := (&BodyPartClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(bodypart.Table, bodypart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hustler.BeardTable, hustler.BeardColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIndex chains the current query on the "index" edge.
func (hq *HustlerQuery) QueryIndex() *SearchQuery {
	query := (&SearchClient{config: hq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hustler.Table, hustler.FieldID, selector),
			sqlgraph.To(search.Table, search.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, hustler.IndexTable, hustler.IndexColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Hustler entity from the query.
// Returns a *NotFoundError when no Hustler was found.
func (hq *HustlerQuery) First(ctx context.Context) (*Hustler, error) {
	nodes, err := hq.Limit(1).All(setContextOp(ctx, hq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hustler.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hq *HustlerQuery) FirstX(ctx context.Context) *Hustler {
	node, err := hq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Hustler ID from the query.
// Returns a *NotFoundError when no Hustler ID was found.
func (hq *HustlerQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = hq.Limit(1).IDs(setContextOp(ctx, hq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hustler.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hq *HustlerQuery) FirstIDX(ctx context.Context) string {
	id, err := hq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Hustler entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Hustler entity is found.
// Returns a *NotFoundError when no Hustler entities are found.
func (hq *HustlerQuery) Only(ctx context.Context) (*Hustler, error) {
	nodes, err := hq.Limit(2).All(setContextOp(ctx, hq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hustler.Label}
	default:
		return nil, &NotSingularError{hustler.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hq *HustlerQuery) OnlyX(ctx context.Context) *Hustler {
	node, err := hq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Hustler ID in the query.
// Returns a *NotSingularError when more than one Hustler ID is found.
// Returns a *NotFoundError when no entities are found.
func (hq *HustlerQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = hq.Limit(2).IDs(setContextOp(ctx, hq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hustler.Label}
	default:
		err = &NotSingularError{hustler.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hq *HustlerQuery) OnlyIDX(ctx context.Context) string {
	id, err := hq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Hustlers.
func (hq *HustlerQuery) All(ctx context.Context) ([]*Hustler, error) {
	ctx = setContextOp(ctx, hq.ctx, "All")
	if err := hq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Hustler, *HustlerQuery]()
	return withInterceptors[[]*Hustler](ctx, hq, qr, hq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hq *HustlerQuery) AllX(ctx context.Context) []*Hustler {
	nodes, err := hq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Hustler IDs.
func (hq *HustlerQuery) IDs(ctx context.Context) (ids []string, err error) {
	if hq.ctx.Unique == nil && hq.path != nil {
		hq.Unique(true)
	}
	ctx = setContextOp(ctx, hq.ctx, "IDs")
	if err = hq.Select(hustler.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hq *HustlerQuery) IDsX(ctx context.Context) []string {
	ids, err := hq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hq *HustlerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hq.ctx, "Count")
	if err := hq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hq, querierCount[*HustlerQuery](), hq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hq *HustlerQuery) CountX(ctx context.Context) int {
	count, err := hq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hq *HustlerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hq.ctx, "Exist")
	switch _, err := hq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hq *HustlerQuery) ExistX(ctx context.Context) bool {
	exist, err := hq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HustlerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hq *HustlerQuery) Clone() *HustlerQuery {
	if hq == nil {
		return nil
	}
	return &HustlerQuery{
		config:        hq.config,
		ctx:           hq.ctx.Clone(),
		order:         append([]OrderFunc{}, hq.order...),
		inters:        append([]Interceptor{}, hq.inters...),
		predicates:    append([]predicate.Hustler{}, hq.predicates...),
		withWallet:    hq.withWallet.Clone(),
		withWeapon:    hq.withWeapon.Clone(),
		withClothes:   hq.withClothes.Clone(),
		withVehicle:   hq.withVehicle.Clone(),
		withWaist:     hq.withWaist.Clone(),
		withFoot:      hq.withFoot.Clone(),
		withHand:      hq.withHand.Clone(),
		withDrug:      hq.withDrug.Clone(),
		withNeck:      hq.withNeck.Clone(),
		withRing:      hq.withRing.Clone(),
		withAccessory: hq.withAccessory.Clone(),
		withBody:      hq.withBody.Clone(),
		withHair:      hq.withHair.Clone(),
		withBeard:     hq.withBeard.Clone(),
		withIndex:     hq.withIndex.Clone(),
		// clone intermediate query.
		sql:  hq.sql.Clone(),
		path: hq.path,
	}
}

// WithWallet tells the query-builder to eager-load the nodes that are connected to
// the "wallet" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithWallet(opts ...func(*WalletQuery)) *HustlerQuery {
	query := (&WalletClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withWallet = query
	return hq
}

// WithWeapon tells the query-builder to eager-load the nodes that are connected to
// the "weapon" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithWeapon(opts ...func(*ItemQuery)) *HustlerQuery {
	query := (&ItemClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withWeapon = query
	return hq
}

// WithClothes tells the query-builder to eager-load the nodes that are connected to
// the "clothes" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithClothes(opts ...func(*ItemQuery)) *HustlerQuery {
	query := (&ItemClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withClothes = query
	return hq
}

// WithVehicle tells the query-builder to eager-load the nodes that are connected to
// the "vehicle" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithVehicle(opts ...func(*ItemQuery)) *HustlerQuery {
	query := (&ItemClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withVehicle = query
	return hq
}

// WithWaist tells the query-builder to eager-load the nodes that are connected to
// the "waist" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithWaist(opts ...func(*ItemQuery)) *HustlerQuery {
	query := (&ItemClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withWaist = query
	return hq
}

// WithFoot tells the query-builder to eager-load the nodes that are connected to
// the "foot" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithFoot(opts ...func(*ItemQuery)) *HustlerQuery {
	query := (&ItemClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withFoot = query
	return hq
}

// WithHand tells the query-builder to eager-load the nodes that are connected to
// the "hand" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithHand(opts ...func(*ItemQuery)) *HustlerQuery {
	query := (&ItemClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withHand = query
	return hq
}

// WithDrug tells the query-builder to eager-load the nodes that are connected to
// the "drug" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithDrug(opts ...func(*ItemQuery)) *HustlerQuery {
	query := (&ItemClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withDrug = query
	return hq
}

// WithNeck tells the query-builder to eager-load the nodes that are connected to
// the "neck" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithNeck(opts ...func(*ItemQuery)) *HustlerQuery {
	query := (&ItemClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withNeck = query
	return hq
}

// WithRing tells the query-builder to eager-load the nodes that are connected to
// the "ring" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithRing(opts ...func(*ItemQuery)) *HustlerQuery {
	query := (&ItemClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withRing = query
	return hq
}

// WithAccessory tells the query-builder to eager-load the nodes that are connected to
// the "accessory" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithAccessory(opts ...func(*ItemQuery)) *HustlerQuery {
	query := (&ItemClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withAccessory = query
	return hq
}

// WithBody tells the query-builder to eager-load the nodes that are connected to
// the "body" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithBody(opts ...func(*BodyPartQuery)) *HustlerQuery {
	query := (&BodyPartClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withBody = query
	return hq
}

// WithHair tells the query-builder to eager-load the nodes that are connected to
// the "hair" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithHair(opts ...func(*BodyPartQuery)) *HustlerQuery {
	query := (&BodyPartClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withHair = query
	return hq
}

// WithBeard tells the query-builder to eager-load the nodes that are connected to
// the "beard" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithBeard(opts ...func(*BodyPartQuery)) *HustlerQuery {
	query := (&BodyPartClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withBeard = query
	return hq
}

// WithIndex tells the query-builder to eager-load the nodes that are connected to
// the "index" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HustlerQuery) WithIndex(opts ...func(*SearchQuery)) *HustlerQuery {
	query := (&SearchClient{config: hq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hq.withIndex = query
	return hq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type hustler.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Hustler.Query().
//		GroupBy(hustler.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hq *HustlerQuery) GroupBy(field string, fields ...string) *HustlerGroupBy {
	hq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HustlerGroupBy{build: hq}
	grbuild.flds = &hq.ctx.Fields
	grbuild.label = hustler.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type hustler.Type `json:"type,omitempty"`
//	}
//
//	client.Hustler.Query().
//		Select(hustler.FieldType).
//		Scan(ctx, &v)
func (hq *HustlerQuery) Select(fields ...string) *HustlerSelect {
	hq.ctx.Fields = append(hq.ctx.Fields, fields...)
	sbuild := &HustlerSelect{HustlerQuery: hq}
	sbuild.label = hustler.Label
	sbuild.flds, sbuild.scan = &hq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HustlerSelect configured with the given aggregations.
func (hq *HustlerQuery) Aggregate(fns ...AggregateFunc) *HustlerSelect {
	return hq.Select().Aggregate(fns...)
}

func (hq *HustlerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hq); err != nil {
				return err
			}
		}
	}
	for _, f := range hq.ctx.Fields {
		if !hustler.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hq.path != nil {
		prev, err := hq.path(ctx)
		if err != nil {
			return err
		}
		hq.sql = prev
	}
	return nil
}

func (hq *HustlerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Hustler, error) {
	var (
		nodes       = []*Hustler{}
		withFKs     = hq.withFKs
		_spec       = hq.querySpec()
		loadedTypes = [15]bool{
			hq.withWallet != nil,
			hq.withWeapon != nil,
			hq.withClothes != nil,
			hq.withVehicle != nil,
			hq.withWaist != nil,
			hq.withFoot != nil,
			hq.withHand != nil,
			hq.withDrug != nil,
			hq.withNeck != nil,
			hq.withRing != nil,
			hq.withAccessory != nil,
			hq.withBody != nil,
			hq.withHair != nil,
			hq.withBeard != nil,
			hq.withIndex != nil,
		}
	)
	if hq.withWallet != nil || hq.withWeapon != nil || hq.withClothes != nil || hq.withVehicle != nil || hq.withWaist != nil || hq.withFoot != nil || hq.withHand != nil || hq.withDrug != nil || hq.withNeck != nil || hq.withRing != nil || hq.withAccessory != nil || hq.withBody != nil || hq.withHair != nil || hq.withBeard != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hustler.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Hustler).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Hustler{config: hq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hq.modifiers) > 0 {
		_spec.Modifiers = hq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hq.withWallet; query != nil {
		if err := hq.loadWallet(ctx, query, nodes, nil,
			func(n *Hustler, e *Wallet) { n.Edges.Wallet = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withWeapon; query != nil {
		if err := hq.loadWeapon(ctx, query, nodes, nil,
			func(n *Hustler, e *Item) { n.Edges.Weapon = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withClothes; query != nil {
		if err := hq.loadClothes(ctx, query, nodes, nil,
			func(n *Hustler, e *Item) { n.Edges.Clothes = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withVehicle; query != nil {
		if err := hq.loadVehicle(ctx, query, nodes, nil,
			func(n *Hustler, e *Item) { n.Edges.Vehicle = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withWaist; query != nil {
		if err := hq.loadWaist(ctx, query, nodes, nil,
			func(n *Hustler, e *Item) { n.Edges.Waist = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withFoot; query != nil {
		if err := hq.loadFoot(ctx, query, nodes, nil,
			func(n *Hustler, e *Item) { n.Edges.Foot = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withHand; query != nil {
		if err := hq.loadHand(ctx, query, nodes, nil,
			func(n *Hustler, e *Item) { n.Edges.Hand = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withDrug; query != nil {
		if err := hq.loadDrug(ctx, query, nodes, nil,
			func(n *Hustler, e *Item) { n.Edges.Drug = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withNeck; query != nil {
		if err := hq.loadNeck(ctx, query, nodes, nil,
			func(n *Hustler, e *Item) { n.Edges.Neck = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withRing; query != nil {
		if err := hq.loadRing(ctx, query, nodes, nil,
			func(n *Hustler, e *Item) { n.Edges.Ring = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withAccessory; query != nil {
		if err := hq.loadAccessory(ctx, query, nodes, nil,
			func(n *Hustler, e *Item) { n.Edges.Accessory = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withBody; query != nil {
		if err := hq.loadBody(ctx, query, nodes, nil,
			func(n *Hustler, e *BodyPart) { n.Edges.Body = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withHair; query != nil {
		if err := hq.loadHair(ctx, query, nodes, nil,
			func(n *Hustler, e *BodyPart) { n.Edges.Hair = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withBeard; query != nil {
		if err := hq.loadBeard(ctx, query, nodes, nil,
			func(n *Hustler, e *BodyPart) { n.Edges.Beard = e }); err != nil {
			return nil, err
		}
	}
	if query := hq.withIndex; query != nil {
		if err := hq.loadIndex(ctx, query, nodes, nil,
			func(n *Hustler, e *Search) { n.Edges.Index = e }); err != nil {
			return nil, err
		}
	}
	for i := range hq.loadTotal {
		if err := hq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hq *HustlerQuery) loadWallet(ctx context.Context, query *WalletQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Wallet)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].wallet_hustlers == nil {
			continue
		}
		fk := *nodes[i].wallet_hustlers
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(wallet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "wallet_hustlers" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadWeapon(ctx context.Context, query *ItemQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].item_hustler_weapons == nil {
			continue
		}
		fk := *nodes[i].item_hustler_weapons
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_weapons" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadClothes(ctx context.Context, query *ItemQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].item_hustler_clothes == nil {
			continue
		}
		fk := *nodes[i].item_hustler_clothes
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_clothes" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadVehicle(ctx context.Context, query *ItemQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].item_hustler_vehicles == nil {
			continue
		}
		fk := *nodes[i].item_hustler_vehicles
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_vehicles" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadWaist(ctx context.Context, query *ItemQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].item_hustler_waists == nil {
			continue
		}
		fk := *nodes[i].item_hustler_waists
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_waists" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadFoot(ctx context.Context, query *ItemQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].item_hustler_feet == nil {
			continue
		}
		fk := *nodes[i].item_hustler_feet
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_feet" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadHand(ctx context.Context, query *ItemQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].item_hustler_hands == nil {
			continue
		}
		fk := *nodes[i].item_hustler_hands
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_hands" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadDrug(ctx context.Context, query *ItemQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].item_hustler_drugs == nil {
			continue
		}
		fk := *nodes[i].item_hustler_drugs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_drugs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadNeck(ctx context.Context, query *ItemQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].item_hustler_necks == nil {
			continue
		}
		fk := *nodes[i].item_hustler_necks
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_necks" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadRing(ctx context.Context, query *ItemQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].item_hustler_rings == nil {
			continue
		}
		fk := *nodes[i].item_hustler_rings
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_rings" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadAccessory(ctx context.Context, query *ItemQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].item_hustler_accessories == nil {
			continue
		}
		fk := *nodes[i].item_hustler_accessories
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_accessories" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadBody(ctx context.Context, query *BodyPartQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *BodyPart)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].body_part_hustler_bodies == nil {
			continue
		}
		fk := *nodes[i].body_part_hustler_bodies
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(bodypart.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "body_part_hustler_bodies" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadHair(ctx context.Context, query *BodyPartQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *BodyPart)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].body_part_hustler_hairs == nil {
			continue
		}
		fk := *nodes[i].body_part_hustler_hairs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(bodypart.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "body_part_hustler_hairs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadBeard(ctx context.Context, query *BodyPartQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *BodyPart)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Hustler)
	for i := range nodes {
		if nodes[i].body_part_hustler_beards == nil {
			continue
		}
		fk := *nodes[i].body_part_hustler_beards
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(bodypart.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "body_part_hustler_beards" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hq *HustlerQuery) loadIndex(ctx context.Context, query *SearchQuery, nodes []*Hustler, init func(*Hustler), assign func(*Hustler, *Search)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Hustler)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Search(func(s *sql.Selector) {
		s.Where(sql.InValues(hustler.IndexColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hustler_index
		if fk == nil {
			return fmt.Errorf(`foreign-key "hustler_index" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hustler_index" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (hq *HustlerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hq.querySpec()
	if len(hq.modifiers) > 0 {
		_spec.Modifiers = hq.modifiers
	}
	_spec.Node.Columns = hq.ctx.Fields
	if len(hq.ctx.Fields) > 0 {
		_spec.Unique = hq.ctx.Unique != nil && *hq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hq.driver, _spec)
}

func (hq *HustlerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hustler.Table, hustler.Columns, sqlgraph.NewFieldSpec(hustler.FieldID, field.TypeString))
	_spec.From = hq.sql
	if unique := hq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hq.path != nil {
		_spec.Unique = true
	}
	if fields := hq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hustler.FieldID)
		for i := range fields {
			if fields[i] != hustler.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hq *HustlerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hq.driver.Dialect())
	t1 := builder.Table(hustler.Table)
	columns := hq.ctx.Fields
	if len(columns) == 0 {
		columns = hustler.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hq.sql != nil {
		selector = hq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hq.ctx.Unique != nil && *hq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hq.predicates {
		p(selector)
	}
	for _, p := range hq.order {
		p(selector)
	}
	if offset := hq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HustlerGroupBy is the group-by builder for Hustler entities.
type HustlerGroupBy struct {
	selector
	build *HustlerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hgb *HustlerGroupBy) Aggregate(fns ...AggregateFunc) *HustlerGroupBy {
	hgb.fns = append(hgb.fns, fns...)
	return hgb
}

// Scan applies the selector query and scans the result into the given value.
func (hgb *HustlerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hgb.build.ctx, "GroupBy")
	if err := hgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HustlerQuery, *HustlerGroupBy](ctx, hgb.build, hgb, hgb.build.inters, v)
}

func (hgb *HustlerGroupBy) sqlScan(ctx context.Context, root *HustlerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hgb.fns))
	for _, fn := range hgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hgb.flds)+len(hgb.fns))
		for _, f := range *hgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HustlerSelect is the builder for selecting fields of Hustler entities.
type HustlerSelect struct {
	*HustlerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hs *HustlerSelect) Aggregate(fns ...AggregateFunc) *HustlerSelect {
	hs.fns = append(hs.fns, fns...)
	return hs
}

// Scan applies the selector query and scans the result into the given value.
func (hs *HustlerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hs.ctx, "Select")
	if err := hs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HustlerQuery, *HustlerSelect](ctx, hs.HustlerQuery, hs, hs.inters, v)
}

func (hs *HustlerSelect) sqlScan(ctx context.Context, root *HustlerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hs.fns))
	for _, fn := range hs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
