// Code generated by ent, DO NOT EDIT.

package gamehustlerrelation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the gamehustlerrelation type in the database.
	Label = "game_hustler_relation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCitizen holds the string denoting the citizen field in the database.
	FieldCitizen = "citizen"
	// FieldConversation holds the string denoting the conversation field in the database.
	FieldConversation = "conversation"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// EdgeHustler holds the string denoting the hustler edge name in mutations.
	EdgeHustler = "hustler"
	// Table holds the table name of the gamehustlerrelation in the database.
	Table = "game_hustler_relations"
	// HustlerTable is the table that holds the hustler relation/edge.
	HustlerTable = "game_hustler_relations"
	// HustlerInverseTable is the table name for the GameHustler entity.
	// It exists in this package in order to avoid circular dependency with the "gamehustler" package.
	HustlerInverseTable = "game_hustlers"
	// HustlerColumn is the table column denoting the hustler relation/edge.
	HustlerColumn = "game_hustler_relations"
)

// Columns holds all SQL columns for gamehustlerrelation fields.
var Columns = []string{
	FieldID,
	FieldCitizen,
	FieldConversation,
	FieldText,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "game_hustler_relations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_hustler_relations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the GameHustlerRelation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCitizen orders the results by the citizen field.
func ByCitizen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCitizen, opts...).ToFunc()
}

// ByConversation orders the results by the conversation field.
func ByConversation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConversation, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByHustlerField orders the results by hustler field.
func ByHustlerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerStep(), sql.OrderByField(field, opts...))
	}
}
func newHustlerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HustlerTable, HustlerColumn),
	)
}
