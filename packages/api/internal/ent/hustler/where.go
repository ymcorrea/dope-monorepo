// Code generated by ent, DO NOT EDIT.

package hustler

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldName, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldTitle, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldColor, v))
}

// Background applies equality check predicate on the "background" field. It's identical to BackgroundEQ.
func Background(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldBackground, v))
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v uint64) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldAge, v))
}

// Svg applies equality check predicate on the "svg" field. It's identical to SvgEQ.
func Svg(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldSvg, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldCreatedAt, v))
}

// BestAskPriceEth applies equality check predicate on the "best_ask_price_eth" field. It's identical to BestAskPriceEthEQ.
func BestAskPriceEth(v float64) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldBestAskPriceEth, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldType, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContainsFold(FieldName, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContainsFold(FieldTitle, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldHasSuffix(FieldColor, v))
}

// ColorIsNil applies the IsNil predicate on the "color" field.
func ColorIsNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldIsNull(FieldColor))
}

// ColorNotNil applies the NotNil predicate on the "color" field.
func ColorNotNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldNotNull(FieldColor))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContainsFold(FieldColor, v))
}

// BackgroundEQ applies the EQ predicate on the "background" field.
func BackgroundEQ(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldBackground, v))
}

// BackgroundNEQ applies the NEQ predicate on the "background" field.
func BackgroundNEQ(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldBackground, v))
}

// BackgroundIn applies the In predicate on the "background" field.
func BackgroundIn(vs ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldBackground, vs...))
}

// BackgroundNotIn applies the NotIn predicate on the "background" field.
func BackgroundNotIn(vs ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldBackground, vs...))
}

// BackgroundGT applies the GT predicate on the "background" field.
func BackgroundGT(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGT(FieldBackground, v))
}

// BackgroundGTE applies the GTE predicate on the "background" field.
func BackgroundGTE(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGTE(FieldBackground, v))
}

// BackgroundLT applies the LT predicate on the "background" field.
func BackgroundLT(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLT(FieldBackground, v))
}

// BackgroundLTE applies the LTE predicate on the "background" field.
func BackgroundLTE(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLTE(FieldBackground, v))
}

// BackgroundContains applies the Contains predicate on the "background" field.
func BackgroundContains(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContains(FieldBackground, v))
}

// BackgroundHasPrefix applies the HasPrefix predicate on the "background" field.
func BackgroundHasPrefix(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldHasPrefix(FieldBackground, v))
}

// BackgroundHasSuffix applies the HasSuffix predicate on the "background" field.
func BackgroundHasSuffix(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldHasSuffix(FieldBackground, v))
}

// BackgroundIsNil applies the IsNil predicate on the "background" field.
func BackgroundIsNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldIsNull(FieldBackground))
}

// BackgroundNotNil applies the NotNil predicate on the "background" field.
func BackgroundNotNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldNotNull(FieldBackground))
}

// BackgroundEqualFold applies the EqualFold predicate on the "background" field.
func BackgroundEqualFold(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEqualFold(FieldBackground, v))
}

// BackgroundContainsFold applies the ContainsFold predicate on the "background" field.
func BackgroundContainsFold(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContainsFold(FieldBackground, v))
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v uint64) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v uint64) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...uint64) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...uint64) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v uint64) predicate.Hustler {
	return predicate.Hustler(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v uint64) predicate.Hustler {
	return predicate.Hustler(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v uint64) predicate.Hustler {
	return predicate.Hustler(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v uint64) predicate.Hustler {
	return predicate.Hustler(sql.FieldLTE(FieldAge, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v Sex) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v Sex) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...Sex) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...Sex) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldSex, vs...))
}

// SvgEQ applies the EQ predicate on the "svg" field.
func SvgEQ(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldSvg, v))
}

// SvgNEQ applies the NEQ predicate on the "svg" field.
func SvgNEQ(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldSvg, v))
}

// SvgIn applies the In predicate on the "svg" field.
func SvgIn(vs ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldSvg, vs...))
}

// SvgNotIn applies the NotIn predicate on the "svg" field.
func SvgNotIn(vs ...string) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldSvg, vs...))
}

// SvgGT applies the GT predicate on the "svg" field.
func SvgGT(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGT(FieldSvg, v))
}

// SvgGTE applies the GTE predicate on the "svg" field.
func SvgGTE(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldGTE(FieldSvg, v))
}

// SvgLT applies the LT predicate on the "svg" field.
func SvgLT(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLT(FieldSvg, v))
}

// SvgLTE applies the LTE predicate on the "svg" field.
func SvgLTE(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldLTE(FieldSvg, v))
}

// SvgContains applies the Contains predicate on the "svg" field.
func SvgContains(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContains(FieldSvg, v))
}

// SvgHasPrefix applies the HasPrefix predicate on the "svg" field.
func SvgHasPrefix(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldHasPrefix(FieldSvg, v))
}

// SvgHasSuffix applies the HasSuffix predicate on the "svg" field.
func SvgHasSuffix(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldHasSuffix(FieldSvg, v))
}

// SvgIsNil applies the IsNil predicate on the "svg" field.
func SvgIsNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldIsNull(FieldSvg))
}

// SvgNotNil applies the NotNil predicate on the "svg" field.
func SvgNotNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldNotNull(FieldSvg))
}

// SvgEqualFold applies the EqualFold predicate on the "svg" field.
func SvgEqualFold(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldEqualFold(FieldSvg, v))
}

// SvgContainsFold applies the ContainsFold predicate on the "svg" field.
func SvgContainsFold(v string) predicate.Hustler {
	return predicate.Hustler(sql.FieldContainsFold(FieldSvg, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Hustler {
	return predicate.Hustler(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Hustler {
	return predicate.Hustler(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Hustler {
	return predicate.Hustler(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Hustler {
	return predicate.Hustler(sql.FieldLTE(FieldCreatedAt, v))
}

// BestAskPriceEthEQ applies the EQ predicate on the "best_ask_price_eth" field.
func BestAskPriceEthEQ(v float64) predicate.Hustler {
	return predicate.Hustler(sql.FieldEQ(FieldBestAskPriceEth, v))
}

// BestAskPriceEthNEQ applies the NEQ predicate on the "best_ask_price_eth" field.
func BestAskPriceEthNEQ(v float64) predicate.Hustler {
	return predicate.Hustler(sql.FieldNEQ(FieldBestAskPriceEth, v))
}

// BestAskPriceEthIn applies the In predicate on the "best_ask_price_eth" field.
func BestAskPriceEthIn(vs ...float64) predicate.Hustler {
	return predicate.Hustler(sql.FieldIn(FieldBestAskPriceEth, vs...))
}

// BestAskPriceEthNotIn applies the NotIn predicate on the "best_ask_price_eth" field.
func BestAskPriceEthNotIn(vs ...float64) predicate.Hustler {
	return predicate.Hustler(sql.FieldNotIn(FieldBestAskPriceEth, vs...))
}

// BestAskPriceEthGT applies the GT predicate on the "best_ask_price_eth" field.
func BestAskPriceEthGT(v float64) predicate.Hustler {
	return predicate.Hustler(sql.FieldGT(FieldBestAskPriceEth, v))
}

// BestAskPriceEthGTE applies the GTE predicate on the "best_ask_price_eth" field.
func BestAskPriceEthGTE(v float64) predicate.Hustler {
	return predicate.Hustler(sql.FieldGTE(FieldBestAskPriceEth, v))
}

// BestAskPriceEthLT applies the LT predicate on the "best_ask_price_eth" field.
func BestAskPriceEthLT(v float64) predicate.Hustler {
	return predicate.Hustler(sql.FieldLT(FieldBestAskPriceEth, v))
}

// BestAskPriceEthLTE applies the LTE predicate on the "best_ask_price_eth" field.
func BestAskPriceEthLTE(v float64) predicate.Hustler {
	return predicate.Hustler(sql.FieldLTE(FieldBestAskPriceEth, v))
}

// BestAskPriceEthIsNil applies the IsNil predicate on the "best_ask_price_eth" field.
func BestAskPriceEthIsNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldIsNull(FieldBestAskPriceEth))
}

// BestAskPriceEthNotNil applies the NotNil predicate on the "best_ask_price_eth" field.
func BestAskPriceEthNotNil() predicate.Hustler {
	return predicate.Hustler(sql.FieldNotNull(FieldBestAskPriceEth))
}

// HasWallet applies the HasEdge predicate on the "wallet" edge.
func HasWallet() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WalletTable, WalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWalletWith applies the HasEdge predicate on the "wallet" edge with a given conditions (other predicates).
func HasWalletWith(preds ...predicate.Wallet) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newWalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWeapon applies the HasEdge predicate on the "weapon" edge.
func HasWeapon() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WeaponTable, WeaponColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWeaponWith applies the HasEdge predicate on the "weapon" edge with a given conditions (other predicates).
func HasWeaponWith(preds ...predicate.Item) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newWeaponStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClothes applies the HasEdge predicate on the "clothes" edge.
func HasClothes() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClothesTable, ClothesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClothesWith applies the HasEdge predicate on the "clothes" edge with a given conditions (other predicates).
func HasClothesWith(preds ...predicate.Item) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newClothesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVehicle applies the HasEdge predicate on the "vehicle" edge.
func HasVehicle() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VehicleTable, VehicleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVehicleWith applies the HasEdge predicate on the "vehicle" edge with a given conditions (other predicates).
func HasVehicleWith(preds ...predicate.Item) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newVehicleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWaist applies the HasEdge predicate on the "waist" edge.
func HasWaist() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WaistTable, WaistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWaistWith applies the HasEdge predicate on the "waist" edge with a given conditions (other predicates).
func HasWaistWith(preds ...predicate.Item) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newWaistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFoot applies the HasEdge predicate on the "foot" edge.
func HasFoot() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FootTable, FootColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFootWith applies the HasEdge predicate on the "foot" edge with a given conditions (other predicates).
func HasFootWith(preds ...predicate.Item) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newFootStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHand applies the HasEdge predicate on the "hand" edge.
func HasHand() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HandTable, HandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHandWith applies the HasEdge predicate on the "hand" edge with a given conditions (other predicates).
func HasHandWith(preds ...predicate.Item) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newHandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDrug applies the HasEdge predicate on the "drug" edge.
func HasDrug() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DrugTable, DrugColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDrugWith applies the HasEdge predicate on the "drug" edge with a given conditions (other predicates).
func HasDrugWith(preds ...predicate.Item) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newDrugStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNeck applies the HasEdge predicate on the "neck" edge.
func HasNeck() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NeckTable, NeckColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNeckWith applies the HasEdge predicate on the "neck" edge with a given conditions (other predicates).
func HasNeckWith(preds ...predicate.Item) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newNeckStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRing applies the HasEdge predicate on the "ring" edge.
func HasRing() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RingTable, RingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRingWith applies the HasEdge predicate on the "ring" edge with a given conditions (other predicates).
func HasRingWith(preds ...predicate.Item) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newRingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccessory applies the HasEdge predicate on the "accessory" edge.
func HasAccessory() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccessoryTable, AccessoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccessoryWith applies the HasEdge predicate on the "accessory" edge with a given conditions (other predicates).
func HasAccessoryWith(preds ...predicate.Item) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newAccessoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBody applies the HasEdge predicate on the "body" edge.
func HasBody() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BodyTable, BodyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBodyWith applies the HasEdge predicate on the "body" edge with a given conditions (other predicates).
func HasBodyWith(preds ...predicate.BodyPart) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newBodyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHair applies the HasEdge predicate on the "hair" edge.
func HasHair() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HairTable, HairColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHairWith applies the HasEdge predicate on the "hair" edge with a given conditions (other predicates).
func HasHairWith(preds ...predicate.BodyPart) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newHairStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBeard applies the HasEdge predicate on the "beard" edge.
func HasBeard() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BeardTable, BeardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBeardWith applies the HasEdge predicate on the "beard" edge with a given conditions (other predicates).
func HasBeardWith(preds ...predicate.BodyPart) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newBeardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIndex applies the HasEdge predicate on the "index" edge.
func HasIndex() predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, IndexTable, IndexColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIndexWith applies the HasEdge predicate on the "index" edge with a given conditions (other predicates).
func HasIndexWith(preds ...predicate.Search) predicate.Hustler {
	return predicate.Hustler(func(s *sql.Selector) {
		step := newIndexStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Hustler) predicate.Hustler {
	return predicate.Hustler(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Hustler) predicate.Hustler {
	return predicate.Hustler(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Hustler) predicate.Hustler {
	return predicate.Hustler(sql.NotPredicates(p))
}
