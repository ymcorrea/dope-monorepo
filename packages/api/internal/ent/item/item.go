// Code generated by ent, DO NOT EDIT.

package item

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the item type in the database.
	Label = "item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldNamePrefix holds the string denoting the name_prefix field in the database.
	FieldNamePrefix = "name_prefix"
	// FieldNameSuffix holds the string denoting the name_suffix field in the database.
	FieldNameSuffix = "name_suffix"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSuffix holds the string denoting the suffix field in the database.
	FieldSuffix = "suffix"
	// FieldAugmented holds the string denoting the augmented field in the database.
	FieldAugmented = "augmented"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// FieldTier holds the string denoting the tier field in the database.
	FieldTier = "tier"
	// FieldGreatness holds the string denoting the greatness field in the database.
	FieldGreatness = "greatness"
	// FieldRles holds the string denoting the rles field in the database.
	FieldRles = "rles"
	// FieldSvg holds the string denoting the svg field in the database.
	FieldSvg = "svg"
	// FieldSprite holds the string denoting the sprite field in the database.
	FieldSprite = "sprite"
	// FieldBestAskPriceEth holds the string denoting the best_ask_price_eth field in the database.
	FieldBestAskPriceEth = "best_ask_price_eth"
	// EdgeWallets holds the string denoting the wallets edge name in mutations.
	EdgeWallets = "wallets"
	// EdgeDopes holds the string denoting the dopes edge name in mutations.
	EdgeDopes = "dopes"
	// EdgeHustlerWeapons holds the string denoting the hustler_weapons edge name in mutations.
	EdgeHustlerWeapons = "hustler_weapons"
	// EdgeHustlerClothes holds the string denoting the hustler_clothes edge name in mutations.
	EdgeHustlerClothes = "hustler_clothes"
	// EdgeHustlerVehicles holds the string denoting the hustler_vehicles edge name in mutations.
	EdgeHustlerVehicles = "hustler_vehicles"
	// EdgeHustlerWaists holds the string denoting the hustler_waists edge name in mutations.
	EdgeHustlerWaists = "hustler_waists"
	// EdgeHustlerFeet holds the string denoting the hustler_feet edge name in mutations.
	EdgeHustlerFeet = "hustler_feet"
	// EdgeHustlerHands holds the string denoting the hustler_hands edge name in mutations.
	EdgeHustlerHands = "hustler_hands"
	// EdgeHustlerDrugs holds the string denoting the hustler_drugs edge name in mutations.
	EdgeHustlerDrugs = "hustler_drugs"
	// EdgeHustlerNecks holds the string denoting the hustler_necks edge name in mutations.
	EdgeHustlerNecks = "hustler_necks"
	// EdgeHustlerRings holds the string denoting the hustler_rings edge name in mutations.
	EdgeHustlerRings = "hustler_rings"
	// EdgeHustlerAccessories holds the string denoting the hustler_accessories edge name in mutations.
	EdgeHustlerAccessories = "hustler_accessories"
	// EdgeBase holds the string denoting the base edge name in mutations.
	EdgeBase = "base"
	// EdgeDerivative holds the string denoting the derivative edge name in mutations.
	EdgeDerivative = "derivative"
	// EdgeIndex holds the string denoting the index edge name in mutations.
	EdgeIndex = "index"
	// Table holds the table name of the item in the database.
	Table = "items"
	// WalletsTable is the table that holds the wallets relation/edge.
	WalletsTable = "wallet_items"
	// WalletsInverseTable is the table name for the WalletItems entity.
	// It exists in this package in order to avoid circular dependency with the "walletitems" package.
	WalletsInverseTable = "wallet_items"
	// WalletsColumn is the table column denoting the wallets relation/edge.
	WalletsColumn = "item_wallets"
	// DopesTable is the table that holds the dopes relation/edge. The primary key declared below.
	DopesTable = "dope_items"
	// DopesInverseTable is the table name for the Dope entity.
	// It exists in this package in order to avoid circular dependency with the "dope" package.
	DopesInverseTable = "dopes"
	// HustlerWeaponsTable is the table that holds the hustler_weapons relation/edge.
	HustlerWeaponsTable = "hustlers"
	// HustlerWeaponsInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerWeaponsInverseTable = "hustlers"
	// HustlerWeaponsColumn is the table column denoting the hustler_weapons relation/edge.
	HustlerWeaponsColumn = "item_hustler_weapons"
	// HustlerClothesTable is the table that holds the hustler_clothes relation/edge.
	HustlerClothesTable = "hustlers"
	// HustlerClothesInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerClothesInverseTable = "hustlers"
	// HustlerClothesColumn is the table column denoting the hustler_clothes relation/edge.
	HustlerClothesColumn = "item_hustler_clothes"
	// HustlerVehiclesTable is the table that holds the hustler_vehicles relation/edge.
	HustlerVehiclesTable = "hustlers"
	// HustlerVehiclesInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerVehiclesInverseTable = "hustlers"
	// HustlerVehiclesColumn is the table column denoting the hustler_vehicles relation/edge.
	HustlerVehiclesColumn = "item_hustler_vehicles"
	// HustlerWaistsTable is the table that holds the hustler_waists relation/edge.
	HustlerWaistsTable = "hustlers"
	// HustlerWaistsInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerWaistsInverseTable = "hustlers"
	// HustlerWaistsColumn is the table column denoting the hustler_waists relation/edge.
	HustlerWaistsColumn = "item_hustler_waists"
	// HustlerFeetTable is the table that holds the hustler_feet relation/edge.
	HustlerFeetTable = "hustlers"
	// HustlerFeetInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerFeetInverseTable = "hustlers"
	// HustlerFeetColumn is the table column denoting the hustler_feet relation/edge.
	HustlerFeetColumn = "item_hustler_feet"
	// HustlerHandsTable is the table that holds the hustler_hands relation/edge.
	HustlerHandsTable = "hustlers"
	// HustlerHandsInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerHandsInverseTable = "hustlers"
	// HustlerHandsColumn is the table column denoting the hustler_hands relation/edge.
	HustlerHandsColumn = "item_hustler_hands"
	// HustlerDrugsTable is the table that holds the hustler_drugs relation/edge.
	HustlerDrugsTable = "hustlers"
	// HustlerDrugsInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerDrugsInverseTable = "hustlers"
	// HustlerDrugsColumn is the table column denoting the hustler_drugs relation/edge.
	HustlerDrugsColumn = "item_hustler_drugs"
	// HustlerNecksTable is the table that holds the hustler_necks relation/edge.
	HustlerNecksTable = "hustlers"
	// HustlerNecksInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerNecksInverseTable = "hustlers"
	// HustlerNecksColumn is the table column denoting the hustler_necks relation/edge.
	HustlerNecksColumn = "item_hustler_necks"
	// HustlerRingsTable is the table that holds the hustler_rings relation/edge.
	HustlerRingsTable = "hustlers"
	// HustlerRingsInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerRingsInverseTable = "hustlers"
	// HustlerRingsColumn is the table column denoting the hustler_rings relation/edge.
	HustlerRingsColumn = "item_hustler_rings"
	// HustlerAccessoriesTable is the table that holds the hustler_accessories relation/edge.
	HustlerAccessoriesTable = "hustlers"
	// HustlerAccessoriesInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerAccessoriesInverseTable = "hustlers"
	// HustlerAccessoriesColumn is the table column denoting the hustler_accessories relation/edge.
	HustlerAccessoriesColumn = "item_hustler_accessories"
	// BaseTable is the table that holds the base relation/edge.
	BaseTable = "items"
	// BaseColumn is the table column denoting the base relation/edge.
	BaseColumn = "item_derivative"
	// DerivativeTable is the table that holds the derivative relation/edge.
	DerivativeTable = "items"
	// DerivativeColumn is the table column denoting the derivative relation/edge.
	DerivativeColumn = "item_derivative"
	// IndexTable is the table that holds the index relation/edge.
	IndexTable = "search_index"
	// IndexInverseTable is the table name for the Search entity.
	// It exists in this package in order to avoid circular dependency with the "search" package.
	IndexInverseTable = "search_index"
	// IndexColumn is the table column denoting the index relation/edge.
	IndexColumn = "item_index"
)

// Columns holds all SQL columns for item fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldNamePrefix,
	FieldNameSuffix,
	FieldName,
	FieldSuffix,
	FieldAugmented,
	FieldCount,
	FieldTier,
	FieldGreatness,
	FieldRles,
	FieldSvg,
	FieldSprite,
	FieldBestAskPriceEth,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"item_derivative",
}

var (
	// DopesPrimaryKey and DopesColumn2 are the table columns denoting the
	// primary key for the dopes relation (M2M).
	DopesPrimaryKey = []string{"dope_id", "item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeWEAPON    Type = "WEAPON"
	TypeCLOTHES   Type = "CLOTHES"
	TypeVEHICLE   Type = "VEHICLE"
	TypeWAIST     Type = "WAIST"
	TypeFOOT      Type = "FOOT"
	TypeHAND      Type = "HAND"
	TypeDRUGS     Type = "DRUGS"
	TypeNECK      Type = "NECK"
	TypeRING      Type = "RING"
	TypeACCESSORY Type = "ACCESSORY"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeWEAPON, TypeCLOTHES, TypeVEHICLE, TypeWAIST, TypeFOOT, TypeHAND, TypeDRUGS, TypeNECK, TypeRING, TypeACCESSORY:
		return nil
	default:
		return fmt.Errorf("item: invalid enum value for type field: %q", _type)
	}
}

// Tier defines the type for the "tier" enum field.
type Tier string

// Tier values.
const (
	TierCOMMON       Tier = "COMMON"
	TierRARE         Tier = "RARE"
	TierCUSTOM       Tier = "CUSTOM"
	TierBLACK_MARKET Tier = "BLACK_MARKET"
)

func (t Tier) String() string {
	return string(t)
}

// TierValidator is a validator for the "tier" field enum values. It is called by the builders before save.
func TierValidator(t Tier) error {
	switch t {
	case TierCOMMON, TierRARE, TierCUSTOM, TierBLACK_MARKET:
		return nil
	default:
		return fmt.Errorf("item: invalid enum value for tier field: %q", t)
	}
}

// OrderOption defines the ordering options for the Item queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByNamePrefix orders the results by the name_prefix field.
func ByNamePrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamePrefix, opts...).ToFunc()
}

// ByNameSuffix orders the results by the name_suffix field.
func ByNameSuffix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameSuffix, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySuffix orders the results by the suffix field.
func BySuffix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuffix, opts...).ToFunc()
}

// ByAugmented orders the results by the augmented field.
func ByAugmented(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAugmented, opts...).ToFunc()
}

// ByCount orders the results by the count field.
func ByCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCount, opts...).ToFunc()
}

// ByTier orders the results by the tier field.
func ByTier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTier, opts...).ToFunc()
}

// ByGreatness orders the results by the greatness field.
func ByGreatness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGreatness, opts...).ToFunc()
}

// BySvg orders the results by the svg field.
func BySvg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSvg, opts...).ToFunc()
}

// ByBestAskPriceEth orders the results by the best_ask_price_eth field.
func ByBestAskPriceEth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBestAskPriceEth, opts...).ToFunc()
}

// ByWalletsCount orders the results by wallets count.
func ByWalletsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWalletsStep(), opts...)
	}
}

// ByWallets orders the results by wallets terms.
func ByWallets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWalletsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDopesCount orders the results by dopes count.
func ByDopesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDopesStep(), opts...)
	}
}

// ByDopes orders the results by dopes terms.
func ByDopes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDopesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerWeaponsCount orders the results by hustler_weapons count.
func ByHustlerWeaponsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerWeaponsStep(), opts...)
	}
}

// ByHustlerWeapons orders the results by hustler_weapons terms.
func ByHustlerWeapons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerWeaponsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerClothesCount orders the results by hustler_clothes count.
func ByHustlerClothesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerClothesStep(), opts...)
	}
}

// ByHustlerClothes orders the results by hustler_clothes terms.
func ByHustlerClothes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerClothesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerVehiclesCount orders the results by hustler_vehicles count.
func ByHustlerVehiclesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerVehiclesStep(), opts...)
	}
}

// ByHustlerVehicles orders the results by hustler_vehicles terms.
func ByHustlerVehicles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerVehiclesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerWaistsCount orders the results by hustler_waists count.
func ByHustlerWaistsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerWaistsStep(), opts...)
	}
}

// ByHustlerWaists orders the results by hustler_waists terms.
func ByHustlerWaists(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerWaistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerFeetCount orders the results by hustler_feet count.
func ByHustlerFeetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerFeetStep(), opts...)
	}
}

// ByHustlerFeet orders the results by hustler_feet terms.
func ByHustlerFeet(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerFeetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerHandsCount orders the results by hustler_hands count.
func ByHustlerHandsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerHandsStep(), opts...)
	}
}

// ByHustlerHands orders the results by hustler_hands terms.
func ByHustlerHands(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerHandsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerDrugsCount orders the results by hustler_drugs count.
func ByHustlerDrugsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerDrugsStep(), opts...)
	}
}

// ByHustlerDrugs orders the results by hustler_drugs terms.
func ByHustlerDrugs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerDrugsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerNecksCount orders the results by hustler_necks count.
func ByHustlerNecksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerNecksStep(), opts...)
	}
}

// ByHustlerNecks orders the results by hustler_necks terms.
func ByHustlerNecks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerNecksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerRingsCount orders the results by hustler_rings count.
func ByHustlerRingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerRingsStep(), opts...)
	}
}

// ByHustlerRings orders the results by hustler_rings terms.
func ByHustlerRings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerRingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlerAccessoriesCount orders the results by hustler_accessories count.
func ByHustlerAccessoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlerAccessoriesStep(), opts...)
	}
}

// ByHustlerAccessories orders the results by hustler_accessories terms.
func ByHustlerAccessories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerAccessoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBaseField orders the results by base field.
func ByBaseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBaseStep(), sql.OrderByField(field, opts...))
	}
}

// ByDerivativeCount orders the results by derivative count.
func ByDerivativeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDerivativeStep(), opts...)
	}
}

// ByDerivative orders the results by derivative terms.
func ByDerivative(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDerivativeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIndexField orders the results by index field.
func ByIndexField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIndexStep(), sql.OrderByField(field, opts...))
	}
}
func newWalletsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WalletsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WalletsTable, WalletsColumn),
	)
}
func newDopesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DopesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DopesTable, DopesPrimaryKey...),
	)
}
func newHustlerWeaponsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerWeaponsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerWeaponsTable, HustlerWeaponsColumn),
	)
}
func newHustlerClothesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerClothesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerClothesTable, HustlerClothesColumn),
	)
}
func newHustlerVehiclesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerVehiclesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerVehiclesTable, HustlerVehiclesColumn),
	)
}
func newHustlerWaistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerWaistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerWaistsTable, HustlerWaistsColumn),
	)
}
func newHustlerFeetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerFeetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerFeetTable, HustlerFeetColumn),
	)
}
func newHustlerHandsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerHandsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerHandsTable, HustlerHandsColumn),
	)
}
func newHustlerDrugsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerDrugsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerDrugsTable, HustlerDrugsColumn),
	)
}
func newHustlerNecksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerNecksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerNecksTable, HustlerNecksColumn),
	)
}
func newHustlerRingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerRingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerRingsTable, HustlerRingsColumn),
	)
}
func newHustlerAccessoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerAccessoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlerAccessoriesTable, HustlerAccessoriesColumn),
	)
}
func newBaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BaseTable, BaseColumn),
	)
}
func newDerivativeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DerivativeTable, DerivativeColumn),
	)
}
func newIndexStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IndexInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, IndexTable, IndexColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Tier) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Tier) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Tier(str)
	if err := TierValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Tier", str)
	}
	return nil
}
