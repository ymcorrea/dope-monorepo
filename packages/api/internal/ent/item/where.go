// Code generated by ent, DO NOT EDIT.

package item

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldID, id))
}

// NamePrefix applies equality check predicate on the "name_prefix" field. It's identical to NamePrefixEQ.
func NamePrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldNamePrefix, v))
}

// NameSuffix applies equality check predicate on the "name_suffix" field. It's identical to NameSuffixEQ.
func NameSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldNameSuffix, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldName, v))
}

// Suffix applies equality check predicate on the "suffix" field. It's identical to SuffixEQ.
func Suffix(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSuffix, v))
}

// Augmented applies equality check predicate on the "augmented" field. It's identical to AugmentedEQ.
func Augmented(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldAugmented, v))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldCount, v))
}

// Greatness applies equality check predicate on the "greatness" field. It's identical to GreatnessEQ.
func Greatness(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldGreatness, v))
}

// Svg applies equality check predicate on the "svg" field. It's identical to SvgEQ.
func Svg(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSvg, v))
}

// BestAskPriceEth applies equality check predicate on the "best_ask_price_eth" field. It's identical to BestAskPriceEthEQ.
func BestAskPriceEth(v float64) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldBestAskPriceEth, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldType, vs...))
}

// NamePrefixEQ applies the EQ predicate on the "name_prefix" field.
func NamePrefixEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldNamePrefix, v))
}

// NamePrefixNEQ applies the NEQ predicate on the "name_prefix" field.
func NamePrefixNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldNamePrefix, v))
}

// NamePrefixIn applies the In predicate on the "name_prefix" field.
func NamePrefixIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldNamePrefix, vs...))
}

// NamePrefixNotIn applies the NotIn predicate on the "name_prefix" field.
func NamePrefixNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldNamePrefix, vs...))
}

// NamePrefixGT applies the GT predicate on the "name_prefix" field.
func NamePrefixGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldNamePrefix, v))
}

// NamePrefixGTE applies the GTE predicate on the "name_prefix" field.
func NamePrefixGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldNamePrefix, v))
}

// NamePrefixLT applies the LT predicate on the "name_prefix" field.
func NamePrefixLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldNamePrefix, v))
}

// NamePrefixLTE applies the LTE predicate on the "name_prefix" field.
func NamePrefixLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldNamePrefix, v))
}

// NamePrefixContains applies the Contains predicate on the "name_prefix" field.
func NamePrefixContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldNamePrefix, v))
}

// NamePrefixHasPrefix applies the HasPrefix predicate on the "name_prefix" field.
func NamePrefixHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldNamePrefix, v))
}

// NamePrefixHasSuffix applies the HasSuffix predicate on the "name_prefix" field.
func NamePrefixHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldNamePrefix, v))
}

// NamePrefixIsNil applies the IsNil predicate on the "name_prefix" field.
func NamePrefixIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldNamePrefix))
}

// NamePrefixNotNil applies the NotNil predicate on the "name_prefix" field.
func NamePrefixNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldNamePrefix))
}

// NamePrefixEqualFold applies the EqualFold predicate on the "name_prefix" field.
func NamePrefixEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldNamePrefix, v))
}

// NamePrefixContainsFold applies the ContainsFold predicate on the "name_prefix" field.
func NamePrefixContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldNamePrefix, v))
}

// NameSuffixEQ applies the EQ predicate on the "name_suffix" field.
func NameSuffixEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldNameSuffix, v))
}

// NameSuffixNEQ applies the NEQ predicate on the "name_suffix" field.
func NameSuffixNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldNameSuffix, v))
}

// NameSuffixIn applies the In predicate on the "name_suffix" field.
func NameSuffixIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldNameSuffix, vs...))
}

// NameSuffixNotIn applies the NotIn predicate on the "name_suffix" field.
func NameSuffixNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldNameSuffix, vs...))
}

// NameSuffixGT applies the GT predicate on the "name_suffix" field.
func NameSuffixGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldNameSuffix, v))
}

// NameSuffixGTE applies the GTE predicate on the "name_suffix" field.
func NameSuffixGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldNameSuffix, v))
}

// NameSuffixLT applies the LT predicate on the "name_suffix" field.
func NameSuffixLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldNameSuffix, v))
}

// NameSuffixLTE applies the LTE predicate on the "name_suffix" field.
func NameSuffixLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldNameSuffix, v))
}

// NameSuffixContains applies the Contains predicate on the "name_suffix" field.
func NameSuffixContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldNameSuffix, v))
}

// NameSuffixHasPrefix applies the HasPrefix predicate on the "name_suffix" field.
func NameSuffixHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldNameSuffix, v))
}

// NameSuffixHasSuffix applies the HasSuffix predicate on the "name_suffix" field.
func NameSuffixHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldNameSuffix, v))
}

// NameSuffixIsNil applies the IsNil predicate on the "name_suffix" field.
func NameSuffixIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldNameSuffix))
}

// NameSuffixNotNil applies the NotNil predicate on the "name_suffix" field.
func NameSuffixNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldNameSuffix))
}

// NameSuffixEqualFold applies the EqualFold predicate on the "name_suffix" field.
func NameSuffixEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldNameSuffix, v))
}

// NameSuffixContainsFold applies the ContainsFold predicate on the "name_suffix" field.
func NameSuffixContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldNameSuffix, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldName, v))
}

// SuffixEQ applies the EQ predicate on the "suffix" field.
func SuffixEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSuffix, v))
}

// SuffixNEQ applies the NEQ predicate on the "suffix" field.
func SuffixNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldSuffix, v))
}

// SuffixIn applies the In predicate on the "suffix" field.
func SuffixIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldSuffix, vs...))
}

// SuffixNotIn applies the NotIn predicate on the "suffix" field.
func SuffixNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldSuffix, vs...))
}

// SuffixGT applies the GT predicate on the "suffix" field.
func SuffixGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldSuffix, v))
}

// SuffixGTE applies the GTE predicate on the "suffix" field.
func SuffixGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldSuffix, v))
}

// SuffixLT applies the LT predicate on the "suffix" field.
func SuffixLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldSuffix, v))
}

// SuffixLTE applies the LTE predicate on the "suffix" field.
func SuffixLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldSuffix, v))
}

// SuffixContains applies the Contains predicate on the "suffix" field.
func SuffixContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldSuffix, v))
}

// SuffixHasPrefix applies the HasPrefix predicate on the "suffix" field.
func SuffixHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldSuffix, v))
}

// SuffixHasSuffix applies the HasSuffix predicate on the "suffix" field.
func SuffixHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldSuffix, v))
}

// SuffixIsNil applies the IsNil predicate on the "suffix" field.
func SuffixIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldSuffix))
}

// SuffixNotNil applies the NotNil predicate on the "suffix" field.
func SuffixNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldSuffix))
}

// SuffixEqualFold applies the EqualFold predicate on the "suffix" field.
func SuffixEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldSuffix, v))
}

// SuffixContainsFold applies the ContainsFold predicate on the "suffix" field.
func SuffixContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldSuffix, v))
}

// AugmentedEQ applies the EQ predicate on the "augmented" field.
func AugmentedEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldAugmented, v))
}

// AugmentedNEQ applies the NEQ predicate on the "augmented" field.
func AugmentedNEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldAugmented, v))
}

// AugmentedIsNil applies the IsNil predicate on the "augmented" field.
func AugmentedIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldAugmented))
}

// AugmentedNotNil applies the NotNil predicate on the "augmented" field.
func AugmentedNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldAugmented))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldCount, v))
}

// CountIsNil applies the IsNil predicate on the "count" field.
func CountIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldCount))
}

// CountNotNil applies the NotNil predicate on the "count" field.
func CountNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldCount))
}

// TierEQ applies the EQ predicate on the "tier" field.
func TierEQ(v Tier) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldTier, v))
}

// TierNEQ applies the NEQ predicate on the "tier" field.
func TierNEQ(v Tier) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldTier, v))
}

// TierIn applies the In predicate on the "tier" field.
func TierIn(vs ...Tier) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldTier, vs...))
}

// TierNotIn applies the NotIn predicate on the "tier" field.
func TierNotIn(vs ...Tier) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldTier, vs...))
}

// TierIsNil applies the IsNil predicate on the "tier" field.
func TierIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldTier))
}

// TierNotNil applies the NotNil predicate on the "tier" field.
func TierNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldTier))
}

// GreatnessEQ applies the EQ predicate on the "greatness" field.
func GreatnessEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldGreatness, v))
}

// GreatnessNEQ applies the NEQ predicate on the "greatness" field.
func GreatnessNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldGreatness, v))
}

// GreatnessIn applies the In predicate on the "greatness" field.
func GreatnessIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldGreatness, vs...))
}

// GreatnessNotIn applies the NotIn predicate on the "greatness" field.
func GreatnessNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldGreatness, vs...))
}

// GreatnessGT applies the GT predicate on the "greatness" field.
func GreatnessGT(v int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldGreatness, v))
}

// GreatnessGTE applies the GTE predicate on the "greatness" field.
func GreatnessGTE(v int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldGreatness, v))
}

// GreatnessLT applies the LT predicate on the "greatness" field.
func GreatnessLT(v int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldGreatness, v))
}

// GreatnessLTE applies the LTE predicate on the "greatness" field.
func GreatnessLTE(v int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldGreatness, v))
}

// GreatnessIsNil applies the IsNil predicate on the "greatness" field.
func GreatnessIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldGreatness))
}

// GreatnessNotNil applies the NotNil predicate on the "greatness" field.
func GreatnessNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldGreatness))
}

// RlesIsNil applies the IsNil predicate on the "rles" field.
func RlesIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldRles))
}

// RlesNotNil applies the NotNil predicate on the "rles" field.
func RlesNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldRles))
}

// SvgEQ applies the EQ predicate on the "svg" field.
func SvgEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldSvg, v))
}

// SvgNEQ applies the NEQ predicate on the "svg" field.
func SvgNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldSvg, v))
}

// SvgIn applies the In predicate on the "svg" field.
func SvgIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldSvg, vs...))
}

// SvgNotIn applies the NotIn predicate on the "svg" field.
func SvgNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldSvg, vs...))
}

// SvgGT applies the GT predicate on the "svg" field.
func SvgGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldSvg, v))
}

// SvgGTE applies the GTE predicate on the "svg" field.
func SvgGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldSvg, v))
}

// SvgLT applies the LT predicate on the "svg" field.
func SvgLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldSvg, v))
}

// SvgLTE applies the LTE predicate on the "svg" field.
func SvgLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldSvg, v))
}

// SvgContains applies the Contains predicate on the "svg" field.
func SvgContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldSvg, v))
}

// SvgHasPrefix applies the HasPrefix predicate on the "svg" field.
func SvgHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldSvg, v))
}

// SvgHasSuffix applies the HasSuffix predicate on the "svg" field.
func SvgHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldSvg, v))
}

// SvgIsNil applies the IsNil predicate on the "svg" field.
func SvgIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldSvg))
}

// SvgNotNil applies the NotNil predicate on the "svg" field.
func SvgNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldSvg))
}

// SvgEqualFold applies the EqualFold predicate on the "svg" field.
func SvgEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldSvg, v))
}

// SvgContainsFold applies the ContainsFold predicate on the "svg" field.
func SvgContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldSvg, v))
}

// SpriteIsNil applies the IsNil predicate on the "sprite" field.
func SpriteIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldSprite))
}

// SpriteNotNil applies the NotNil predicate on the "sprite" field.
func SpriteNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldSprite))
}

// BestAskPriceEthEQ applies the EQ predicate on the "best_ask_price_eth" field.
func BestAskPriceEthEQ(v float64) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldBestAskPriceEth, v))
}

// BestAskPriceEthNEQ applies the NEQ predicate on the "best_ask_price_eth" field.
func BestAskPriceEthNEQ(v float64) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldBestAskPriceEth, v))
}

// BestAskPriceEthIn applies the In predicate on the "best_ask_price_eth" field.
func BestAskPriceEthIn(vs ...float64) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldBestAskPriceEth, vs...))
}

// BestAskPriceEthNotIn applies the NotIn predicate on the "best_ask_price_eth" field.
func BestAskPriceEthNotIn(vs ...float64) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldBestAskPriceEth, vs...))
}

// BestAskPriceEthGT applies the GT predicate on the "best_ask_price_eth" field.
func BestAskPriceEthGT(v float64) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldBestAskPriceEth, v))
}

// BestAskPriceEthGTE applies the GTE predicate on the "best_ask_price_eth" field.
func BestAskPriceEthGTE(v float64) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldBestAskPriceEth, v))
}

// BestAskPriceEthLT applies the LT predicate on the "best_ask_price_eth" field.
func BestAskPriceEthLT(v float64) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldBestAskPriceEth, v))
}

// BestAskPriceEthLTE applies the LTE predicate on the "best_ask_price_eth" field.
func BestAskPriceEthLTE(v float64) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldBestAskPriceEth, v))
}

// BestAskPriceEthIsNil applies the IsNil predicate on the "best_ask_price_eth" field.
func BestAskPriceEthIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldBestAskPriceEth))
}

// BestAskPriceEthNotNil applies the NotNil predicate on the "best_ask_price_eth" field.
func BestAskPriceEthNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldBestAskPriceEth))
}

// HasWallets applies the HasEdge predicate on the "wallets" edge.
func HasWallets() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WalletsTable, WalletsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWalletsWith applies the HasEdge predicate on the "wallets" edge with a given conditions (other predicates).
func HasWalletsWith(preds ...predicate.WalletItems) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newWalletsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDopes applies the HasEdge predicate on the "dopes" edge.
func HasDopes() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DopesTable, DopesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDopesWith applies the HasEdge predicate on the "dopes" edge with a given conditions (other predicates).
func HasDopesWith(preds ...predicate.Dope) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newDopesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerWeapons applies the HasEdge predicate on the "hustler_weapons" edge.
func HasHustlerWeapons() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerWeaponsTable, HustlerWeaponsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerWeaponsWith applies the HasEdge predicate on the "hustler_weapons" edge with a given conditions (other predicates).
func HasHustlerWeaponsWith(preds ...predicate.Hustler) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newHustlerWeaponsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerClothes applies the HasEdge predicate on the "hustler_clothes" edge.
func HasHustlerClothes() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerClothesTable, HustlerClothesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerClothesWith applies the HasEdge predicate on the "hustler_clothes" edge with a given conditions (other predicates).
func HasHustlerClothesWith(preds ...predicate.Hustler) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newHustlerClothesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerVehicles applies the HasEdge predicate on the "hustler_vehicles" edge.
func HasHustlerVehicles() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerVehiclesTable, HustlerVehiclesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerVehiclesWith applies the HasEdge predicate on the "hustler_vehicles" edge with a given conditions (other predicates).
func HasHustlerVehiclesWith(preds ...predicate.Hustler) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newHustlerVehiclesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerWaists applies the HasEdge predicate on the "hustler_waists" edge.
func HasHustlerWaists() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerWaistsTable, HustlerWaistsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerWaistsWith applies the HasEdge predicate on the "hustler_waists" edge with a given conditions (other predicates).
func HasHustlerWaistsWith(preds ...predicate.Hustler) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newHustlerWaistsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerFeet applies the HasEdge predicate on the "hustler_feet" edge.
func HasHustlerFeet() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerFeetTable, HustlerFeetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerFeetWith applies the HasEdge predicate on the "hustler_feet" edge with a given conditions (other predicates).
func HasHustlerFeetWith(preds ...predicate.Hustler) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newHustlerFeetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerHands applies the HasEdge predicate on the "hustler_hands" edge.
func HasHustlerHands() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerHandsTable, HustlerHandsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerHandsWith applies the HasEdge predicate on the "hustler_hands" edge with a given conditions (other predicates).
func HasHustlerHandsWith(preds ...predicate.Hustler) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newHustlerHandsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerDrugs applies the HasEdge predicate on the "hustler_drugs" edge.
func HasHustlerDrugs() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerDrugsTable, HustlerDrugsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerDrugsWith applies the HasEdge predicate on the "hustler_drugs" edge with a given conditions (other predicates).
func HasHustlerDrugsWith(preds ...predicate.Hustler) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newHustlerDrugsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerNecks applies the HasEdge predicate on the "hustler_necks" edge.
func HasHustlerNecks() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerNecksTable, HustlerNecksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerNecksWith applies the HasEdge predicate on the "hustler_necks" edge with a given conditions (other predicates).
func HasHustlerNecksWith(preds ...predicate.Hustler) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newHustlerNecksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerRings applies the HasEdge predicate on the "hustler_rings" edge.
func HasHustlerRings() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerRingsTable, HustlerRingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerRingsWith applies the HasEdge predicate on the "hustler_rings" edge with a given conditions (other predicates).
func HasHustlerRingsWith(preds ...predicate.Hustler) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newHustlerRingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlerAccessories applies the HasEdge predicate on the "hustler_accessories" edge.
func HasHustlerAccessories() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlerAccessoriesTable, HustlerAccessoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerAccessoriesWith applies the HasEdge predicate on the "hustler_accessories" edge with a given conditions (other predicates).
func HasHustlerAccessoriesWith(preds ...predicate.Hustler) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newHustlerAccessoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBase applies the HasEdge predicate on the "base" edge.
func HasBase() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BaseTable, BaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBaseWith applies the HasEdge predicate on the "base" edge with a given conditions (other predicates).
func HasBaseWith(preds ...predicate.Item) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newBaseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDerivative applies the HasEdge predicate on the "derivative" edge.
func HasDerivative() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DerivativeTable, DerivativeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDerivativeWith applies the HasEdge predicate on the "derivative" edge with a given conditions (other predicates).
func HasDerivativeWith(preds ...predicate.Item) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newDerivativeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIndex applies the HasEdge predicate on the "index" edge.
func HasIndex() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, IndexTable, IndexColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIndexWith applies the HasEdge predicate on the "index" edge with a given conditions (other predicates).
func HasIndexWith(preds ...predicate.Search) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newIndexStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Item) predicate.Item {
	return predicate.Item(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Item) predicate.Item {
	return predicate.Item(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Item) predicate.Item {
	return predicate.Item(sql.NotPredicates(p))
}
