// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/search"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/wallet"
)

// DopeQuery is the builder for querying Dope entities.
type DopeQuery struct {
	config
	ctx            *QueryContext
	order          []dope.OrderOption
	inters         []Interceptor
	predicates     []predicate.Dope
	withWallet     *WalletQuery
	withItems      *ItemQuery
	withIndex      *SearchQuery
	withFKs        bool
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*Dope) error
	withNamedItems map[string]*ItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DopeQuery builder.
func (dq *DopeQuery) Where(ps ...predicate.Dope) *DopeQuery {
	dq.predicates = append(dq.predicates, ps...)
	return dq
}

// Limit the number of records to be returned by this query.
func (dq *DopeQuery) Limit(limit int) *DopeQuery {
	dq.ctx.Limit = &limit
	return dq
}

// Offset to start from.
func (dq *DopeQuery) Offset(offset int) *DopeQuery {
	dq.ctx.Offset = &offset
	return dq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dq *DopeQuery) Unique(unique bool) *DopeQuery {
	dq.ctx.Unique = &unique
	return dq
}

// Order specifies how the records should be ordered.
func (dq *DopeQuery) Order(o ...dope.OrderOption) *DopeQuery {
	dq.order = append(dq.order, o...)
	return dq
}

// QueryWallet chains the current query on the "wallet" edge.
func (dq *DopeQuery) QueryWallet() *WalletQuery {
	query := (&WalletClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dope.Table, dope.FieldID, selector),
			sqlgraph.To(wallet.Table, wallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dope.WalletTable, dope.WalletColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItems chains the current query on the "items" edge.
func (dq *DopeQuery) QueryItems() *ItemQuery {
	query := (&ItemClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dope.Table, dope.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, dope.ItemsTable, dope.ItemsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIndex chains the current query on the "index" edge.
func (dq *DopeQuery) QueryIndex() *SearchQuery {
	query := (&SearchClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dope.Table, dope.FieldID, selector),
			sqlgraph.To(search.Table, search.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, dope.IndexTable, dope.IndexColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Dope entity from the query.
// Returns a *NotFoundError when no Dope was found.
func (dq *DopeQuery) First(ctx context.Context) (*Dope, error) {
	nodes, err := dq.Limit(1).All(setContextOp(ctx, dq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{dope.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dq *DopeQuery) FirstX(ctx context.Context) *Dope {
	node, err := dq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Dope ID from the query.
// Returns a *NotFoundError when no Dope ID was found.
func (dq *DopeQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = dq.Limit(1).IDs(setContextOp(ctx, dq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dope.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dq *DopeQuery) FirstIDX(ctx context.Context) string {
	id, err := dq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Dope entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Dope entity is found.
// Returns a *NotFoundError when no Dope entities are found.
func (dq *DopeQuery) Only(ctx context.Context) (*Dope, error) {
	nodes, err := dq.Limit(2).All(setContextOp(ctx, dq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{dope.Label}
	default:
		return nil, &NotSingularError{dope.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dq *DopeQuery) OnlyX(ctx context.Context) *Dope {
	node, err := dq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Dope ID in the query.
// Returns a *NotSingularError when more than one Dope ID is found.
// Returns a *NotFoundError when no entities are found.
func (dq *DopeQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = dq.Limit(2).IDs(setContextOp(ctx, dq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dope.Label}
	default:
		err = &NotSingularError{dope.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dq *DopeQuery) OnlyIDX(ctx context.Context) string {
	id, err := dq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Dopes.
func (dq *DopeQuery) All(ctx context.Context) ([]*Dope, error) {
	ctx = setContextOp(ctx, dq.ctx, "All")
	if err := dq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Dope, *DopeQuery]()
	return withInterceptors[[]*Dope](ctx, dq, qr, dq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dq *DopeQuery) AllX(ctx context.Context) []*Dope {
	nodes, err := dq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Dope IDs.
func (dq *DopeQuery) IDs(ctx context.Context) (ids []string, err error) {
	if dq.ctx.Unique == nil && dq.path != nil {
		dq.Unique(true)
	}
	ctx = setContextOp(ctx, dq.ctx, "IDs")
	if err = dq.Select(dope.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dq *DopeQuery) IDsX(ctx context.Context) []string {
	ids, err := dq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dq *DopeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dq.ctx, "Count")
	if err := dq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dq, querierCount[*DopeQuery](), dq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dq *DopeQuery) CountX(ctx context.Context) int {
	count, err := dq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dq *DopeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dq.ctx, "Exist")
	switch _, err := dq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dq *DopeQuery) ExistX(ctx context.Context) bool {
	exist, err := dq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DopeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dq *DopeQuery) Clone() *DopeQuery {
	if dq == nil {
		return nil
	}
	return &DopeQuery{
		config:     dq.config,
		ctx:        dq.ctx.Clone(),
		order:      append([]dope.OrderOption{}, dq.order...),
		inters:     append([]Interceptor{}, dq.inters...),
		predicates: append([]predicate.Dope{}, dq.predicates...),
		withWallet: dq.withWallet.Clone(),
		withItems:  dq.withItems.Clone(),
		withIndex:  dq.withIndex.Clone(),
		// clone intermediate query.
		sql:  dq.sql.Clone(),
		path: dq.path,
	}
}

// WithWallet tells the query-builder to eager-load the nodes that are connected to
// the "wallet" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DopeQuery) WithWallet(opts ...func(*WalletQuery)) *DopeQuery {
	query := (&WalletClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withWallet = query
	return dq
}

// WithItems tells the query-builder to eager-load the nodes that are connected to
// the "items" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DopeQuery) WithItems(opts ...func(*ItemQuery)) *DopeQuery {
	query := (&ItemClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withItems = query
	return dq
}

// WithIndex tells the query-builder to eager-load the nodes that are connected to
// the "index" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DopeQuery) WithIndex(opts ...func(*SearchQuery)) *DopeQuery {
	query := (&SearchClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withIndex = query
	return dq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Claimed bool `json:"claimed,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Dope.Query().
//		GroupBy(dope.FieldClaimed).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dq *DopeQuery) GroupBy(field string, fields ...string) *DopeGroupBy {
	dq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DopeGroupBy{build: dq}
	grbuild.flds = &dq.ctx.Fields
	grbuild.label = dope.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Claimed bool `json:"claimed,omitempty"`
//	}
//
//	client.Dope.Query().
//		Select(dope.FieldClaimed).
//		Scan(ctx, &v)
func (dq *DopeQuery) Select(fields ...string) *DopeSelect {
	dq.ctx.Fields = append(dq.ctx.Fields, fields...)
	sbuild := &DopeSelect{DopeQuery: dq}
	sbuild.label = dope.Label
	sbuild.flds, sbuild.scan = &dq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DopeSelect configured with the given aggregations.
func (dq *DopeQuery) Aggregate(fns ...AggregateFunc) *DopeSelect {
	return dq.Select().Aggregate(fns...)
}

func (dq *DopeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dq); err != nil {
				return err
			}
		}
	}
	for _, f := range dq.ctx.Fields {
		if !dope.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dq.path != nil {
		prev, err := dq.path(ctx)
		if err != nil {
			return err
		}
		dq.sql = prev
	}
	return nil
}

func (dq *DopeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Dope, error) {
	var (
		nodes       = []*Dope{}
		withFKs     = dq.withFKs
		_spec       = dq.querySpec()
		loadedTypes = [3]bool{
			dq.withWallet != nil,
			dq.withItems != nil,
			dq.withIndex != nil,
		}
	)
	if dq.withWallet != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, dope.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Dope).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Dope{config: dq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dq.modifiers) > 0 {
		_spec.Modifiers = dq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dq.withWallet; query != nil {
		if err := dq.loadWallet(ctx, query, nodes, nil,
			func(n *Dope, e *Wallet) { n.Edges.Wallet = e }); err != nil {
			return nil, err
		}
	}
	if query := dq.withItems; query != nil {
		if err := dq.loadItems(ctx, query, nodes,
			func(n *Dope) { n.Edges.Items = []*Item{} },
			func(n *Dope, e *Item) { n.Edges.Items = append(n.Edges.Items, e) }); err != nil {
			return nil, err
		}
	}
	if query := dq.withIndex; query != nil {
		if err := dq.loadIndex(ctx, query, nodes, nil,
			func(n *Dope, e *Search) { n.Edges.Index = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range dq.withNamedItems {
		if err := dq.loadItems(ctx, query, nodes,
			func(n *Dope) { n.appendNamedItems(name) },
			func(n *Dope, e *Item) { n.appendNamedItems(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range dq.loadTotal {
		if err := dq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dq *DopeQuery) loadWallet(ctx context.Context, query *WalletQuery, nodes []*Dope, init func(*Dope), assign func(*Dope, *Wallet)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Dope)
	for i := range nodes {
		if nodes[i].wallet_dopes == nil {
			continue
		}
		fk := *nodes[i].wallet_dopes
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(wallet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "wallet_dopes" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dq *DopeQuery) loadItems(ctx context.Context, query *ItemQuery, nodes []*Dope, init func(*Dope), assign func(*Dope, *Item)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Dope)
	nids := make(map[string]map[*Dope]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(dope.ItemsTable)
		s.Join(joinT).On(s.C(item.FieldID), joinT.C(dope.ItemsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(dope.ItemsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(dope.ItemsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Dope]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Item](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "items" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dq *DopeQuery) loadIndex(ctx context.Context, query *SearchQuery, nodes []*Dope, init func(*Dope), assign func(*Dope, *Search)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Dope)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Search(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(dope.IndexColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.dope_index
		if fk == nil {
			return fmt.Errorf(`foreign-key "dope_index" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "dope_index" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (dq *DopeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dq.querySpec()
	if len(dq.modifiers) > 0 {
		_spec.Modifiers = dq.modifiers
	}
	_spec.Node.Columns = dq.ctx.Fields
	if len(dq.ctx.Fields) > 0 {
		_spec.Unique = dq.ctx.Unique != nil && *dq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dq.driver, _spec)
}

func (dq *DopeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(dope.Table, dope.Columns, sqlgraph.NewFieldSpec(dope.FieldID, field.TypeString))
	_spec.From = dq.sql
	if unique := dq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dq.path != nil {
		_spec.Unique = true
	}
	if fields := dq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dope.FieldID)
		for i := range fields {
			if fields[i] != dope.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dq *DopeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dq.driver.Dialect())
	t1 := builder.Table(dope.Table)
	columns := dq.ctx.Fields
	if len(columns) == 0 {
		columns = dope.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dq.sql != nil {
		selector = dq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dq.ctx.Unique != nil && *dq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dq.predicates {
		p(selector)
	}
	for _, p := range dq.order {
		p(selector)
	}
	if offset := dq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedItems tells the query-builder to eager-load the nodes that are connected to the "items"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (dq *DopeQuery) WithNamedItems(name string, opts ...func(*ItemQuery)) *DopeQuery {
	query := (&ItemClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if dq.withNamedItems == nil {
		dq.withNamedItems = make(map[string]*ItemQuery)
	}
	dq.withNamedItems[name] = query
	return dq
}

// DopeGroupBy is the group-by builder for Dope entities.
type DopeGroupBy struct {
	selector
	build *DopeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dgb *DopeGroupBy) Aggregate(fns ...AggregateFunc) *DopeGroupBy {
	dgb.fns = append(dgb.fns, fns...)
	return dgb
}

// Scan applies the selector query and scans the result into the given value.
func (dgb *DopeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dgb.build.ctx, "GroupBy")
	if err := dgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DopeQuery, *DopeGroupBy](ctx, dgb.build, dgb, dgb.build.inters, v)
}

func (dgb *DopeGroupBy) sqlScan(ctx context.Context, root *DopeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dgb.fns))
	for _, fn := range dgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dgb.flds)+len(dgb.fns))
		for _, f := range *dgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DopeSelect is the builder for selecting fields of Dope entities.
type DopeSelect struct {
	*DopeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ds *DopeSelect) Aggregate(fns ...AggregateFunc) *DopeSelect {
	ds.fns = append(ds.fns, fns...)
	return ds
}

// Scan applies the selector query and scans the result into the given value.
func (ds *DopeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ds.ctx, "Select")
	if err := ds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DopeQuery, *DopeSelect](ctx, ds.DopeQuery, ds, ds.inters, v)
}

func (ds *DopeSelect) sqlScan(ctx context.Context, root *DopeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ds.fns))
	for _, fn := range ds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
