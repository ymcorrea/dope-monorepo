// Code generated by ent, DO NOT EDIT.

package search

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the search type in the database.
	Label = "search"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldGreatness holds the string denoting the greatness field in the database.
	FieldGreatness = "greatness"
	// FieldClaimed holds the string denoting the claimed field in the database.
	FieldClaimed = "claimed"
	// FieldOpened holds the string denoting the opened field in the database.
	FieldOpened = "opened"
	// FieldBanned holds the string denoting the banned field in the database.
	FieldBanned = "banned"
	// FieldSalePrice holds the string denoting the sale_price field in the database.
	FieldSalePrice = "sale_price"
	// EdgeDope holds the string denoting the dope edge name in mutations.
	EdgeDope = "dope"
	// EdgeItem holds the string denoting the item edge name in mutations.
	EdgeItem = "item"
	// EdgeHustler holds the string denoting the hustler edge name in mutations.
	EdgeHustler = "hustler"
	// Table holds the table name of the search in the database.
	Table = "search_index"
	// DopeTable is the table that holds the dope relation/edge.
	DopeTable = "search_index"
	// DopeInverseTable is the table name for the Dope entity.
	// It exists in this package in order to avoid circular dependency with the "dope" package.
	DopeInverseTable = "dopes"
	// DopeColumn is the table column denoting the dope relation/edge.
	DopeColumn = "dope_index"
	// ItemTable is the table that holds the item relation/edge.
	ItemTable = "search_index"
	// ItemInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	ItemInverseTable = "items"
	// ItemColumn is the table column denoting the item relation/edge.
	ItemColumn = "item_index"
	// HustlerTable is the table that holds the hustler relation/edge.
	HustlerTable = "search_index"
	// HustlerInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlerInverseTable = "hustlers"
	// HustlerColumn is the table column denoting the hustler relation/edge.
	HustlerColumn = "hustler_index"
)

// Columns holds all SQL columns for search fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldGreatness,
	FieldClaimed,
	FieldOpened,
	FieldBanned,
	FieldSalePrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "search_index"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"dope_index",
	"hustler_index",
	"item_index",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeDOPE    Type = "DOPE"
	TypeITEM    Type = "ITEM"
	TypeHUSTLER Type = "HUSTLER"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeDOPE, TypeITEM, TypeHUSTLER:
		return nil
	default:
		return fmt.Errorf("search: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Search queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByGreatness orders the results by the greatness field.
func ByGreatness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGreatness, opts...).ToFunc()
}

// ByClaimed orders the results by the claimed field.
func ByClaimed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimed, opts...).ToFunc()
}

// ByOpened orders the results by the opened field.
func ByOpened(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpened, opts...).ToFunc()
}

// ByBanned orders the results by the banned field.
func ByBanned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBanned, opts...).ToFunc()
}

// BySalePrice orders the results by the sale_price field.
func BySalePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalePrice, opts...).ToFunc()
}

// ByDopeField orders the results by dope field.
func ByDopeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDopeStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemField orders the results by item field.
func ByItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemStep(), sql.OrderByField(field, opts...))
	}
}

// ByHustlerField orders the results by hustler field.
func ByHustlerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlerStep(), sql.OrderByField(field, opts...))
	}
}
func newDopeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DopeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, DopeTable, DopeColumn),
	)
}
func newItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ItemTable, ItemColumn),
	)
}
func newHustlerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, HustlerTable, HustlerColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
