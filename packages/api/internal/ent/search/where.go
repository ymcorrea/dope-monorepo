// Code generated by ent, DO NOT EDIT.

package search

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Search {
	return predicate.Search(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Search {
	return predicate.Search(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Search {
	return predicate.Search(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Search {
	return predicate.Search(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Search {
	return predicate.Search(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Search {
	return predicate.Search(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Search {
	return predicate.Search(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Search {
	return predicate.Search(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Search {
	return predicate.Search(sql.FieldContainsFold(FieldID, id))
}

// Greatness applies equality check predicate on the "greatness" field. It's identical to GreatnessEQ.
func Greatness(v int) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldGreatness, v))
}

// Claimed applies equality check predicate on the "claimed" field. It's identical to ClaimedEQ.
func Claimed(v bool) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldClaimed, v))
}

// Opened applies equality check predicate on the "opened" field. It's identical to OpenedEQ.
func Opened(v bool) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldOpened, v))
}

// SaleActive applies equality check predicate on the "sale_active" field. It's identical to SaleActiveEQ.
func SaleActive(v bool) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldSaleActive, v))
}

// SalePrice applies equality check predicate on the "sale_price" field. It's identical to SalePriceEQ.
func SalePrice(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldSalePrice, v))
}

// LastSalePrice applies equality check predicate on the "last_sale_price" field. It's identical to LastSalePriceEQ.
func LastSalePrice(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldLastSalePrice, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Search {
	return predicate.Search(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Search {
	return predicate.Search(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Search {
	return predicate.Search(sql.FieldNotIn(FieldType, vs...))
}

// GreatnessEQ applies the EQ predicate on the "greatness" field.
func GreatnessEQ(v int) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldGreatness, v))
}

// GreatnessNEQ applies the NEQ predicate on the "greatness" field.
func GreatnessNEQ(v int) predicate.Search {
	return predicate.Search(sql.FieldNEQ(FieldGreatness, v))
}

// GreatnessIn applies the In predicate on the "greatness" field.
func GreatnessIn(vs ...int) predicate.Search {
	return predicate.Search(sql.FieldIn(FieldGreatness, vs...))
}

// GreatnessNotIn applies the NotIn predicate on the "greatness" field.
func GreatnessNotIn(vs ...int) predicate.Search {
	return predicate.Search(sql.FieldNotIn(FieldGreatness, vs...))
}

// GreatnessGT applies the GT predicate on the "greatness" field.
func GreatnessGT(v int) predicate.Search {
	return predicate.Search(sql.FieldGT(FieldGreatness, v))
}

// GreatnessGTE applies the GTE predicate on the "greatness" field.
func GreatnessGTE(v int) predicate.Search {
	return predicate.Search(sql.FieldGTE(FieldGreatness, v))
}

// GreatnessLT applies the LT predicate on the "greatness" field.
func GreatnessLT(v int) predicate.Search {
	return predicate.Search(sql.FieldLT(FieldGreatness, v))
}

// GreatnessLTE applies the LTE predicate on the "greatness" field.
func GreatnessLTE(v int) predicate.Search {
	return predicate.Search(sql.FieldLTE(FieldGreatness, v))
}

// GreatnessIsNil applies the IsNil predicate on the "greatness" field.
func GreatnessIsNil() predicate.Search {
	return predicate.Search(sql.FieldIsNull(FieldGreatness))
}

// GreatnessNotNil applies the NotNil predicate on the "greatness" field.
func GreatnessNotNil() predicate.Search {
	return predicate.Search(sql.FieldNotNull(FieldGreatness))
}

// ClaimedEQ applies the EQ predicate on the "claimed" field.
func ClaimedEQ(v bool) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldClaimed, v))
}

// ClaimedNEQ applies the NEQ predicate on the "claimed" field.
func ClaimedNEQ(v bool) predicate.Search {
	return predicate.Search(sql.FieldNEQ(FieldClaimed, v))
}

// OpenedEQ applies the EQ predicate on the "opened" field.
func OpenedEQ(v bool) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldOpened, v))
}

// OpenedNEQ applies the NEQ predicate on the "opened" field.
func OpenedNEQ(v bool) predicate.Search {
	return predicate.Search(sql.FieldNEQ(FieldOpened, v))
}

// SaleActiveEQ applies the EQ predicate on the "sale_active" field.
func SaleActiveEQ(v bool) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldSaleActive, v))
}

// SaleActiveNEQ applies the NEQ predicate on the "sale_active" field.
func SaleActiveNEQ(v bool) predicate.Search {
	return predicate.Search(sql.FieldNEQ(FieldSaleActive, v))
}

// SalePriceEQ applies the EQ predicate on the "sale_price" field.
func SalePriceEQ(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldSalePrice, v))
}

// SalePriceNEQ applies the NEQ predicate on the "sale_price" field.
func SalePriceNEQ(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldNEQ(FieldSalePrice, v))
}

// SalePriceIn applies the In predicate on the "sale_price" field.
func SalePriceIn(vs ...schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldIn(FieldSalePrice, vs...))
}

// SalePriceNotIn applies the NotIn predicate on the "sale_price" field.
func SalePriceNotIn(vs ...schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldNotIn(FieldSalePrice, vs...))
}

// SalePriceGT applies the GT predicate on the "sale_price" field.
func SalePriceGT(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldGT(FieldSalePrice, v))
}

// SalePriceGTE applies the GTE predicate on the "sale_price" field.
func SalePriceGTE(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldGTE(FieldSalePrice, v))
}

// SalePriceLT applies the LT predicate on the "sale_price" field.
func SalePriceLT(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldLT(FieldSalePrice, v))
}

// SalePriceLTE applies the LTE predicate on the "sale_price" field.
func SalePriceLTE(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldLTE(FieldSalePrice, v))
}

// LastSalePriceEQ applies the EQ predicate on the "last_sale_price" field.
func LastSalePriceEQ(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldEQ(FieldLastSalePrice, v))
}

// LastSalePriceNEQ applies the NEQ predicate on the "last_sale_price" field.
func LastSalePriceNEQ(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldNEQ(FieldLastSalePrice, v))
}

// LastSalePriceIn applies the In predicate on the "last_sale_price" field.
func LastSalePriceIn(vs ...schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldIn(FieldLastSalePrice, vs...))
}

// LastSalePriceNotIn applies the NotIn predicate on the "last_sale_price" field.
func LastSalePriceNotIn(vs ...schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldNotIn(FieldLastSalePrice, vs...))
}

// LastSalePriceGT applies the GT predicate on the "last_sale_price" field.
func LastSalePriceGT(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldGT(FieldLastSalePrice, v))
}

// LastSalePriceGTE applies the GTE predicate on the "last_sale_price" field.
func LastSalePriceGTE(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldGTE(FieldLastSalePrice, v))
}

// LastSalePriceLT applies the LT predicate on the "last_sale_price" field.
func LastSalePriceLT(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldLT(FieldLastSalePrice, v))
}

// LastSalePriceLTE applies the LTE predicate on the "last_sale_price" field.
func LastSalePriceLTE(v schema.BigInt) predicate.Search {
	return predicate.Search(sql.FieldLTE(FieldLastSalePrice, v))
}

// HasDope applies the HasEdge predicate on the "dope" edge.
func HasDope() predicate.Search {
	return predicate.Search(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DopeTable, DopeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDopeWith applies the HasEdge predicate on the "dope" edge with a given conditions (other predicates).
func HasDopeWith(preds ...predicate.Dope) predicate.Search {
	return predicate.Search(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DopeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DopeTable, DopeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItem applies the HasEdge predicate on the "item" edge.
func HasItem() predicate.Search {
	return predicate.Search(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ItemTable, ItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemWith applies the HasEdge predicate on the "item" edge with a given conditions (other predicates).
func HasItemWith(preds ...predicate.Item) predicate.Search {
	return predicate.Search(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ItemTable, ItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustler applies the HasEdge predicate on the "hustler" edge.
func HasHustler() predicate.Search {
	return predicate.Search(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, HustlerTable, HustlerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerWith applies the HasEdge predicate on the "hustler" edge with a given conditions (other predicates).
func HasHustlerWith(preds ...predicate.Hustler) predicate.Search {
	return predicate.Search(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HustlerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, HustlerTable, HustlerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Search) predicate.Search {
	return predicate.Search(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Search) predicate.Search {
	return predicate.Search(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Search) predicate.Search {
	return predicate.Search(func(s *sql.Selector) {
		p(s.Not())
	})
}
