// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/search"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/wallet"
)

// Dope is the model entity for the Dope schema.
type Dope struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Claimed holds the value of the "claimed" field.
	Claimed bool `json:"claimed,omitempty"`
	// LastCheckedPaperClaim holds the value of the "last_checked_paper_claim" field.
	LastCheckedPaperClaim time.Time `json:"last_checked_paper_claim,omitempty"`
	// Opened holds the value of the "opened" field.
	Opened bool `json:"opened,omitempty"`
	// LastCheckedGearClaim holds the value of the "last_checked_gear_claim" field.
	LastCheckedGearClaim time.Time `json:"last_checked_gear_claim,omitempty"`
	// Score holds the value of the "score" field.
	Score int `json:"score,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// BestAskPriceEth holds the value of the "best_ask_price_eth" field.
	BestAskPriceEth float64 `json:"best_ask_price_eth,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DopeQuery when eager-loading is set.
	Edges        DopeEdges `json:"edges"`
	wallet_dopes *string
	selectValues sql.SelectValues
}

// DopeEdges holds the relations/edges for other nodes in the graph.
type DopeEdges struct {
	// Wallet holds the value of the wallet edge.
	Wallet *Wallet `json:"wallet,omitempty"`
	// Items holds the value of the items edge.
	Items []*Item `json:"items,omitempty"`
	// Index holds the value of the index edge.
	Index *Search `json:"index,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedItems map[string][]*Item
}

// WalletOrErr returns the Wallet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DopeEdges) WalletOrErr() (*Wallet, error) {
	if e.loadedTypes[0] {
		if e.Wallet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: wallet.Label}
		}
		return e.Wallet, nil
	}
	return nil, &NotLoadedError{edge: "wallet"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e DopeEdges) ItemsOrErr() ([]*Item, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// IndexOrErr returns the Index value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DopeEdges) IndexOrErr() (*Search, error) {
	if e.loadedTypes[2] {
		if e.Index == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: search.Label}
		}
		return e.Index, nil
	}
	return nil, &NotLoadedError{edge: "index"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dope) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dope.FieldClaimed, dope.FieldOpened:
			values[i] = new(sql.NullBool)
		case dope.FieldBestAskPriceEth:
			values[i] = new(sql.NullFloat64)
		case dope.FieldScore, dope.FieldRank, dope.FieldOrder:
			values[i] = new(sql.NullInt64)
		case dope.FieldID:
			values[i] = new(sql.NullString)
		case dope.FieldLastCheckedPaperClaim, dope.FieldLastCheckedGearClaim:
			values[i] = new(sql.NullTime)
		case dope.ForeignKeys[0]: // wallet_dopes
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dope fields.
func (d *Dope) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dope.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = value.String
			}
		case dope.FieldClaimed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field claimed", values[i])
			} else if value.Valid {
				d.Claimed = value.Bool
			}
		case dope.FieldLastCheckedPaperClaim:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_checked_paper_claim", values[i])
			} else if value.Valid {
				d.LastCheckedPaperClaim = value.Time
			}
		case dope.FieldOpened:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field opened", values[i])
			} else if value.Valid {
				d.Opened = value.Bool
			}
		case dope.FieldLastCheckedGearClaim:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_checked_gear_claim", values[i])
			} else if value.Valid {
				d.LastCheckedGearClaim = value.Time
			}
		case dope.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				d.Score = int(value.Int64)
			}
		case dope.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				d.Rank = int(value.Int64)
			}
		case dope.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				d.Order = int(value.Int64)
			}
		case dope.FieldBestAskPriceEth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field best_ask_price_eth", values[i])
			} else if value.Valid {
				d.BestAskPriceEth = value.Float64
			}
		case dope.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_dopes", values[i])
			} else if value.Valid {
				d.wallet_dopes = new(string)
				*d.wallet_dopes = value.String
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Dope.
// This includes values selected through modifiers, order, etc.
func (d *Dope) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryWallet queries the "wallet" edge of the Dope entity.
func (d *Dope) QueryWallet() *WalletQuery {
	return NewDopeClient(d.config).QueryWallet(d)
}

// QueryItems queries the "items" edge of the Dope entity.
func (d *Dope) QueryItems() *ItemQuery {
	return NewDopeClient(d.config).QueryItems(d)
}

// QueryIndex queries the "index" edge of the Dope entity.
func (d *Dope) QueryIndex() *SearchQuery {
	return NewDopeClient(d.config).QueryIndex(d)
}

// Update returns a builder for updating this Dope.
// Note that you need to call Dope.Unwrap() before calling this method if this Dope
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dope) Update() *DopeUpdateOne {
	return NewDopeClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dope entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dope) Unwrap() *Dope {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dope is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dope) String() string {
	var builder strings.Builder
	builder.WriteString("Dope(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("claimed=")
	builder.WriteString(fmt.Sprintf("%v", d.Claimed))
	builder.WriteString(", ")
	builder.WriteString("last_checked_paper_claim=")
	builder.WriteString(d.LastCheckedPaperClaim.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("opened=")
	builder.WriteString(fmt.Sprintf("%v", d.Opened))
	builder.WriteString(", ")
	builder.WriteString("last_checked_gear_claim=")
	builder.WriteString(d.LastCheckedGearClaim.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", d.Score))
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", d.Rank))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", d.Order))
	builder.WriteString(", ")
	builder.WriteString("best_ask_price_eth=")
	builder.WriteString(fmt.Sprintf("%v", d.BestAskPriceEth))
	builder.WriteByte(')')
	return builder.String()
}

// NamedItems returns the Items named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *Dope) NamedItems(name string) ([]*Item, error) {
	if d.Edges.namedItems == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedItems[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *Dope) appendNamedItems(name string, edges ...*Item) {
	if d.Edges.namedItems == nil {
		d.Edges.namedItems = make(map[string][]*Item)
	}
	if len(edges) == 0 {
		d.Edges.namedItems[name] = []*Item{}
	} else {
		d.Edges.namedItems[name] = append(d.Edges.namedItems[name], edges...)
	}
}

// Dopes is a parsable slice of Dope.
type Dopes []*Dope
