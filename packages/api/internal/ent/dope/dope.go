// Code generated by ent, DO NOT EDIT.

package dope

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dope type in the database.
	Label = "dope"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClaimed holds the string denoting the claimed field in the database.
	FieldClaimed = "claimed"
	// FieldLastCheckedPaperClaim holds the string denoting the last_checked_paper_claim field in the database.
	FieldLastCheckedPaperClaim = "last_checked_paper_claim"
	// FieldOpened holds the string denoting the opened field in the database.
	FieldOpened = "opened"
	// FieldLastCheckedGearClaim holds the string denoting the last_checked_gear_claim field in the database.
	FieldLastCheckedGearClaim = "last_checked_gear_claim"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldBestAskPriceEth holds the string denoting the best_ask_price_eth field in the database.
	FieldBestAskPriceEth = "best_ask_price_eth"
	// EdgeWallet holds the string denoting the wallet edge name in mutations.
	EdgeWallet = "wallet"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeIndex holds the string denoting the index edge name in mutations.
	EdgeIndex = "index"
	// Table holds the table name of the dope in the database.
	Table = "dopes"
	// WalletTable is the table that holds the wallet relation/edge.
	WalletTable = "dopes"
	// WalletInverseTable is the table name for the Wallet entity.
	// It exists in this package in order to avoid circular dependency with the "wallet" package.
	WalletInverseTable = "wallets"
	// WalletColumn is the table column denoting the wallet relation/edge.
	WalletColumn = "wallet_dopes"
	// ItemsTable is the table that holds the items relation/edge. The primary key declared below.
	ItemsTable = "dope_items"
	// ItemsInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	ItemsInverseTable = "items"
	// IndexTable is the table that holds the index relation/edge.
	IndexTable = "search_index"
	// IndexInverseTable is the table name for the Search entity.
	// It exists in this package in order to avoid circular dependency with the "search" package.
	IndexInverseTable = "search_index"
	// IndexColumn is the table column denoting the index relation/edge.
	IndexColumn = "dope_index"
)

// Columns holds all SQL columns for dope fields.
var Columns = []string{
	FieldID,
	FieldClaimed,
	FieldLastCheckedPaperClaim,
	FieldOpened,
	FieldLastCheckedGearClaim,
	FieldScore,
	FieldRank,
	FieldOrder,
	FieldBestAskPriceEth,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "dopes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"wallet_dopes",
}

var (
	// ItemsPrimaryKey and ItemsColumn2 are the table columns denoting the
	// primary key for the items relation (M2M).
	ItemsPrimaryKey = []string{"dope_id", "item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultClaimed holds the default value on creation for the "claimed" field.
	DefaultClaimed bool
	// DefaultOpened holds the default value on creation for the "opened" field.
	DefaultOpened bool
)

// OrderOption defines the ordering options for the Dope queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClaimed orders the results by the claimed field.
func ByClaimed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimed, opts...).ToFunc()
}

// ByLastCheckedPaperClaim orders the results by the last_checked_paper_claim field.
func ByLastCheckedPaperClaim(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastCheckedPaperClaim, opts...).ToFunc()
}

// ByOpened orders the results by the opened field.
func ByOpened(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpened, opts...).ToFunc()
}

// ByLastCheckedGearClaim orders the results by the last_checked_gear_claim field.
func ByLastCheckedGearClaim(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastCheckedGearClaim, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByBestAskPriceEth orders the results by the best_ask_price_eth field.
func ByBestAskPriceEth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBestAskPriceEth, opts...).ToFunc()
}

// ByWalletField orders the results by wallet field.
func ByWalletField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWalletStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIndexField orders the results by index field.
func ByIndexField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIndexStep(), sql.OrderByField(field, opts...))
	}
}
func newWalletStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WalletInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WalletTable, WalletColumn),
	)
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ItemsTable, ItemsPrimaryKey...),
	)
}
func newIndexStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IndexInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, IndexTable, IndexColumn),
	)
}
