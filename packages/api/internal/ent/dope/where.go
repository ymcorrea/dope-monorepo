// Code generated by ent, DO NOT EDIT.

package dope

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Dope {
	return predicate.Dope(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Dope {
	return predicate.Dope(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Dope {
	return predicate.Dope(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Dope {
	return predicate.Dope(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Dope {
	return predicate.Dope(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Dope {
	return predicate.Dope(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Dope {
	return predicate.Dope(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Dope {
	return predicate.Dope(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Dope {
	return predicate.Dope(sql.FieldContainsFold(FieldID, id))
}

// Claimed applies equality check predicate on the "claimed" field. It's identical to ClaimedEQ.
func Claimed(v bool) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldClaimed, v))
}

// LastCheckedPaperClaim applies equality check predicate on the "last_checked_paper_claim" field. It's identical to LastCheckedPaperClaimEQ.
func LastCheckedPaperClaim(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldLastCheckedPaperClaim, v))
}

// Opened applies equality check predicate on the "opened" field. It's identical to OpenedEQ.
func Opened(v bool) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldOpened, v))
}

// LastCheckedGearClaim applies equality check predicate on the "last_checked_gear_claim" field. It's identical to LastCheckedGearClaimEQ.
func LastCheckedGearClaim(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldLastCheckedGearClaim, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldScore, v))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldRank, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldOrder, v))
}

// BestAskPriceEth applies equality check predicate on the "best_ask_price_eth" field. It's identical to BestAskPriceEthEQ.
func BestAskPriceEth(v float64) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldBestAskPriceEth, v))
}

// ClaimedEQ applies the EQ predicate on the "claimed" field.
func ClaimedEQ(v bool) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldClaimed, v))
}

// ClaimedNEQ applies the NEQ predicate on the "claimed" field.
func ClaimedNEQ(v bool) predicate.Dope {
	return predicate.Dope(sql.FieldNEQ(FieldClaimed, v))
}

// LastCheckedPaperClaimEQ applies the EQ predicate on the "last_checked_paper_claim" field.
func LastCheckedPaperClaimEQ(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldLastCheckedPaperClaim, v))
}

// LastCheckedPaperClaimNEQ applies the NEQ predicate on the "last_checked_paper_claim" field.
func LastCheckedPaperClaimNEQ(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldNEQ(FieldLastCheckedPaperClaim, v))
}

// LastCheckedPaperClaimIn applies the In predicate on the "last_checked_paper_claim" field.
func LastCheckedPaperClaimIn(vs ...time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldIn(FieldLastCheckedPaperClaim, vs...))
}

// LastCheckedPaperClaimNotIn applies the NotIn predicate on the "last_checked_paper_claim" field.
func LastCheckedPaperClaimNotIn(vs ...time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldNotIn(FieldLastCheckedPaperClaim, vs...))
}

// LastCheckedPaperClaimGT applies the GT predicate on the "last_checked_paper_claim" field.
func LastCheckedPaperClaimGT(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldGT(FieldLastCheckedPaperClaim, v))
}

// LastCheckedPaperClaimGTE applies the GTE predicate on the "last_checked_paper_claim" field.
func LastCheckedPaperClaimGTE(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldGTE(FieldLastCheckedPaperClaim, v))
}

// LastCheckedPaperClaimLT applies the LT predicate on the "last_checked_paper_claim" field.
func LastCheckedPaperClaimLT(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldLT(FieldLastCheckedPaperClaim, v))
}

// LastCheckedPaperClaimLTE applies the LTE predicate on the "last_checked_paper_claim" field.
func LastCheckedPaperClaimLTE(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldLTE(FieldLastCheckedPaperClaim, v))
}

// LastCheckedPaperClaimIsNil applies the IsNil predicate on the "last_checked_paper_claim" field.
func LastCheckedPaperClaimIsNil() predicate.Dope {
	return predicate.Dope(sql.FieldIsNull(FieldLastCheckedPaperClaim))
}

// LastCheckedPaperClaimNotNil applies the NotNil predicate on the "last_checked_paper_claim" field.
func LastCheckedPaperClaimNotNil() predicate.Dope {
	return predicate.Dope(sql.FieldNotNull(FieldLastCheckedPaperClaim))
}

// OpenedEQ applies the EQ predicate on the "opened" field.
func OpenedEQ(v bool) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldOpened, v))
}

// OpenedNEQ applies the NEQ predicate on the "opened" field.
func OpenedNEQ(v bool) predicate.Dope {
	return predicate.Dope(sql.FieldNEQ(FieldOpened, v))
}

// LastCheckedGearClaimEQ applies the EQ predicate on the "last_checked_gear_claim" field.
func LastCheckedGearClaimEQ(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldLastCheckedGearClaim, v))
}

// LastCheckedGearClaimNEQ applies the NEQ predicate on the "last_checked_gear_claim" field.
func LastCheckedGearClaimNEQ(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldNEQ(FieldLastCheckedGearClaim, v))
}

// LastCheckedGearClaimIn applies the In predicate on the "last_checked_gear_claim" field.
func LastCheckedGearClaimIn(vs ...time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldIn(FieldLastCheckedGearClaim, vs...))
}

// LastCheckedGearClaimNotIn applies the NotIn predicate on the "last_checked_gear_claim" field.
func LastCheckedGearClaimNotIn(vs ...time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldNotIn(FieldLastCheckedGearClaim, vs...))
}

// LastCheckedGearClaimGT applies the GT predicate on the "last_checked_gear_claim" field.
func LastCheckedGearClaimGT(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldGT(FieldLastCheckedGearClaim, v))
}

// LastCheckedGearClaimGTE applies the GTE predicate on the "last_checked_gear_claim" field.
func LastCheckedGearClaimGTE(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldGTE(FieldLastCheckedGearClaim, v))
}

// LastCheckedGearClaimLT applies the LT predicate on the "last_checked_gear_claim" field.
func LastCheckedGearClaimLT(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldLT(FieldLastCheckedGearClaim, v))
}

// LastCheckedGearClaimLTE applies the LTE predicate on the "last_checked_gear_claim" field.
func LastCheckedGearClaimLTE(v time.Time) predicate.Dope {
	return predicate.Dope(sql.FieldLTE(FieldLastCheckedGearClaim, v))
}

// LastCheckedGearClaimIsNil applies the IsNil predicate on the "last_checked_gear_claim" field.
func LastCheckedGearClaimIsNil() predicate.Dope {
	return predicate.Dope(sql.FieldIsNull(FieldLastCheckedGearClaim))
}

// LastCheckedGearClaimNotNil applies the NotNil predicate on the "last_checked_gear_claim" field.
func LastCheckedGearClaimNotNil() predicate.Dope {
	return predicate.Dope(sql.FieldNotNull(FieldLastCheckedGearClaim))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.Dope {
	return predicate.Dope(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.Dope {
	return predicate.Dope(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.Dope {
	return predicate.Dope(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.Dope {
	return predicate.Dope(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.Dope {
	return predicate.Dope(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.Dope {
	return predicate.Dope(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.Dope {
	return predicate.Dope(sql.FieldLTE(FieldScore, v))
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.Dope {
	return predicate.Dope(sql.FieldIsNull(FieldScore))
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.Dope {
	return predicate.Dope(sql.FieldNotNull(FieldScore))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.Dope {
	return predicate.Dope(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.Dope {
	return predicate.Dope(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.Dope {
	return predicate.Dope(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.Dope {
	return predicate.Dope(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.Dope {
	return predicate.Dope(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.Dope {
	return predicate.Dope(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.Dope {
	return predicate.Dope(sql.FieldLTE(FieldRank, v))
}

// RankIsNil applies the IsNil predicate on the "rank" field.
func RankIsNil() predicate.Dope {
	return predicate.Dope(sql.FieldIsNull(FieldRank))
}

// RankNotNil applies the NotNil predicate on the "rank" field.
func RankNotNil() predicate.Dope {
	return predicate.Dope(sql.FieldNotNull(FieldRank))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.Dope {
	return predicate.Dope(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.Dope {
	return predicate.Dope(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.Dope {
	return predicate.Dope(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.Dope {
	return predicate.Dope(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.Dope {
	return predicate.Dope(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.Dope {
	return predicate.Dope(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.Dope {
	return predicate.Dope(sql.FieldLTE(FieldOrder, v))
}

// BestAskPriceEthEQ applies the EQ predicate on the "best_ask_price_eth" field.
func BestAskPriceEthEQ(v float64) predicate.Dope {
	return predicate.Dope(sql.FieldEQ(FieldBestAskPriceEth, v))
}

// BestAskPriceEthNEQ applies the NEQ predicate on the "best_ask_price_eth" field.
func BestAskPriceEthNEQ(v float64) predicate.Dope {
	return predicate.Dope(sql.FieldNEQ(FieldBestAskPriceEth, v))
}

// BestAskPriceEthIn applies the In predicate on the "best_ask_price_eth" field.
func BestAskPriceEthIn(vs ...float64) predicate.Dope {
	return predicate.Dope(sql.FieldIn(FieldBestAskPriceEth, vs...))
}

// BestAskPriceEthNotIn applies the NotIn predicate on the "best_ask_price_eth" field.
func BestAskPriceEthNotIn(vs ...float64) predicate.Dope {
	return predicate.Dope(sql.FieldNotIn(FieldBestAskPriceEth, vs...))
}

// BestAskPriceEthGT applies the GT predicate on the "best_ask_price_eth" field.
func BestAskPriceEthGT(v float64) predicate.Dope {
	return predicate.Dope(sql.FieldGT(FieldBestAskPriceEth, v))
}

// BestAskPriceEthGTE applies the GTE predicate on the "best_ask_price_eth" field.
func BestAskPriceEthGTE(v float64) predicate.Dope {
	return predicate.Dope(sql.FieldGTE(FieldBestAskPriceEth, v))
}

// BestAskPriceEthLT applies the LT predicate on the "best_ask_price_eth" field.
func BestAskPriceEthLT(v float64) predicate.Dope {
	return predicate.Dope(sql.FieldLT(FieldBestAskPriceEth, v))
}

// BestAskPriceEthLTE applies the LTE predicate on the "best_ask_price_eth" field.
func BestAskPriceEthLTE(v float64) predicate.Dope {
	return predicate.Dope(sql.FieldLTE(FieldBestAskPriceEth, v))
}

// BestAskPriceEthIsNil applies the IsNil predicate on the "best_ask_price_eth" field.
func BestAskPriceEthIsNil() predicate.Dope {
	return predicate.Dope(sql.FieldIsNull(FieldBestAskPriceEth))
}

// BestAskPriceEthNotNil applies the NotNil predicate on the "best_ask_price_eth" field.
func BestAskPriceEthNotNil() predicate.Dope {
	return predicate.Dope(sql.FieldNotNull(FieldBestAskPriceEth))
}

// HasWallet applies the HasEdge predicate on the "wallet" edge.
func HasWallet() predicate.Dope {
	return predicate.Dope(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WalletTable, WalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWalletWith applies the HasEdge predicate on the "wallet" edge with a given conditions (other predicates).
func HasWalletWith(preds ...predicate.Wallet) predicate.Dope {
	return predicate.Dope(func(s *sql.Selector) {
		step := newWalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Dope {
	return predicate.Dope(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ItemsTable, ItemsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.Item) predicate.Dope {
	return predicate.Dope(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIndex applies the HasEdge predicate on the "index" edge.
func HasIndex() predicate.Dope {
	return predicate.Dope(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, IndexTable, IndexColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIndexWith applies the HasEdge predicate on the "index" edge with a given conditions (other predicates).
func HasIndexWith(preds ...predicate.Search) predicate.Dope {
	return predicate.Dope(func(s *sql.Selector) {
		step := newIndexStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dope) predicate.Dope {
	return predicate.Dope(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dope) predicate.Dope {
	return predicate.Dope(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dope) predicate.Dope {
	return predicate.Dope(sql.NotPredicates(p))
}
