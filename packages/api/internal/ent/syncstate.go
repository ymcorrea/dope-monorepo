// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/syncstate"
)

// SyncState is the model entity for the SyncState schema.
type SyncState struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ContractName holds the value of the "contract_name" field.
	ContractName string `json:"contract_name,omitempty"`
	// StartBlock holds the value of the "start_block" field.
	StartBlock uint64 `json:"start_block,omitempty"`
	// BlockTime holds the value of the "block_time" field.
	BlockTime time.Time `json:"block_time,omitempty"`
	// LastSyncedAt holds the value of the "last_synced_at" field.
	LastSyncedAt time.Time `json:"last_synced_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SyncState) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case syncstate.FieldStartBlock:
			values[i] = new(sql.NullInt64)
		case syncstate.FieldID, syncstate.FieldContractName:
			values[i] = new(sql.NullString)
		case syncstate.FieldBlockTime, syncstate.FieldLastSyncedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SyncState fields.
func (ss *SyncState) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syncstate.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ss.ID = value.String
			}
		case syncstate.FieldContractName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_name", values[i])
			} else if value.Valid {
				ss.ContractName = value.String
			}
		case syncstate.FieldStartBlock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_block", values[i])
			} else if value.Valid {
				ss.StartBlock = uint64(value.Int64)
			}
		case syncstate.FieldBlockTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field block_time", values[i])
			} else if value.Valid {
				ss.BlockTime = value.Time
			}
		case syncstate.FieldLastSyncedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_synced_at", values[i])
			} else if value.Valid {
				ss.LastSyncedAt = value.Time
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SyncState.
// This includes values selected through modifiers, order, etc.
func (ss *SyncState) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// Update returns a builder for updating this SyncState.
// Note that you need to call SyncState.Unwrap() before calling this method if this SyncState
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SyncState) Update() *SyncStateUpdateOne {
	return NewSyncStateClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SyncState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SyncState) Unwrap() *SyncState {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SyncState is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SyncState) String() string {
	var builder strings.Builder
	builder.WriteString("SyncState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("contract_name=")
	builder.WriteString(ss.ContractName)
	builder.WriteString(", ")
	builder.WriteString("start_block=")
	builder.WriteString(fmt.Sprintf("%v", ss.StartBlock))
	builder.WriteString(", ")
	builder.WriteString("block_time=")
	builder.WriteString(ss.BlockTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_synced_at=")
	builder.WriteString(ss.LastSyncedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SyncStates is a parsable slice of SyncState.
type SyncStates []*SyncState
