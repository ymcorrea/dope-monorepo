// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustleritem"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustlerquest"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustlerrelation"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// GameHustlerQuery is the builder for querying GameHustler entities.
type GameHustlerQuery struct {
	config
	ctx                *QueryContext
	order              []gamehustler.OrderOption
	inters             []Interceptor
	predicates         []predicate.GameHustler
	withRelations      *GameHustlerRelationQuery
	withItems          *GameHustlerItemQuery
	withQuests         *GameHustlerQuestQuery
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*GameHustler) error
	withNamedRelations map[string]*GameHustlerRelationQuery
	withNamedItems     map[string]*GameHustlerItemQuery
	withNamedQuests    map[string]*GameHustlerQuestQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameHustlerQuery builder.
func (ghq *GameHustlerQuery) Where(ps ...predicate.GameHustler) *GameHustlerQuery {
	ghq.predicates = append(ghq.predicates, ps...)
	return ghq
}

// Limit the number of records to be returned by this query.
func (ghq *GameHustlerQuery) Limit(limit int) *GameHustlerQuery {
	ghq.ctx.Limit = &limit
	return ghq
}

// Offset to start from.
func (ghq *GameHustlerQuery) Offset(offset int) *GameHustlerQuery {
	ghq.ctx.Offset = &offset
	return ghq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ghq *GameHustlerQuery) Unique(unique bool) *GameHustlerQuery {
	ghq.ctx.Unique = &unique
	return ghq
}

// Order specifies how the records should be ordered.
func (ghq *GameHustlerQuery) Order(o ...gamehustler.OrderOption) *GameHustlerQuery {
	ghq.order = append(ghq.order, o...)
	return ghq
}

// QueryRelations chains the current query on the "relations" edge.
func (ghq *GameHustlerQuery) QueryRelations() *GameHustlerRelationQuery {
	query := (&GameHustlerRelationClient{config: ghq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ghq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ghq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamehustler.Table, gamehustler.FieldID, selector),
			sqlgraph.To(gamehustlerrelation.Table, gamehustlerrelation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gamehustler.RelationsTable, gamehustler.RelationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ghq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItems chains the current query on the "items" edge.
func (ghq *GameHustlerQuery) QueryItems() *GameHustlerItemQuery {
	query := (&GameHustlerItemClient{config: ghq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ghq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ghq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamehustler.Table, gamehustler.FieldID, selector),
			sqlgraph.To(gamehustleritem.Table, gamehustleritem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gamehustler.ItemsTable, gamehustler.ItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ghq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuests chains the current query on the "quests" edge.
func (ghq *GameHustlerQuery) QueryQuests() *GameHustlerQuestQuery {
	query := (&GameHustlerQuestClient{config: ghq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ghq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ghq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamehustler.Table, gamehustler.FieldID, selector),
			sqlgraph.To(gamehustlerquest.Table, gamehustlerquest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gamehustler.QuestsTable, gamehustler.QuestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ghq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameHustler entity from the query.
// Returns a *NotFoundError when no GameHustler was found.
func (ghq *GameHustlerQuery) First(ctx context.Context) (*GameHustler, error) {
	nodes, err := ghq.Limit(1).All(setContextOp(ctx, ghq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gamehustler.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ghq *GameHustlerQuery) FirstX(ctx context.Context) *GameHustler {
	node, err := ghq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameHustler ID from the query.
// Returns a *NotFoundError when no GameHustler ID was found.
func (ghq *GameHustlerQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ghq.Limit(1).IDs(setContextOp(ctx, ghq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gamehustler.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ghq *GameHustlerQuery) FirstIDX(ctx context.Context) string {
	id, err := ghq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameHustler entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameHustler entity is found.
// Returns a *NotFoundError when no GameHustler entities are found.
func (ghq *GameHustlerQuery) Only(ctx context.Context) (*GameHustler, error) {
	nodes, err := ghq.Limit(2).All(setContextOp(ctx, ghq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gamehustler.Label}
	default:
		return nil, &NotSingularError{gamehustler.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ghq *GameHustlerQuery) OnlyX(ctx context.Context) *GameHustler {
	node, err := ghq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameHustler ID in the query.
// Returns a *NotSingularError when more than one GameHustler ID is found.
// Returns a *NotFoundError when no entities are found.
func (ghq *GameHustlerQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ghq.Limit(2).IDs(setContextOp(ctx, ghq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gamehustler.Label}
	default:
		err = &NotSingularError{gamehustler.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ghq *GameHustlerQuery) OnlyIDX(ctx context.Context) string {
	id, err := ghq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameHustlers.
func (ghq *GameHustlerQuery) All(ctx context.Context) ([]*GameHustler, error) {
	ctx = setContextOp(ctx, ghq.ctx, "All")
	if err := ghq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GameHustler, *GameHustlerQuery]()
	return withInterceptors[[]*GameHustler](ctx, ghq, qr, ghq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ghq *GameHustlerQuery) AllX(ctx context.Context) []*GameHustler {
	nodes, err := ghq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameHustler IDs.
func (ghq *GameHustlerQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ghq.ctx.Unique == nil && ghq.path != nil {
		ghq.Unique(true)
	}
	ctx = setContextOp(ctx, ghq.ctx, "IDs")
	if err = ghq.Select(gamehustler.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ghq *GameHustlerQuery) IDsX(ctx context.Context) []string {
	ids, err := ghq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ghq *GameHustlerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ghq.ctx, "Count")
	if err := ghq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ghq, querierCount[*GameHustlerQuery](), ghq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ghq *GameHustlerQuery) CountX(ctx context.Context) int {
	count, err := ghq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ghq *GameHustlerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ghq.ctx, "Exist")
	switch _, err := ghq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ghq *GameHustlerQuery) ExistX(ctx context.Context) bool {
	exist, err := ghq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameHustlerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ghq *GameHustlerQuery) Clone() *GameHustlerQuery {
	if ghq == nil {
		return nil
	}
	return &GameHustlerQuery{
		config:        ghq.config,
		ctx:           ghq.ctx.Clone(),
		order:         append([]gamehustler.OrderOption{}, ghq.order...),
		inters:        append([]Interceptor{}, ghq.inters...),
		predicates:    append([]predicate.GameHustler{}, ghq.predicates...),
		withRelations: ghq.withRelations.Clone(),
		withItems:     ghq.withItems.Clone(),
		withQuests:    ghq.withQuests.Clone(),
		// clone intermediate query.
		sql:  ghq.sql.Clone(),
		path: ghq.path,
	}
}

// WithRelations tells the query-builder to eager-load the nodes that are connected to
// the "relations" edge. The optional arguments are used to configure the query builder of the edge.
func (ghq *GameHustlerQuery) WithRelations(opts ...func(*GameHustlerRelationQuery)) *GameHustlerQuery {
	query := (&GameHustlerRelationClient{config: ghq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ghq.withRelations = query
	return ghq
}

// WithItems tells the query-builder to eager-load the nodes that are connected to
// the "items" edge. The optional arguments are used to configure the query builder of the edge.
func (ghq *GameHustlerQuery) WithItems(opts ...func(*GameHustlerItemQuery)) *GameHustlerQuery {
	query := (&GameHustlerItemClient{config: ghq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ghq.withItems = query
	return ghq
}

// WithQuests tells the query-builder to eager-load the nodes that are connected to
// the "quests" edge. The optional arguments are used to configure the query builder of the edge.
func (ghq *GameHustlerQuery) WithQuests(opts ...func(*GameHustlerQuestQuery)) *GameHustlerQuery {
	query := (&GameHustlerQuestClient{config: ghq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ghq.withQuests = query
	return ghq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LastPosition schema.Position `json:"last_position,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameHustler.Query().
//		GroupBy(gamehustler.FieldLastPosition).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ghq *GameHustlerQuery) GroupBy(field string, fields ...string) *GameHustlerGroupBy {
	ghq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GameHustlerGroupBy{build: ghq}
	grbuild.flds = &ghq.ctx.Fields
	grbuild.label = gamehustler.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LastPosition schema.Position `json:"last_position,omitempty"`
//	}
//
//	client.GameHustler.Query().
//		Select(gamehustler.FieldLastPosition).
//		Scan(ctx, &v)
func (ghq *GameHustlerQuery) Select(fields ...string) *GameHustlerSelect {
	ghq.ctx.Fields = append(ghq.ctx.Fields, fields...)
	sbuild := &GameHustlerSelect{GameHustlerQuery: ghq}
	sbuild.label = gamehustler.Label
	sbuild.flds, sbuild.scan = &ghq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GameHustlerSelect configured with the given aggregations.
func (ghq *GameHustlerQuery) Aggregate(fns ...AggregateFunc) *GameHustlerSelect {
	return ghq.Select().Aggregate(fns...)
}

func (ghq *GameHustlerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ghq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ghq); err != nil {
				return err
			}
		}
	}
	for _, f := range ghq.ctx.Fields {
		if !gamehustler.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ghq.path != nil {
		prev, err := ghq.path(ctx)
		if err != nil {
			return err
		}
		ghq.sql = prev
	}
	return nil
}

func (ghq *GameHustlerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameHustler, error) {
	var (
		nodes       = []*GameHustler{}
		_spec       = ghq.querySpec()
		loadedTypes = [3]bool{
			ghq.withRelations != nil,
			ghq.withItems != nil,
			ghq.withQuests != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameHustler).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameHustler{config: ghq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ghq.modifiers) > 0 {
		_spec.Modifiers = ghq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ghq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ghq.withRelations; query != nil {
		if err := ghq.loadRelations(ctx, query, nodes,
			func(n *GameHustler) { n.Edges.Relations = []*GameHustlerRelation{} },
			func(n *GameHustler, e *GameHustlerRelation) { n.Edges.Relations = append(n.Edges.Relations, e) }); err != nil {
			return nil, err
		}
	}
	if query := ghq.withItems; query != nil {
		if err := ghq.loadItems(ctx, query, nodes,
			func(n *GameHustler) { n.Edges.Items = []*GameHustlerItem{} },
			func(n *GameHustler, e *GameHustlerItem) { n.Edges.Items = append(n.Edges.Items, e) }); err != nil {
			return nil, err
		}
	}
	if query := ghq.withQuests; query != nil {
		if err := ghq.loadQuests(ctx, query, nodes,
			func(n *GameHustler) { n.Edges.Quests = []*GameHustlerQuest{} },
			func(n *GameHustler, e *GameHustlerQuest) { n.Edges.Quests = append(n.Edges.Quests, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ghq.withNamedRelations {
		if err := ghq.loadRelations(ctx, query, nodes,
			func(n *GameHustler) { n.appendNamedRelations(name) },
			func(n *GameHustler, e *GameHustlerRelation) { n.appendNamedRelations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ghq.withNamedItems {
		if err := ghq.loadItems(ctx, query, nodes,
			func(n *GameHustler) { n.appendNamedItems(name) },
			func(n *GameHustler, e *GameHustlerItem) { n.appendNamedItems(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ghq.withNamedQuests {
		if err := ghq.loadQuests(ctx, query, nodes,
			func(n *GameHustler) { n.appendNamedQuests(name) },
			func(n *GameHustler, e *GameHustlerQuest) { n.appendNamedQuests(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ghq.loadTotal {
		if err := ghq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ghq *GameHustlerQuery) loadRelations(ctx context.Context, query *GameHustlerRelationQuery, nodes []*GameHustler, init func(*GameHustler), assign func(*GameHustler, *GameHustlerRelation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*GameHustler)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GameHustlerRelation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gamehustler.RelationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_hustler_relations
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_hustler_relations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_hustler_relations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ghq *GameHustlerQuery) loadItems(ctx context.Context, query *GameHustlerItemQuery, nodes []*GameHustler, init func(*GameHustler), assign func(*GameHustler, *GameHustlerItem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*GameHustler)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GameHustlerItem(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gamehustler.ItemsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_hustler_items
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_hustler_items" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_hustler_items" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ghq *GameHustlerQuery) loadQuests(ctx context.Context, query *GameHustlerQuestQuery, nodes []*GameHustler, init func(*GameHustler), assign func(*GameHustler, *GameHustlerQuest)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*GameHustler)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GameHustlerQuest(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gamehustler.QuestsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_hustler_quests
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_hustler_quests" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_hustler_quests" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ghq *GameHustlerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ghq.querySpec()
	if len(ghq.modifiers) > 0 {
		_spec.Modifiers = ghq.modifiers
	}
	_spec.Node.Columns = ghq.ctx.Fields
	if len(ghq.ctx.Fields) > 0 {
		_spec.Unique = ghq.ctx.Unique != nil && *ghq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ghq.driver, _spec)
}

func (ghq *GameHustlerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gamehustler.Table, gamehustler.Columns, sqlgraph.NewFieldSpec(gamehustler.FieldID, field.TypeString))
	_spec.From = ghq.sql
	if unique := ghq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ghq.path != nil {
		_spec.Unique = true
	}
	if fields := ghq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamehustler.FieldID)
		for i := range fields {
			if fields[i] != gamehustler.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ghq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ghq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ghq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ghq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ghq *GameHustlerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ghq.driver.Dialect())
	t1 := builder.Table(gamehustler.Table)
	columns := ghq.ctx.Fields
	if len(columns) == 0 {
		columns = gamehustler.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ghq.sql != nil {
		selector = ghq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ghq.ctx.Unique != nil && *ghq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ghq.predicates {
		p(selector)
	}
	for _, p := range ghq.order {
		p(selector)
	}
	if offset := ghq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ghq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedRelations tells the query-builder to eager-load the nodes that are connected to the "relations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ghq *GameHustlerQuery) WithNamedRelations(name string, opts ...func(*GameHustlerRelationQuery)) *GameHustlerQuery {
	query := (&GameHustlerRelationClient{config: ghq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ghq.withNamedRelations == nil {
		ghq.withNamedRelations = make(map[string]*GameHustlerRelationQuery)
	}
	ghq.withNamedRelations[name] = query
	return ghq
}

// WithNamedItems tells the query-builder to eager-load the nodes that are connected to the "items"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ghq *GameHustlerQuery) WithNamedItems(name string, opts ...func(*GameHustlerItemQuery)) *GameHustlerQuery {
	query := (&GameHustlerItemClient{config: ghq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ghq.withNamedItems == nil {
		ghq.withNamedItems = make(map[string]*GameHustlerItemQuery)
	}
	ghq.withNamedItems[name] = query
	return ghq
}

// WithNamedQuests tells the query-builder to eager-load the nodes that are connected to the "quests"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ghq *GameHustlerQuery) WithNamedQuests(name string, opts ...func(*GameHustlerQuestQuery)) *GameHustlerQuery {
	query := (&GameHustlerQuestClient{config: ghq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ghq.withNamedQuests == nil {
		ghq.withNamedQuests = make(map[string]*GameHustlerQuestQuery)
	}
	ghq.withNamedQuests[name] = query
	return ghq
}

// GameHustlerGroupBy is the group-by builder for GameHustler entities.
type GameHustlerGroupBy struct {
	selector
	build *GameHustlerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ghgb *GameHustlerGroupBy) Aggregate(fns ...AggregateFunc) *GameHustlerGroupBy {
	ghgb.fns = append(ghgb.fns, fns...)
	return ghgb
}

// Scan applies the selector query and scans the result into the given value.
func (ghgb *GameHustlerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ghgb.build.ctx, "GroupBy")
	if err := ghgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameHustlerQuery, *GameHustlerGroupBy](ctx, ghgb.build, ghgb, ghgb.build.inters, v)
}

func (ghgb *GameHustlerGroupBy) sqlScan(ctx context.Context, root *GameHustlerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ghgb.fns))
	for _, fn := range ghgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ghgb.flds)+len(ghgb.fns))
		for _, f := range *ghgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ghgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ghgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GameHustlerSelect is the builder for selecting fields of GameHustler entities.
type GameHustlerSelect struct {
	*GameHustlerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ghs *GameHustlerSelect) Aggregate(fns ...AggregateFunc) *GameHustlerSelect {
	ghs.fns = append(ghs.fns, fns...)
	return ghs
}

// Scan applies the selector query and scans the result into the given value.
func (ghs *GameHustlerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ghs.ctx, "Select")
	if err := ghs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameHustlerQuery, *GameHustlerSelect](ctx, ghs.GameHustlerQuery, ghs, ghs.inters, v)
}

func (ghs *GameHustlerSelect) sqlScan(ctx context.Context, root *GameHustlerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ghs.fns))
	for _, fn := range ghs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ghs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ghs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
