// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustlerquest"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// GameHustlerQuestDelete is the builder for deleting a GameHustlerQuest entity.
type GameHustlerQuestDelete struct {
	config
	hooks    []Hook
	mutation *GameHustlerQuestMutation
}

// Where appends a list predicates to the GameHustlerQuestDelete builder.
func (ghqd *GameHustlerQuestDelete) Where(ps ...predicate.GameHustlerQuest) *GameHustlerQuestDelete {
	ghqd.mutation.Where(ps...)
	return ghqd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ghqd *GameHustlerQuestDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ghqd.sqlExec, ghqd.mutation, ghqd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ghqd *GameHustlerQuestDelete) ExecX(ctx context.Context) int {
	n, err := ghqd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ghqd *GameHustlerQuestDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(gamehustlerquest.Table, sqlgraph.NewFieldSpec(gamehustlerquest.FieldID, field.TypeString))
	if ps := ghqd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ghqd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ghqd.mutation.done = true
	return affected, err
}

// GameHustlerQuestDeleteOne is the builder for deleting a single GameHustlerQuest entity.
type GameHustlerQuestDeleteOne struct {
	ghqd *GameHustlerQuestDelete
}

// Where appends a list predicates to the GameHustlerQuestDelete builder.
func (ghqdo *GameHustlerQuestDeleteOne) Where(ps ...predicate.GameHustlerQuest) *GameHustlerQuestDeleteOne {
	ghqdo.ghqd.mutation.Where(ps...)
	return ghqdo
}

// Exec executes the deletion query.
func (ghqdo *GameHustlerQuestDeleteOne) Exec(ctx context.Context) error {
	n, err := ghqdo.ghqd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{gamehustlerquest.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ghqdo *GameHustlerQuestDeleteOne) ExecX(ctx context.Context) {
	if err := ghqdo.Exec(ctx); err != nil {
		panic(err)
	}
}
