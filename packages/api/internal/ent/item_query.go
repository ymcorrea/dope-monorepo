// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/search"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/walletitems"
)

// ItemQuery is the builder for querying Item entities.
type ItemQuery struct {
	config
	ctx                         *QueryContext
	order                       []OrderFunc
	inters                      []Interceptor
	predicates                  []predicate.Item
	withWallets                 *WalletItemsQuery
	withDopes                   *DopeQuery
	withHustlerWeapons          *HustlerQuery
	withHustlerClothes          *HustlerQuery
	withHustlerVehicles         *HustlerQuery
	withHustlerWaists           *HustlerQuery
	withHustlerFeet             *HustlerQuery
	withHustlerHands            *HustlerQuery
	withHustlerDrugs            *HustlerQuery
	withHustlerNecks            *HustlerQuery
	withHustlerRings            *HustlerQuery
	withHustlerAccessories      *HustlerQuery
	withBase                    *ItemQuery
	withDerivative              *ItemQuery
	withIndex                   *SearchQuery
	withFKs                     bool
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*Item) error
	withNamedWallets            map[string]*WalletItemsQuery
	withNamedDopes              map[string]*DopeQuery
	withNamedHustlerWeapons     map[string]*HustlerQuery
	withNamedHustlerClothes     map[string]*HustlerQuery
	withNamedHustlerVehicles    map[string]*HustlerQuery
	withNamedHustlerWaists      map[string]*HustlerQuery
	withNamedHustlerFeet        map[string]*HustlerQuery
	withNamedHustlerHands       map[string]*HustlerQuery
	withNamedHustlerDrugs       map[string]*HustlerQuery
	withNamedHustlerNecks       map[string]*HustlerQuery
	withNamedHustlerRings       map[string]*HustlerQuery
	withNamedHustlerAccessories map[string]*HustlerQuery
	withNamedDerivative         map[string]*ItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ItemQuery builder.
func (iq *ItemQuery) Where(ps ...predicate.Item) *ItemQuery {
	iq.predicates = append(iq.predicates, ps...)
	return iq
}

// Limit the number of records to be returned by this query.
func (iq *ItemQuery) Limit(limit int) *ItemQuery {
	iq.ctx.Limit = &limit
	return iq
}

// Offset to start from.
func (iq *ItemQuery) Offset(offset int) *ItemQuery {
	iq.ctx.Offset = &offset
	return iq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iq *ItemQuery) Unique(unique bool) *ItemQuery {
	iq.ctx.Unique = &unique
	return iq
}

// Order specifies how the records should be ordered.
func (iq *ItemQuery) Order(o ...OrderFunc) *ItemQuery {
	iq.order = append(iq.order, o...)
	return iq
}

// QueryWallets chains the current query on the "wallets" edge.
func (iq *ItemQuery) QueryWallets() *WalletItemsQuery {
	query := (&WalletItemsClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(walletitems.Table, walletitems.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.WalletsTable, item.WalletsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDopes chains the current query on the "dopes" edge.
func (iq *ItemQuery) QueryDopes() *DopeQuery {
	query := (&DopeClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(dope.Table, dope.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, item.DopesTable, item.DopesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerWeapons chains the current query on the "hustler_weapons" edge.
func (iq *ItemQuery) QueryHustlerWeapons() *HustlerQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerWeaponsTable, item.HustlerWeaponsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerClothes chains the current query on the "hustler_clothes" edge.
func (iq *ItemQuery) QueryHustlerClothes() *HustlerQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerClothesTable, item.HustlerClothesColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerVehicles chains the current query on the "hustler_vehicles" edge.
func (iq *ItemQuery) QueryHustlerVehicles() *HustlerQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerVehiclesTable, item.HustlerVehiclesColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerWaists chains the current query on the "hustler_waists" edge.
func (iq *ItemQuery) QueryHustlerWaists() *HustlerQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerWaistsTable, item.HustlerWaistsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerFeet chains the current query on the "hustler_feet" edge.
func (iq *ItemQuery) QueryHustlerFeet() *HustlerQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerFeetTable, item.HustlerFeetColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerHands chains the current query on the "hustler_hands" edge.
func (iq *ItemQuery) QueryHustlerHands() *HustlerQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerHandsTable, item.HustlerHandsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerDrugs chains the current query on the "hustler_drugs" edge.
func (iq *ItemQuery) QueryHustlerDrugs() *HustlerQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerDrugsTable, item.HustlerDrugsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerNecks chains the current query on the "hustler_necks" edge.
func (iq *ItemQuery) QueryHustlerNecks() *HustlerQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerNecksTable, item.HustlerNecksColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerRings chains the current query on the "hustler_rings" edge.
func (iq *ItemQuery) QueryHustlerRings() *HustlerQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerRingsTable, item.HustlerRingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHustlerAccessories chains the current query on the "hustler_accessories" edge.
func (iq *ItemQuery) QueryHustlerAccessories() *HustlerQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(hustler.Table, hustler.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.HustlerAccessoriesTable, item.HustlerAccessoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBase chains the current query on the "base" edge.
func (iq *ItemQuery) QueryBase() *ItemQuery {
	query := (&ItemClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, item.BaseTable, item.BaseColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDerivative chains the current query on the "derivative" edge.
func (iq *ItemQuery) QueryDerivative() *ItemQuery {
	query := (&ItemClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.DerivativeTable, item.DerivativeColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIndex chains the current query on the "index" edge.
func (iq *ItemQuery) QueryIndex() *SearchQuery {
	query := (&SearchClient{config: iq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, selector),
			sqlgraph.To(search.Table, search.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, item.IndexTable, item.IndexColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Item entity from the query.
// Returns a *NotFoundError when no Item was found.
func (iq *ItemQuery) First(ctx context.Context) (*Item, error) {
	nodes, err := iq.Limit(1).All(setContextOp(ctx, iq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{item.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iq *ItemQuery) FirstX(ctx context.Context) *Item {
	node, err := iq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Item ID from the query.
// Returns a *NotFoundError when no Item ID was found.
func (iq *ItemQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = iq.Limit(1).IDs(setContextOp(ctx, iq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{item.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iq *ItemQuery) FirstIDX(ctx context.Context) string {
	id, err := iq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Item entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Item entity is found.
// Returns a *NotFoundError when no Item entities are found.
func (iq *ItemQuery) Only(ctx context.Context) (*Item, error) {
	nodes, err := iq.Limit(2).All(setContextOp(ctx, iq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{item.Label}
	default:
		return nil, &NotSingularError{item.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iq *ItemQuery) OnlyX(ctx context.Context) *Item {
	node, err := iq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Item ID in the query.
// Returns a *NotSingularError when more than one Item ID is found.
// Returns a *NotFoundError when no entities are found.
func (iq *ItemQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = iq.Limit(2).IDs(setContextOp(ctx, iq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{item.Label}
	default:
		err = &NotSingularError{item.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iq *ItemQuery) OnlyIDX(ctx context.Context) string {
	id, err := iq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Items.
func (iq *ItemQuery) All(ctx context.Context) ([]*Item, error) {
	ctx = setContextOp(ctx, iq.ctx, "All")
	if err := iq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Item, *ItemQuery]()
	return withInterceptors[[]*Item](ctx, iq, qr, iq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iq *ItemQuery) AllX(ctx context.Context) []*Item {
	nodes, err := iq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Item IDs.
func (iq *ItemQuery) IDs(ctx context.Context) (ids []string, err error) {
	if iq.ctx.Unique == nil && iq.path != nil {
		iq.Unique(true)
	}
	ctx = setContextOp(ctx, iq.ctx, "IDs")
	if err = iq.Select(item.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iq *ItemQuery) IDsX(ctx context.Context) []string {
	ids, err := iq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iq *ItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iq.ctx, "Count")
	if err := iq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iq, querierCount[*ItemQuery](), iq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iq *ItemQuery) CountX(ctx context.Context) int {
	count, err := iq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iq *ItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iq.ctx, "Exist")
	switch _, err := iq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iq *ItemQuery) ExistX(ctx context.Context) bool {
	exist, err := iq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iq *ItemQuery) Clone() *ItemQuery {
	if iq == nil {
		return nil
	}
	return &ItemQuery{
		config:                 iq.config,
		ctx:                    iq.ctx.Clone(),
		order:                  append([]OrderFunc{}, iq.order...),
		inters:                 append([]Interceptor{}, iq.inters...),
		predicates:             append([]predicate.Item{}, iq.predicates...),
		withWallets:            iq.withWallets.Clone(),
		withDopes:              iq.withDopes.Clone(),
		withHustlerWeapons:     iq.withHustlerWeapons.Clone(),
		withHustlerClothes:     iq.withHustlerClothes.Clone(),
		withHustlerVehicles:    iq.withHustlerVehicles.Clone(),
		withHustlerWaists:      iq.withHustlerWaists.Clone(),
		withHustlerFeet:        iq.withHustlerFeet.Clone(),
		withHustlerHands:       iq.withHustlerHands.Clone(),
		withHustlerDrugs:       iq.withHustlerDrugs.Clone(),
		withHustlerNecks:       iq.withHustlerNecks.Clone(),
		withHustlerRings:       iq.withHustlerRings.Clone(),
		withHustlerAccessories: iq.withHustlerAccessories.Clone(),
		withBase:               iq.withBase.Clone(),
		withDerivative:         iq.withDerivative.Clone(),
		withIndex:              iq.withIndex.Clone(),
		// clone intermediate query.
		sql:  iq.sql.Clone(),
		path: iq.path,
	}
}

// WithWallets tells the query-builder to eager-load the nodes that are connected to
// the "wallets" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithWallets(opts ...func(*WalletItemsQuery)) *ItemQuery {
	query := (&WalletItemsClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withWallets = query
	return iq
}

// WithDopes tells the query-builder to eager-load the nodes that are connected to
// the "dopes" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithDopes(opts ...func(*DopeQuery)) *ItemQuery {
	query := (&DopeClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withDopes = query
	return iq
}

// WithHustlerWeapons tells the query-builder to eager-load the nodes that are connected to
// the "hustler_weapons" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerWeapons(opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerWeapons = query
	return iq
}

// WithHustlerClothes tells the query-builder to eager-load the nodes that are connected to
// the "hustler_clothes" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerClothes(opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerClothes = query
	return iq
}

// WithHustlerVehicles tells the query-builder to eager-load the nodes that are connected to
// the "hustler_vehicles" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerVehicles(opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerVehicles = query
	return iq
}

// WithHustlerWaists tells the query-builder to eager-load the nodes that are connected to
// the "hustler_waists" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerWaists(opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerWaists = query
	return iq
}

// WithHustlerFeet tells the query-builder to eager-load the nodes that are connected to
// the "hustler_feet" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerFeet(opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerFeet = query
	return iq
}

// WithHustlerHands tells the query-builder to eager-load the nodes that are connected to
// the "hustler_hands" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerHands(opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerHands = query
	return iq
}

// WithHustlerDrugs tells the query-builder to eager-load the nodes that are connected to
// the "hustler_drugs" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerDrugs(opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerDrugs = query
	return iq
}

// WithHustlerNecks tells the query-builder to eager-load the nodes that are connected to
// the "hustler_necks" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerNecks(opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerNecks = query
	return iq
}

// WithHustlerRings tells the query-builder to eager-load the nodes that are connected to
// the "hustler_rings" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerRings(opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerRings = query
	return iq
}

// WithHustlerAccessories tells the query-builder to eager-load the nodes that are connected to
// the "hustler_accessories" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithHustlerAccessories(opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withHustlerAccessories = query
	return iq
}

// WithBase tells the query-builder to eager-load the nodes that are connected to
// the "base" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithBase(opts ...func(*ItemQuery)) *ItemQuery {
	query := (&ItemClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withBase = query
	return iq
}

// WithDerivative tells the query-builder to eager-load the nodes that are connected to
// the "derivative" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithDerivative(opts ...func(*ItemQuery)) *ItemQuery {
	query := (&ItemClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withDerivative = query
	return iq
}

// WithIndex tells the query-builder to eager-load the nodes that are connected to
// the "index" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithIndex(opts ...func(*SearchQuery)) *ItemQuery {
	query := (&SearchClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iq.withIndex = query
	return iq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type item.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Item.Query().
//		GroupBy(item.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iq *ItemQuery) GroupBy(field string, fields ...string) *ItemGroupBy {
	iq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ItemGroupBy{build: iq}
	grbuild.flds = &iq.ctx.Fields
	grbuild.label = item.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type item.Type `json:"type,omitempty"`
//	}
//
//	client.Item.Query().
//		Select(item.FieldType).
//		Scan(ctx, &v)
func (iq *ItemQuery) Select(fields ...string) *ItemSelect {
	iq.ctx.Fields = append(iq.ctx.Fields, fields...)
	sbuild := &ItemSelect{ItemQuery: iq}
	sbuild.label = item.Label
	sbuild.flds, sbuild.scan = &iq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ItemSelect configured with the given aggregations.
func (iq *ItemQuery) Aggregate(fns ...AggregateFunc) *ItemSelect {
	return iq.Select().Aggregate(fns...)
}

func (iq *ItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iq); err != nil {
				return err
			}
		}
	}
	for _, f := range iq.ctx.Fields {
		if !item.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iq.path != nil {
		prev, err := iq.path(ctx)
		if err != nil {
			return err
		}
		iq.sql = prev
	}
	return nil
}

func (iq *ItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Item, error) {
	var (
		nodes       = []*Item{}
		withFKs     = iq.withFKs
		_spec       = iq.querySpec()
		loadedTypes = [15]bool{
			iq.withWallets != nil,
			iq.withDopes != nil,
			iq.withHustlerWeapons != nil,
			iq.withHustlerClothes != nil,
			iq.withHustlerVehicles != nil,
			iq.withHustlerWaists != nil,
			iq.withHustlerFeet != nil,
			iq.withHustlerHands != nil,
			iq.withHustlerDrugs != nil,
			iq.withHustlerNecks != nil,
			iq.withHustlerRings != nil,
			iq.withHustlerAccessories != nil,
			iq.withBase != nil,
			iq.withDerivative != nil,
			iq.withIndex != nil,
		}
	)
	if iq.withBase != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, item.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Item).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Item{config: iq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(iq.modifiers) > 0 {
		_spec.Modifiers = iq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iq.withWallets; query != nil {
		if err := iq.loadWallets(ctx, query, nodes,
			func(n *Item) { n.Edges.Wallets = []*WalletItems{} },
			func(n *Item, e *WalletItems) { n.Edges.Wallets = append(n.Edges.Wallets, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withDopes; query != nil {
		if err := iq.loadDopes(ctx, query, nodes,
			func(n *Item) { n.Edges.Dopes = []*Dope{} },
			func(n *Item, e *Dope) { n.Edges.Dopes = append(n.Edges.Dopes, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withHustlerWeapons; query != nil {
		if err := iq.loadHustlerWeapons(ctx, query, nodes,
			func(n *Item) { n.Edges.HustlerWeapons = []*Hustler{} },
			func(n *Item, e *Hustler) { n.Edges.HustlerWeapons = append(n.Edges.HustlerWeapons, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withHustlerClothes; query != nil {
		if err := iq.loadHustlerClothes(ctx, query, nodes,
			func(n *Item) { n.Edges.HustlerClothes = []*Hustler{} },
			func(n *Item, e *Hustler) { n.Edges.HustlerClothes = append(n.Edges.HustlerClothes, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withHustlerVehicles; query != nil {
		if err := iq.loadHustlerVehicles(ctx, query, nodes,
			func(n *Item) { n.Edges.HustlerVehicles = []*Hustler{} },
			func(n *Item, e *Hustler) { n.Edges.HustlerVehicles = append(n.Edges.HustlerVehicles, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withHustlerWaists; query != nil {
		if err := iq.loadHustlerWaists(ctx, query, nodes,
			func(n *Item) { n.Edges.HustlerWaists = []*Hustler{} },
			func(n *Item, e *Hustler) { n.Edges.HustlerWaists = append(n.Edges.HustlerWaists, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withHustlerFeet; query != nil {
		if err := iq.loadHustlerFeet(ctx, query, nodes,
			func(n *Item) { n.Edges.HustlerFeet = []*Hustler{} },
			func(n *Item, e *Hustler) { n.Edges.HustlerFeet = append(n.Edges.HustlerFeet, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withHustlerHands; query != nil {
		if err := iq.loadHustlerHands(ctx, query, nodes,
			func(n *Item) { n.Edges.HustlerHands = []*Hustler{} },
			func(n *Item, e *Hustler) { n.Edges.HustlerHands = append(n.Edges.HustlerHands, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withHustlerDrugs; query != nil {
		if err := iq.loadHustlerDrugs(ctx, query, nodes,
			func(n *Item) { n.Edges.HustlerDrugs = []*Hustler{} },
			func(n *Item, e *Hustler) { n.Edges.HustlerDrugs = append(n.Edges.HustlerDrugs, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withHustlerNecks; query != nil {
		if err := iq.loadHustlerNecks(ctx, query, nodes,
			func(n *Item) { n.Edges.HustlerNecks = []*Hustler{} },
			func(n *Item, e *Hustler) { n.Edges.HustlerNecks = append(n.Edges.HustlerNecks, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withHustlerRings; query != nil {
		if err := iq.loadHustlerRings(ctx, query, nodes,
			func(n *Item) { n.Edges.HustlerRings = []*Hustler{} },
			func(n *Item, e *Hustler) { n.Edges.HustlerRings = append(n.Edges.HustlerRings, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withHustlerAccessories; query != nil {
		if err := iq.loadHustlerAccessories(ctx, query, nodes,
			func(n *Item) { n.Edges.HustlerAccessories = []*Hustler{} },
			func(n *Item, e *Hustler) { n.Edges.HustlerAccessories = append(n.Edges.HustlerAccessories, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withBase; query != nil {
		if err := iq.loadBase(ctx, query, nodes, nil,
			func(n *Item, e *Item) { n.Edges.Base = e }); err != nil {
			return nil, err
		}
	}
	if query := iq.withDerivative; query != nil {
		if err := iq.loadDerivative(ctx, query, nodes,
			func(n *Item) { n.Edges.Derivative = []*Item{} },
			func(n *Item, e *Item) { n.Edges.Derivative = append(n.Edges.Derivative, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withIndex; query != nil {
		if err := iq.loadIndex(ctx, query, nodes, nil,
			func(n *Item, e *Search) { n.Edges.Index = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedWallets {
		if err := iq.loadWallets(ctx, query, nodes,
			func(n *Item) { n.appendNamedWallets(name) },
			func(n *Item, e *WalletItems) { n.appendNamedWallets(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedDopes {
		if err := iq.loadDopes(ctx, query, nodes,
			func(n *Item) { n.appendNamedDopes(name) },
			func(n *Item, e *Dope) { n.appendNamedDopes(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedHustlerWeapons {
		if err := iq.loadHustlerWeapons(ctx, query, nodes,
			func(n *Item) { n.appendNamedHustlerWeapons(name) },
			func(n *Item, e *Hustler) { n.appendNamedHustlerWeapons(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedHustlerClothes {
		if err := iq.loadHustlerClothes(ctx, query, nodes,
			func(n *Item) { n.appendNamedHustlerClothes(name) },
			func(n *Item, e *Hustler) { n.appendNamedHustlerClothes(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedHustlerVehicles {
		if err := iq.loadHustlerVehicles(ctx, query, nodes,
			func(n *Item) { n.appendNamedHustlerVehicles(name) },
			func(n *Item, e *Hustler) { n.appendNamedHustlerVehicles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedHustlerWaists {
		if err := iq.loadHustlerWaists(ctx, query, nodes,
			func(n *Item) { n.appendNamedHustlerWaists(name) },
			func(n *Item, e *Hustler) { n.appendNamedHustlerWaists(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedHustlerFeet {
		if err := iq.loadHustlerFeet(ctx, query, nodes,
			func(n *Item) { n.appendNamedHustlerFeet(name) },
			func(n *Item, e *Hustler) { n.appendNamedHustlerFeet(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedHustlerHands {
		if err := iq.loadHustlerHands(ctx, query, nodes,
			func(n *Item) { n.appendNamedHustlerHands(name) },
			func(n *Item, e *Hustler) { n.appendNamedHustlerHands(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedHustlerDrugs {
		if err := iq.loadHustlerDrugs(ctx, query, nodes,
			func(n *Item) { n.appendNamedHustlerDrugs(name) },
			func(n *Item, e *Hustler) { n.appendNamedHustlerDrugs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedHustlerNecks {
		if err := iq.loadHustlerNecks(ctx, query, nodes,
			func(n *Item) { n.appendNamedHustlerNecks(name) },
			func(n *Item, e *Hustler) { n.appendNamedHustlerNecks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedHustlerRings {
		if err := iq.loadHustlerRings(ctx, query, nodes,
			func(n *Item) { n.appendNamedHustlerRings(name) },
			func(n *Item, e *Hustler) { n.appendNamedHustlerRings(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedHustlerAccessories {
		if err := iq.loadHustlerAccessories(ctx, query, nodes,
			func(n *Item) { n.appendNamedHustlerAccessories(name) },
			func(n *Item, e *Hustler) { n.appendNamedHustlerAccessories(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedDerivative {
		if err := iq.loadDerivative(ctx, query, nodes,
			func(n *Item) { n.appendNamedDerivative(name) },
			func(n *Item, e *Item) { n.appendNamedDerivative(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range iq.loadTotal {
		if err := iq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iq *ItemQuery) loadWallets(ctx context.Context, query *WalletItemsQuery, nodes []*Item, init func(*Item), assign func(*Item, *WalletItems)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.WalletItems(func(s *sql.Selector) {
		s.Where(sql.InValues(item.WalletsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_wallets
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_wallets" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_wallets" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadDopes(ctx context.Context, query *DopeQuery, nodes []*Item, init func(*Item), assign func(*Item, *Dope)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Item)
	nids := make(map[string]map[*Item]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(item.DopesTable)
		s.Join(joinT).On(s.C(dope.FieldID), joinT.C(item.DopesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(item.DopesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(item.DopesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Item]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Dope](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "dopes" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (iq *ItemQuery) loadHustlerWeapons(ctx context.Context, query *HustlerQuery, nodes []*Item, init func(*Item), assign func(*Item, *Hustler)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Hustler(func(s *sql.Selector) {
		s.Where(sql.InValues(item.HustlerWeaponsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_hustler_weapons
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_hustler_weapons" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_weapons" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadHustlerClothes(ctx context.Context, query *HustlerQuery, nodes []*Item, init func(*Item), assign func(*Item, *Hustler)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Hustler(func(s *sql.Selector) {
		s.Where(sql.InValues(item.HustlerClothesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_hustler_clothes
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_hustler_clothes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_clothes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadHustlerVehicles(ctx context.Context, query *HustlerQuery, nodes []*Item, init func(*Item), assign func(*Item, *Hustler)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Hustler(func(s *sql.Selector) {
		s.Where(sql.InValues(item.HustlerVehiclesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_hustler_vehicles
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_hustler_vehicles" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_vehicles" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadHustlerWaists(ctx context.Context, query *HustlerQuery, nodes []*Item, init func(*Item), assign func(*Item, *Hustler)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Hustler(func(s *sql.Selector) {
		s.Where(sql.InValues(item.HustlerWaistsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_hustler_waists
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_hustler_waists" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_waists" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadHustlerFeet(ctx context.Context, query *HustlerQuery, nodes []*Item, init func(*Item), assign func(*Item, *Hustler)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Hustler(func(s *sql.Selector) {
		s.Where(sql.InValues(item.HustlerFeetColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_hustler_feet
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_hustler_feet" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_feet" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadHustlerHands(ctx context.Context, query *HustlerQuery, nodes []*Item, init func(*Item), assign func(*Item, *Hustler)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Hustler(func(s *sql.Selector) {
		s.Where(sql.InValues(item.HustlerHandsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_hustler_hands
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_hustler_hands" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_hands" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadHustlerDrugs(ctx context.Context, query *HustlerQuery, nodes []*Item, init func(*Item), assign func(*Item, *Hustler)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Hustler(func(s *sql.Selector) {
		s.Where(sql.InValues(item.HustlerDrugsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_hustler_drugs
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_hustler_drugs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_drugs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadHustlerNecks(ctx context.Context, query *HustlerQuery, nodes []*Item, init func(*Item), assign func(*Item, *Hustler)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Hustler(func(s *sql.Selector) {
		s.Where(sql.InValues(item.HustlerNecksColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_hustler_necks
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_hustler_necks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_necks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadHustlerRings(ctx context.Context, query *HustlerQuery, nodes []*Item, init func(*Item), assign func(*Item, *Hustler)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Hustler(func(s *sql.Selector) {
		s.Where(sql.InValues(item.HustlerRingsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_hustler_rings
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_hustler_rings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_rings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadHustlerAccessories(ctx context.Context, query *HustlerQuery, nodes []*Item, init func(*Item), assign func(*Item, *Hustler)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Hustler(func(s *sql.Selector) {
		s.Where(sql.InValues(item.HustlerAccessoriesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_hustler_accessories
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_hustler_accessories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_hustler_accessories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadBase(ctx context.Context, query *ItemQuery, nodes []*Item, init func(*Item), assign func(*Item, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Item)
	for i := range nodes {
		if nodes[i].item_derivative == nil {
			continue
		}
		fk := *nodes[i].item_derivative
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_derivative" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iq *ItemQuery) loadDerivative(ctx context.Context, query *ItemQuery, nodes []*Item, init func(*Item), assign func(*Item, *Item)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Item(func(s *sql.Selector) {
		s.Where(sql.InValues(item.DerivativeColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_derivative
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_derivative" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_derivative" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *ItemQuery) loadIndex(ctx context.Context, query *SearchQuery, nodes []*Item, init func(*Item), assign func(*Item, *Search)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Item)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Search(func(s *sql.Selector) {
		s.Where(sql.InValues(item.IndexColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_index
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_index" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_index" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (iq *ItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iq.querySpec()
	if len(iq.modifiers) > 0 {
		_spec.Modifiers = iq.modifiers
	}
	_spec.Node.Columns = iq.ctx.Fields
	if len(iq.ctx.Fields) > 0 {
		_spec.Unique = iq.ctx.Unique != nil && *iq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iq.driver, _spec)
}

func (iq *ItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(item.Table, item.Columns, sqlgraph.NewFieldSpec(item.FieldID, field.TypeString))
	_spec.From = iq.sql
	if unique := iq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iq.path != nil {
		_spec.Unique = true
	}
	if fields := iq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, item.FieldID)
		for i := range fields {
			if fields[i] != item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iq *ItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iq.driver.Dialect())
	t1 := builder.Table(item.Table)
	columns := iq.ctx.Fields
	if len(columns) == 0 {
		columns = item.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iq.sql != nil {
		selector = iq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iq.ctx.Unique != nil && *iq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range iq.predicates {
		p(selector)
	}
	for _, p := range iq.order {
		p(selector)
	}
	if offset := iq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedWallets tells the query-builder to eager-load the nodes that are connected to the "wallets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedWallets(name string, opts ...func(*WalletItemsQuery)) *ItemQuery {
	query := (&WalletItemsClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedWallets == nil {
		iq.withNamedWallets = make(map[string]*WalletItemsQuery)
	}
	iq.withNamedWallets[name] = query
	return iq
}

// WithNamedDopes tells the query-builder to eager-load the nodes that are connected to the "dopes"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedDopes(name string, opts ...func(*DopeQuery)) *ItemQuery {
	query := (&DopeClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedDopes == nil {
		iq.withNamedDopes = make(map[string]*DopeQuery)
	}
	iq.withNamedDopes[name] = query
	return iq
}

// WithNamedHustlerWeapons tells the query-builder to eager-load the nodes that are connected to the "hustler_weapons"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedHustlerWeapons(name string, opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedHustlerWeapons == nil {
		iq.withNamedHustlerWeapons = make(map[string]*HustlerQuery)
	}
	iq.withNamedHustlerWeapons[name] = query
	return iq
}

// WithNamedHustlerClothes tells the query-builder to eager-load the nodes that are connected to the "hustler_clothes"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedHustlerClothes(name string, opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedHustlerClothes == nil {
		iq.withNamedHustlerClothes = make(map[string]*HustlerQuery)
	}
	iq.withNamedHustlerClothes[name] = query
	return iq
}

// WithNamedHustlerVehicles tells the query-builder to eager-load the nodes that are connected to the "hustler_vehicles"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedHustlerVehicles(name string, opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedHustlerVehicles == nil {
		iq.withNamedHustlerVehicles = make(map[string]*HustlerQuery)
	}
	iq.withNamedHustlerVehicles[name] = query
	return iq
}

// WithNamedHustlerWaists tells the query-builder to eager-load the nodes that are connected to the "hustler_waists"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedHustlerWaists(name string, opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedHustlerWaists == nil {
		iq.withNamedHustlerWaists = make(map[string]*HustlerQuery)
	}
	iq.withNamedHustlerWaists[name] = query
	return iq
}

// WithNamedHustlerFeet tells the query-builder to eager-load the nodes that are connected to the "hustler_feet"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedHustlerFeet(name string, opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedHustlerFeet == nil {
		iq.withNamedHustlerFeet = make(map[string]*HustlerQuery)
	}
	iq.withNamedHustlerFeet[name] = query
	return iq
}

// WithNamedHustlerHands tells the query-builder to eager-load the nodes that are connected to the "hustler_hands"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedHustlerHands(name string, opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedHustlerHands == nil {
		iq.withNamedHustlerHands = make(map[string]*HustlerQuery)
	}
	iq.withNamedHustlerHands[name] = query
	return iq
}

// WithNamedHustlerDrugs tells the query-builder to eager-load the nodes that are connected to the "hustler_drugs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedHustlerDrugs(name string, opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedHustlerDrugs == nil {
		iq.withNamedHustlerDrugs = make(map[string]*HustlerQuery)
	}
	iq.withNamedHustlerDrugs[name] = query
	return iq
}

// WithNamedHustlerNecks tells the query-builder to eager-load the nodes that are connected to the "hustler_necks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedHustlerNecks(name string, opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedHustlerNecks == nil {
		iq.withNamedHustlerNecks = make(map[string]*HustlerQuery)
	}
	iq.withNamedHustlerNecks[name] = query
	return iq
}

// WithNamedHustlerRings tells the query-builder to eager-load the nodes that are connected to the "hustler_rings"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedHustlerRings(name string, opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedHustlerRings == nil {
		iq.withNamedHustlerRings = make(map[string]*HustlerQuery)
	}
	iq.withNamedHustlerRings[name] = query
	return iq
}

// WithNamedHustlerAccessories tells the query-builder to eager-load the nodes that are connected to the "hustler_accessories"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedHustlerAccessories(name string, opts ...func(*HustlerQuery)) *ItemQuery {
	query := (&HustlerClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedHustlerAccessories == nil {
		iq.withNamedHustlerAccessories = make(map[string]*HustlerQuery)
	}
	iq.withNamedHustlerAccessories[name] = query
	return iq
}

// WithNamedDerivative tells the query-builder to eager-load the nodes that are connected to the "derivative"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *ItemQuery) WithNamedDerivative(name string, opts ...func(*ItemQuery)) *ItemQuery {
	query := (&ItemClient{config: iq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedDerivative == nil {
		iq.withNamedDerivative = make(map[string]*ItemQuery)
	}
	iq.withNamedDerivative[name] = query
	return iq
}

// ItemGroupBy is the group-by builder for Item entities.
type ItemGroupBy struct {
	selector
	build *ItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (igb *ItemGroupBy) Aggregate(fns ...AggregateFunc) *ItemGroupBy {
	igb.fns = append(igb.fns, fns...)
	return igb
}

// Scan applies the selector query and scans the result into the given value.
func (igb *ItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, igb.build.ctx, "GroupBy")
	if err := igb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ItemQuery, *ItemGroupBy](ctx, igb.build, igb, igb.build.inters, v)
}

func (igb *ItemGroupBy) sqlScan(ctx context.Context, root *ItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(igb.fns))
	for _, fn := range igb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*igb.flds)+len(igb.fns))
		for _, f := range *igb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*igb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := igb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ItemSelect is the builder for selecting fields of Item entities.
type ItemSelect struct {
	*ItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (is *ItemSelect) Aggregate(fns ...AggregateFunc) *ItemSelect {
	is.fns = append(is.fns, fns...)
	return is
}

// Scan applies the selector query and scans the result into the given value.
func (is *ItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, is.ctx, "Select")
	if err := is.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ItemQuery, *ItemSelect](ctx, is.ItemQuery, is, is.inters, v)
}

func (is *ItemSelect) sqlScan(ctx context.Context, root *ItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(is.fns))
	for _, fn := range is.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*is.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := is.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
