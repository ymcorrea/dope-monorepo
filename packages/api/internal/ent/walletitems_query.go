// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/wallet"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/walletitems"
)

// WalletItemsQuery is the builder for querying WalletItems entities.
type WalletItemsQuery struct {
	config
	ctx        *QueryContext
	order      []OrderFunc
	inters     []Interceptor
	predicates []predicate.WalletItems
	withWallet *WalletQuery
	withItem   *ItemQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*WalletItems) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WalletItemsQuery builder.
func (wiq *WalletItemsQuery) Where(ps ...predicate.WalletItems) *WalletItemsQuery {
	wiq.predicates = append(wiq.predicates, ps...)
	return wiq
}

// Limit the number of records to be returned by this query.
func (wiq *WalletItemsQuery) Limit(limit int) *WalletItemsQuery {
	wiq.ctx.Limit = &limit
	return wiq
}

// Offset to start from.
func (wiq *WalletItemsQuery) Offset(offset int) *WalletItemsQuery {
	wiq.ctx.Offset = &offset
	return wiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wiq *WalletItemsQuery) Unique(unique bool) *WalletItemsQuery {
	wiq.ctx.Unique = &unique
	return wiq
}

// Order specifies how the records should be ordered.
func (wiq *WalletItemsQuery) Order(o ...OrderFunc) *WalletItemsQuery {
	wiq.order = append(wiq.order, o...)
	return wiq
}

// QueryWallet chains the current query on the "wallet" edge.
func (wiq *WalletItemsQuery) QueryWallet() *WalletQuery {
	query := (&WalletClient{config: wiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(walletitems.Table, walletitems.FieldID, selector),
			sqlgraph.To(wallet.Table, wallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, walletitems.WalletTable, walletitems.WalletColumn),
		)
		fromU = sqlgraph.SetNeighbors(wiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItem chains the current query on the "item" edge.
func (wiq *WalletItemsQuery) QueryItem() *ItemQuery {
	query := (&ItemClient{config: wiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(walletitems.Table, walletitems.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, walletitems.ItemTable, walletitems.ItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(wiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WalletItems entity from the query.
// Returns a *NotFoundError when no WalletItems was found.
func (wiq *WalletItemsQuery) First(ctx context.Context) (*WalletItems, error) {
	nodes, err := wiq.Limit(1).All(setContextOp(ctx, wiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{walletitems.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wiq *WalletItemsQuery) FirstX(ctx context.Context) *WalletItems {
	node, err := wiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WalletItems ID from the query.
// Returns a *NotFoundError when no WalletItems ID was found.
func (wiq *WalletItemsQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = wiq.Limit(1).IDs(setContextOp(ctx, wiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{walletitems.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wiq *WalletItemsQuery) FirstIDX(ctx context.Context) string {
	id, err := wiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WalletItems entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WalletItems entity is found.
// Returns a *NotFoundError when no WalletItems entities are found.
func (wiq *WalletItemsQuery) Only(ctx context.Context) (*WalletItems, error) {
	nodes, err := wiq.Limit(2).All(setContextOp(ctx, wiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{walletitems.Label}
	default:
		return nil, &NotSingularError{walletitems.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wiq *WalletItemsQuery) OnlyX(ctx context.Context) *WalletItems {
	node, err := wiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WalletItems ID in the query.
// Returns a *NotSingularError when more than one WalletItems ID is found.
// Returns a *NotFoundError when no entities are found.
func (wiq *WalletItemsQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = wiq.Limit(2).IDs(setContextOp(ctx, wiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{walletitems.Label}
	default:
		err = &NotSingularError{walletitems.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wiq *WalletItemsQuery) OnlyIDX(ctx context.Context) string {
	id, err := wiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WalletItemsSlice.
func (wiq *WalletItemsQuery) All(ctx context.Context) ([]*WalletItems, error) {
	ctx = setContextOp(ctx, wiq.ctx, "All")
	if err := wiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WalletItems, *WalletItemsQuery]()
	return withInterceptors[[]*WalletItems](ctx, wiq, qr, wiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wiq *WalletItemsQuery) AllX(ctx context.Context) []*WalletItems {
	nodes, err := wiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WalletItems IDs.
func (wiq *WalletItemsQuery) IDs(ctx context.Context) (ids []string, err error) {
	if wiq.ctx.Unique == nil && wiq.path != nil {
		wiq.Unique(true)
	}
	ctx = setContextOp(ctx, wiq.ctx, "IDs")
	if err = wiq.Select(walletitems.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wiq *WalletItemsQuery) IDsX(ctx context.Context) []string {
	ids, err := wiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wiq *WalletItemsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wiq.ctx, "Count")
	if err := wiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wiq, querierCount[*WalletItemsQuery](), wiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wiq *WalletItemsQuery) CountX(ctx context.Context) int {
	count, err := wiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wiq *WalletItemsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wiq.ctx, "Exist")
	switch _, err := wiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wiq *WalletItemsQuery) ExistX(ctx context.Context) bool {
	exist, err := wiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WalletItemsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wiq *WalletItemsQuery) Clone() *WalletItemsQuery {
	if wiq == nil {
		return nil
	}
	return &WalletItemsQuery{
		config:     wiq.config,
		ctx:        wiq.ctx.Clone(),
		order:      append([]OrderFunc{}, wiq.order...),
		inters:     append([]Interceptor{}, wiq.inters...),
		predicates: append([]predicate.WalletItems{}, wiq.predicates...),
		withWallet: wiq.withWallet.Clone(),
		withItem:   wiq.withItem.Clone(),
		// clone intermediate query.
		sql:  wiq.sql.Clone(),
		path: wiq.path,
	}
}

// WithWallet tells the query-builder to eager-load the nodes that are connected to
// the "wallet" edge. The optional arguments are used to configure the query builder of the edge.
func (wiq *WalletItemsQuery) WithWallet(opts ...func(*WalletQuery)) *WalletItemsQuery {
	query := (&WalletClient{config: wiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wiq.withWallet = query
	return wiq
}

// WithItem tells the query-builder to eager-load the nodes that are connected to
// the "item" edge. The optional arguments are used to configure the query builder of the edge.
func (wiq *WalletItemsQuery) WithItem(opts ...func(*ItemQuery)) *WalletItemsQuery {
	query := (&ItemClient{config: wiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wiq.withItem = query
	return wiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Balance schema.BigInt `json:"balance,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WalletItems.Query().
//		GroupBy(walletitems.FieldBalance).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wiq *WalletItemsQuery) GroupBy(field string, fields ...string) *WalletItemsGroupBy {
	wiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WalletItemsGroupBy{build: wiq}
	grbuild.flds = &wiq.ctx.Fields
	grbuild.label = walletitems.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Balance schema.BigInt `json:"balance,omitempty"`
//	}
//
//	client.WalletItems.Query().
//		Select(walletitems.FieldBalance).
//		Scan(ctx, &v)
func (wiq *WalletItemsQuery) Select(fields ...string) *WalletItemsSelect {
	wiq.ctx.Fields = append(wiq.ctx.Fields, fields...)
	sbuild := &WalletItemsSelect{WalletItemsQuery: wiq}
	sbuild.label = walletitems.Label
	sbuild.flds, sbuild.scan = &wiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WalletItemsSelect configured with the given aggregations.
func (wiq *WalletItemsQuery) Aggregate(fns ...AggregateFunc) *WalletItemsSelect {
	return wiq.Select().Aggregate(fns...)
}

func (wiq *WalletItemsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wiq); err != nil {
				return err
			}
		}
	}
	for _, f := range wiq.ctx.Fields {
		if !walletitems.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wiq.path != nil {
		prev, err := wiq.path(ctx)
		if err != nil {
			return err
		}
		wiq.sql = prev
	}
	return nil
}

func (wiq *WalletItemsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WalletItems, error) {
	var (
		nodes       = []*WalletItems{}
		withFKs     = wiq.withFKs
		_spec       = wiq.querySpec()
		loadedTypes = [2]bool{
			wiq.withWallet != nil,
			wiq.withItem != nil,
		}
	)
	if wiq.withWallet != nil || wiq.withItem != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, walletitems.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WalletItems).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WalletItems{config: wiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(wiq.modifiers) > 0 {
		_spec.Modifiers = wiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wiq.withWallet; query != nil {
		if err := wiq.loadWallet(ctx, query, nodes, nil,
			func(n *WalletItems, e *Wallet) { n.Edges.Wallet = e }); err != nil {
			return nil, err
		}
	}
	if query := wiq.withItem; query != nil {
		if err := wiq.loadItem(ctx, query, nodes, nil,
			func(n *WalletItems, e *Item) { n.Edges.Item = e }); err != nil {
			return nil, err
		}
	}
	for i := range wiq.loadTotal {
		if err := wiq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wiq *WalletItemsQuery) loadWallet(ctx context.Context, query *WalletQuery, nodes []*WalletItems, init func(*WalletItems), assign func(*WalletItems, *Wallet)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*WalletItems)
	for i := range nodes {
		if nodes[i].wallet_items == nil {
			continue
		}
		fk := *nodes[i].wallet_items
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(wallet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "wallet_items" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wiq *WalletItemsQuery) loadItem(ctx context.Context, query *ItemQuery, nodes []*WalletItems, init func(*WalletItems), assign func(*WalletItems, *Item)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*WalletItems)
	for i := range nodes {
		if nodes[i].item_wallets == nil {
			continue
		}
		fk := *nodes[i].item_wallets
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(item.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_wallets" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wiq *WalletItemsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wiq.querySpec()
	if len(wiq.modifiers) > 0 {
		_spec.Modifiers = wiq.modifiers
	}
	_spec.Node.Columns = wiq.ctx.Fields
	if len(wiq.ctx.Fields) > 0 {
		_spec.Unique = wiq.ctx.Unique != nil && *wiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wiq.driver, _spec)
}

func (wiq *WalletItemsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(walletitems.Table, walletitems.Columns, sqlgraph.NewFieldSpec(walletitems.FieldID, field.TypeString))
	_spec.From = wiq.sql
	if unique := wiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wiq.path != nil {
		_spec.Unique = true
	}
	if fields := wiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, walletitems.FieldID)
		for i := range fields {
			if fields[i] != walletitems.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wiq *WalletItemsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wiq.driver.Dialect())
	t1 := builder.Table(walletitems.Table)
	columns := wiq.ctx.Fields
	if len(columns) == 0 {
		columns = walletitems.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wiq.sql != nil {
		selector = wiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wiq.ctx.Unique != nil && *wiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wiq.predicates {
		p(selector)
	}
	for _, p := range wiq.order {
		p(selector)
	}
	if offset := wiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WalletItemsGroupBy is the group-by builder for WalletItems entities.
type WalletItemsGroupBy struct {
	selector
	build *WalletItemsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wigb *WalletItemsGroupBy) Aggregate(fns ...AggregateFunc) *WalletItemsGroupBy {
	wigb.fns = append(wigb.fns, fns...)
	return wigb
}

// Scan applies the selector query and scans the result into the given value.
func (wigb *WalletItemsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wigb.build.ctx, "GroupBy")
	if err := wigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WalletItemsQuery, *WalletItemsGroupBy](ctx, wigb.build, wigb, wigb.build.inters, v)
}

func (wigb *WalletItemsGroupBy) sqlScan(ctx context.Context, root *WalletItemsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wigb.fns))
	for _, fn := range wigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wigb.flds)+len(wigb.fns))
		for _, f := range *wigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WalletItemsSelect is the builder for selecting fields of WalletItems entities.
type WalletItemsSelect struct {
	*WalletItemsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wis *WalletItemsSelect) Aggregate(fns ...AggregateFunc) *WalletItemsSelect {
	wis.fns = append(wis.fns, fns...)
	return wis
}

// Scan applies the selector query and scans the result into the given value.
func (wis *WalletItemsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wis.ctx, "Select")
	if err := wis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WalletItemsQuery, *WalletItemsSelect](ctx, wis.WalletItemsQuery, wis, wis.inters, v)
}

func (wis *WalletItemsSelect) sqlScan(ctx context.Context, root *WalletItemsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wis.fns))
	for _, fn := range wis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
