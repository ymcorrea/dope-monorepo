// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/schema"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/search"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type item.Type `json:"type,omitempty"`
	// NamePrefix holds the value of the "name_prefix" field.
	NamePrefix string `json:"name_prefix,omitempty"`
	// NameSuffix holds the value of the "name_suffix" field.
	NameSuffix string `json:"name_suffix,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Suffix holds the value of the "suffix" field.
	Suffix string `json:"suffix,omitempty"`
	// Augmented holds the value of the "augmented" field.
	Augmented bool `json:"augmented,omitempty"`
	// Count holds the value of the "count" field.
	Count int `json:"count,omitempty"`
	// Tier holds the value of the "tier" field.
	Tier item.Tier `json:"tier,omitempty"`
	// Greatness holds the value of the "greatness" field.
	Greatness int `json:"greatness,omitempty"`
	// Rles holds the value of the "rles" field.
	Rles schema.RLEs `json:"rles,omitempty"`
	// Svg holds the value of the "svg" field.
	Svg string `json:"svg,omitempty"`
	// Sprite holds the value of the "sprite" field.
	Sprite schema.Sprites `json:"sprite,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemQuery when eager-loading is set.
	Edges           ItemEdges `json:"edges"`
	item_derivative *string
}

// ItemEdges holds the relations/edges for other nodes in the graph.
type ItemEdges struct {
	// Wallets holds the value of the wallets edge.
	Wallets []*WalletItems `json:"wallets,omitempty"`
	// Dopes holds the value of the dopes edge.
	Dopes []*Dope `json:"dopes,omitempty"`
	// HustlerWeapons holds the value of the hustler_weapons edge.
	HustlerWeapons []*Hustler `json:"hustler_weapons,omitempty"`
	// HustlerClothes holds the value of the hustler_clothes edge.
	HustlerClothes []*Hustler `json:"hustler_clothes,omitempty"`
	// HustlerVehicles holds the value of the hustler_vehicles edge.
	HustlerVehicles []*Hustler `json:"hustler_vehicles,omitempty"`
	// HustlerWaists holds the value of the hustler_waists edge.
	HustlerWaists []*Hustler `json:"hustler_waists,omitempty"`
	// HustlerFeet holds the value of the hustler_feet edge.
	HustlerFeet []*Hustler `json:"hustler_feet,omitempty"`
	// HustlerHands holds the value of the hustler_hands edge.
	HustlerHands []*Hustler `json:"hustler_hands,omitempty"`
	// HustlerDrugs holds the value of the hustler_drugs edge.
	HustlerDrugs []*Hustler `json:"hustler_drugs,omitempty"`
	// HustlerNecks holds the value of the hustler_necks edge.
	HustlerNecks []*Hustler `json:"hustler_necks,omitempty"`
	// HustlerRings holds the value of the hustler_rings edge.
	HustlerRings []*Hustler `json:"hustler_rings,omitempty"`
	// HustlerAccessories holds the value of the hustler_accessories edge.
	HustlerAccessories []*Hustler `json:"hustler_accessories,omitempty"`
	// Base holds the value of the base edge.
	Base *Item `json:"base,omitempty"`
	// Derivative holds the value of the derivative edge.
	Derivative []*Item `json:"derivative,omitempty"`
	// Index holds the value of the index edge.
	Index *Search `json:"index,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [15]bool
	// totalCount holds the count of the edges above.
	totalCount [15]map[string]int

	namedWallets            map[string][]*WalletItems
	namedDopes              map[string][]*Dope
	namedHustlerWeapons     map[string][]*Hustler
	namedHustlerClothes     map[string][]*Hustler
	namedHustlerVehicles    map[string][]*Hustler
	namedHustlerWaists      map[string][]*Hustler
	namedHustlerFeet        map[string][]*Hustler
	namedHustlerHands       map[string][]*Hustler
	namedHustlerDrugs       map[string][]*Hustler
	namedHustlerNecks       map[string][]*Hustler
	namedHustlerRings       map[string][]*Hustler
	namedHustlerAccessories map[string][]*Hustler
	namedDerivative         map[string][]*Item
}

// WalletsOrErr returns the Wallets value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) WalletsOrErr() ([]*WalletItems, error) {
	if e.loadedTypes[0] {
		return e.Wallets, nil
	}
	return nil, &NotLoadedError{edge: "wallets"}
}

// DopesOrErr returns the Dopes value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) DopesOrErr() ([]*Dope, error) {
	if e.loadedTypes[1] {
		return e.Dopes, nil
	}
	return nil, &NotLoadedError{edge: "dopes"}
}

// HustlerWeaponsOrErr returns the HustlerWeapons value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) HustlerWeaponsOrErr() ([]*Hustler, error) {
	if e.loadedTypes[2] {
		return e.HustlerWeapons, nil
	}
	return nil, &NotLoadedError{edge: "hustler_weapons"}
}

// HustlerClothesOrErr returns the HustlerClothes value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) HustlerClothesOrErr() ([]*Hustler, error) {
	if e.loadedTypes[3] {
		return e.HustlerClothes, nil
	}
	return nil, &NotLoadedError{edge: "hustler_clothes"}
}

// HustlerVehiclesOrErr returns the HustlerVehicles value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) HustlerVehiclesOrErr() ([]*Hustler, error) {
	if e.loadedTypes[4] {
		return e.HustlerVehicles, nil
	}
	return nil, &NotLoadedError{edge: "hustler_vehicles"}
}

// HustlerWaistsOrErr returns the HustlerWaists value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) HustlerWaistsOrErr() ([]*Hustler, error) {
	if e.loadedTypes[5] {
		return e.HustlerWaists, nil
	}
	return nil, &NotLoadedError{edge: "hustler_waists"}
}

// HustlerFeetOrErr returns the HustlerFeet value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) HustlerFeetOrErr() ([]*Hustler, error) {
	if e.loadedTypes[6] {
		return e.HustlerFeet, nil
	}
	return nil, &NotLoadedError{edge: "hustler_feet"}
}

// HustlerHandsOrErr returns the HustlerHands value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) HustlerHandsOrErr() ([]*Hustler, error) {
	if e.loadedTypes[7] {
		return e.HustlerHands, nil
	}
	return nil, &NotLoadedError{edge: "hustler_hands"}
}

// HustlerDrugsOrErr returns the HustlerDrugs value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) HustlerDrugsOrErr() ([]*Hustler, error) {
	if e.loadedTypes[8] {
		return e.HustlerDrugs, nil
	}
	return nil, &NotLoadedError{edge: "hustler_drugs"}
}

// HustlerNecksOrErr returns the HustlerNecks value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) HustlerNecksOrErr() ([]*Hustler, error) {
	if e.loadedTypes[9] {
		return e.HustlerNecks, nil
	}
	return nil, &NotLoadedError{edge: "hustler_necks"}
}

// HustlerRingsOrErr returns the HustlerRings value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) HustlerRingsOrErr() ([]*Hustler, error) {
	if e.loadedTypes[10] {
		return e.HustlerRings, nil
	}
	return nil, &NotLoadedError{edge: "hustler_rings"}
}

// HustlerAccessoriesOrErr returns the HustlerAccessories value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) HustlerAccessoriesOrErr() ([]*Hustler, error) {
	if e.loadedTypes[11] {
		return e.HustlerAccessories, nil
	}
	return nil, &NotLoadedError{edge: "hustler_accessories"}
}

// BaseOrErr returns the Base value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemEdges) BaseOrErr() (*Item, error) {
	if e.loadedTypes[12] {
		if e.Base == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: item.Label}
		}
		return e.Base, nil
	}
	return nil, &NotLoadedError{edge: "base"}
}

// DerivativeOrErr returns the Derivative value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) DerivativeOrErr() ([]*Item, error) {
	if e.loadedTypes[13] {
		return e.Derivative, nil
	}
	return nil, &NotLoadedError{edge: "derivative"}
}

// IndexOrErr returns the Index value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemEdges) IndexOrErr() (*Search, error) {
	if e.loadedTypes[14] {
		if e.Index == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: search.Label}
		}
		return e.Index, nil
	}
	return nil, &NotLoadedError{edge: "index"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldRles, item.FieldSprite:
			values[i] = new([]byte)
		case item.FieldAugmented:
			values[i] = new(sql.NullBool)
		case item.FieldCount, item.FieldGreatness:
			values[i] = new(sql.NullInt64)
		case item.FieldID, item.FieldType, item.FieldNamePrefix, item.FieldNameSuffix, item.FieldName, item.FieldSuffix, item.FieldTier, item.FieldSvg:
			values[i] = new(sql.NullString)
		case item.ForeignKeys[0]: // item_derivative
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Item", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = value.String
			}
		case item.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = item.Type(value.String)
			}
		case item.FieldNamePrefix:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_prefix", values[j])
			} else if value.Valid {
				i.NamePrefix = value.String
			}
		case item.FieldNameSuffix:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_suffix", values[j])
			} else if value.Valid {
				i.NameSuffix = value.String
			}
		case item.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case item.FieldSuffix:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suffix", values[j])
			} else if value.Valid {
				i.Suffix = value.String
			}
		case item.FieldAugmented:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field augmented", values[j])
			} else if value.Valid {
				i.Augmented = value.Bool
			}
		case item.FieldCount:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[j])
			} else if value.Valid {
				i.Count = int(value.Int64)
			}
		case item.FieldTier:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tier", values[j])
			} else if value.Valid {
				i.Tier = item.Tier(value.String)
			}
		case item.FieldGreatness:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field greatness", values[j])
			} else if value.Valid {
				i.Greatness = int(value.Int64)
			}
		case item.FieldRles:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rles", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Rles); err != nil {
					return fmt.Errorf("unmarshal field rles: %w", err)
				}
			}
		case item.FieldSvg:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field svg", values[j])
			} else if value.Valid {
				i.Svg = value.String
			}
		case item.FieldSprite:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sprite", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Sprite); err != nil {
					return fmt.Errorf("unmarshal field sprite: %w", err)
				}
			}
		case item.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_derivative", values[j])
			} else if value.Valid {
				i.item_derivative = new(string)
				*i.item_derivative = value.String
			}
		}
	}
	return nil
}

// QueryWallets queries the "wallets" edge of the Item entity.
func (i *Item) QueryWallets() *WalletItemsQuery {
	return NewItemClient(i.config).QueryWallets(i)
}

// QueryDopes queries the "dopes" edge of the Item entity.
func (i *Item) QueryDopes() *DopeQuery {
	return NewItemClient(i.config).QueryDopes(i)
}

// QueryHustlerWeapons queries the "hustler_weapons" edge of the Item entity.
func (i *Item) QueryHustlerWeapons() *HustlerQuery {
	return NewItemClient(i.config).QueryHustlerWeapons(i)
}

// QueryHustlerClothes queries the "hustler_clothes" edge of the Item entity.
func (i *Item) QueryHustlerClothes() *HustlerQuery {
	return NewItemClient(i.config).QueryHustlerClothes(i)
}

// QueryHustlerVehicles queries the "hustler_vehicles" edge of the Item entity.
func (i *Item) QueryHustlerVehicles() *HustlerQuery {
	return NewItemClient(i.config).QueryHustlerVehicles(i)
}

// QueryHustlerWaists queries the "hustler_waists" edge of the Item entity.
func (i *Item) QueryHustlerWaists() *HustlerQuery {
	return NewItemClient(i.config).QueryHustlerWaists(i)
}

// QueryHustlerFeet queries the "hustler_feet" edge of the Item entity.
func (i *Item) QueryHustlerFeet() *HustlerQuery {
	return NewItemClient(i.config).QueryHustlerFeet(i)
}

// QueryHustlerHands queries the "hustler_hands" edge of the Item entity.
func (i *Item) QueryHustlerHands() *HustlerQuery {
	return NewItemClient(i.config).QueryHustlerHands(i)
}

// QueryHustlerDrugs queries the "hustler_drugs" edge of the Item entity.
func (i *Item) QueryHustlerDrugs() *HustlerQuery {
	return NewItemClient(i.config).QueryHustlerDrugs(i)
}

// QueryHustlerNecks queries the "hustler_necks" edge of the Item entity.
func (i *Item) QueryHustlerNecks() *HustlerQuery {
	return NewItemClient(i.config).QueryHustlerNecks(i)
}

// QueryHustlerRings queries the "hustler_rings" edge of the Item entity.
func (i *Item) QueryHustlerRings() *HustlerQuery {
	return NewItemClient(i.config).QueryHustlerRings(i)
}

// QueryHustlerAccessories queries the "hustler_accessories" edge of the Item entity.
func (i *Item) QueryHustlerAccessories() *HustlerQuery {
	return NewItemClient(i.config).QueryHustlerAccessories(i)
}

// QueryBase queries the "base" edge of the Item entity.
func (i *Item) QueryBase() *ItemQuery {
	return NewItemClient(i.config).QueryBase(i)
}

// QueryDerivative queries the "derivative" edge of the Item entity.
func (i *Item) QueryDerivative() *ItemQuery {
	return NewItemClient(i.config).QueryDerivative(i)
}

// QueryIndex queries the "index" edge of the Item entity.
func (i *Item) QueryIndex() *SearchQuery {
	return NewItemClient(i.config).QueryIndex(i)
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return NewItemClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", i.Type))
	builder.WriteString(", ")
	builder.WriteString("name_prefix=")
	builder.WriteString(i.NamePrefix)
	builder.WriteString(", ")
	builder.WriteString("name_suffix=")
	builder.WriteString(i.NameSuffix)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("suffix=")
	builder.WriteString(i.Suffix)
	builder.WriteString(", ")
	builder.WriteString("augmented=")
	builder.WriteString(fmt.Sprintf("%v", i.Augmented))
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", i.Count))
	builder.WriteString(", ")
	builder.WriteString("tier=")
	builder.WriteString(fmt.Sprintf("%v", i.Tier))
	builder.WriteString(", ")
	builder.WriteString("greatness=")
	builder.WriteString(fmt.Sprintf("%v", i.Greatness))
	builder.WriteString(", ")
	builder.WriteString("rles=")
	builder.WriteString(fmt.Sprintf("%v", i.Rles))
	builder.WriteString(", ")
	builder.WriteString("svg=")
	builder.WriteString(i.Svg)
	builder.WriteString(", ")
	builder.WriteString("sprite=")
	builder.WriteString(fmt.Sprintf("%v", i.Sprite))
	builder.WriteByte(')')
	return builder.String()
}

// NamedWallets returns the Wallets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedWallets(name string) ([]*WalletItems, error) {
	if i.Edges.namedWallets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedWallets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedWallets(name string, edges ...*WalletItems) {
	if i.Edges.namedWallets == nil {
		i.Edges.namedWallets = make(map[string][]*WalletItems)
	}
	if len(edges) == 0 {
		i.Edges.namedWallets[name] = []*WalletItems{}
	} else {
		i.Edges.namedWallets[name] = append(i.Edges.namedWallets[name], edges...)
	}
}

// NamedDopes returns the Dopes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedDopes(name string) ([]*Dope, error) {
	if i.Edges.namedDopes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedDopes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedDopes(name string, edges ...*Dope) {
	if i.Edges.namedDopes == nil {
		i.Edges.namedDopes = make(map[string][]*Dope)
	}
	if len(edges) == 0 {
		i.Edges.namedDopes[name] = []*Dope{}
	} else {
		i.Edges.namedDopes[name] = append(i.Edges.namedDopes[name], edges...)
	}
}

// NamedHustlerWeapons returns the HustlerWeapons named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedHustlerWeapons(name string) ([]*Hustler, error) {
	if i.Edges.namedHustlerWeapons == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedHustlerWeapons[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedHustlerWeapons(name string, edges ...*Hustler) {
	if i.Edges.namedHustlerWeapons == nil {
		i.Edges.namedHustlerWeapons = make(map[string][]*Hustler)
	}
	if len(edges) == 0 {
		i.Edges.namedHustlerWeapons[name] = []*Hustler{}
	} else {
		i.Edges.namedHustlerWeapons[name] = append(i.Edges.namedHustlerWeapons[name], edges...)
	}
}

// NamedHustlerClothes returns the HustlerClothes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedHustlerClothes(name string) ([]*Hustler, error) {
	if i.Edges.namedHustlerClothes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedHustlerClothes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedHustlerClothes(name string, edges ...*Hustler) {
	if i.Edges.namedHustlerClothes == nil {
		i.Edges.namedHustlerClothes = make(map[string][]*Hustler)
	}
	if len(edges) == 0 {
		i.Edges.namedHustlerClothes[name] = []*Hustler{}
	} else {
		i.Edges.namedHustlerClothes[name] = append(i.Edges.namedHustlerClothes[name], edges...)
	}
}

// NamedHustlerVehicles returns the HustlerVehicles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedHustlerVehicles(name string) ([]*Hustler, error) {
	if i.Edges.namedHustlerVehicles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedHustlerVehicles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedHustlerVehicles(name string, edges ...*Hustler) {
	if i.Edges.namedHustlerVehicles == nil {
		i.Edges.namedHustlerVehicles = make(map[string][]*Hustler)
	}
	if len(edges) == 0 {
		i.Edges.namedHustlerVehicles[name] = []*Hustler{}
	} else {
		i.Edges.namedHustlerVehicles[name] = append(i.Edges.namedHustlerVehicles[name], edges...)
	}
}

// NamedHustlerWaists returns the HustlerWaists named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedHustlerWaists(name string) ([]*Hustler, error) {
	if i.Edges.namedHustlerWaists == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedHustlerWaists[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedHustlerWaists(name string, edges ...*Hustler) {
	if i.Edges.namedHustlerWaists == nil {
		i.Edges.namedHustlerWaists = make(map[string][]*Hustler)
	}
	if len(edges) == 0 {
		i.Edges.namedHustlerWaists[name] = []*Hustler{}
	} else {
		i.Edges.namedHustlerWaists[name] = append(i.Edges.namedHustlerWaists[name], edges...)
	}
}

// NamedHustlerFeet returns the HustlerFeet named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedHustlerFeet(name string) ([]*Hustler, error) {
	if i.Edges.namedHustlerFeet == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedHustlerFeet[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedHustlerFeet(name string, edges ...*Hustler) {
	if i.Edges.namedHustlerFeet == nil {
		i.Edges.namedHustlerFeet = make(map[string][]*Hustler)
	}
	if len(edges) == 0 {
		i.Edges.namedHustlerFeet[name] = []*Hustler{}
	} else {
		i.Edges.namedHustlerFeet[name] = append(i.Edges.namedHustlerFeet[name], edges...)
	}
}

// NamedHustlerHands returns the HustlerHands named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedHustlerHands(name string) ([]*Hustler, error) {
	if i.Edges.namedHustlerHands == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedHustlerHands[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedHustlerHands(name string, edges ...*Hustler) {
	if i.Edges.namedHustlerHands == nil {
		i.Edges.namedHustlerHands = make(map[string][]*Hustler)
	}
	if len(edges) == 0 {
		i.Edges.namedHustlerHands[name] = []*Hustler{}
	} else {
		i.Edges.namedHustlerHands[name] = append(i.Edges.namedHustlerHands[name], edges...)
	}
}

// NamedHustlerDrugs returns the HustlerDrugs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedHustlerDrugs(name string) ([]*Hustler, error) {
	if i.Edges.namedHustlerDrugs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedHustlerDrugs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedHustlerDrugs(name string, edges ...*Hustler) {
	if i.Edges.namedHustlerDrugs == nil {
		i.Edges.namedHustlerDrugs = make(map[string][]*Hustler)
	}
	if len(edges) == 0 {
		i.Edges.namedHustlerDrugs[name] = []*Hustler{}
	} else {
		i.Edges.namedHustlerDrugs[name] = append(i.Edges.namedHustlerDrugs[name], edges...)
	}
}

// NamedHustlerNecks returns the HustlerNecks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedHustlerNecks(name string) ([]*Hustler, error) {
	if i.Edges.namedHustlerNecks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedHustlerNecks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedHustlerNecks(name string, edges ...*Hustler) {
	if i.Edges.namedHustlerNecks == nil {
		i.Edges.namedHustlerNecks = make(map[string][]*Hustler)
	}
	if len(edges) == 0 {
		i.Edges.namedHustlerNecks[name] = []*Hustler{}
	} else {
		i.Edges.namedHustlerNecks[name] = append(i.Edges.namedHustlerNecks[name], edges...)
	}
}

// NamedHustlerRings returns the HustlerRings named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedHustlerRings(name string) ([]*Hustler, error) {
	if i.Edges.namedHustlerRings == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedHustlerRings[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedHustlerRings(name string, edges ...*Hustler) {
	if i.Edges.namedHustlerRings == nil {
		i.Edges.namedHustlerRings = make(map[string][]*Hustler)
	}
	if len(edges) == 0 {
		i.Edges.namedHustlerRings[name] = []*Hustler{}
	} else {
		i.Edges.namedHustlerRings[name] = append(i.Edges.namedHustlerRings[name], edges...)
	}
}

// NamedHustlerAccessories returns the HustlerAccessories named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedHustlerAccessories(name string) ([]*Hustler, error) {
	if i.Edges.namedHustlerAccessories == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedHustlerAccessories[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedHustlerAccessories(name string, edges ...*Hustler) {
	if i.Edges.namedHustlerAccessories == nil {
		i.Edges.namedHustlerAccessories = make(map[string][]*Hustler)
	}
	if len(edges) == 0 {
		i.Edges.namedHustlerAccessories[name] = []*Hustler{}
	} else {
		i.Edges.namedHustlerAccessories[name] = append(i.Edges.namedHustlerAccessories[name], edges...)
	}
}

// NamedDerivative returns the Derivative named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Item) NamedDerivative(name string) ([]*Item, error) {
	if i.Edges.namedDerivative == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedDerivative[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Item) appendNamedDerivative(name string, edges ...*Item) {
	if i.Edges.namedDerivative == nil {
		i.Edges.namedDerivative = make(map[string][]*Item)
	}
	if len(edges) == 0 {
		i.Edges.namedDerivative[name] = []*Item{}
	} else {
		i.Edges.namedDerivative[name] = append(i.Edges.namedDerivative[name], edges...)
	}
}

// Items is a parsable slice of Item.
type Items []*Item
