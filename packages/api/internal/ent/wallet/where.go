// Code generated by ent, DO NOT EDIT.

package wallet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Wallet {
	return predicate.Wallet(sql.FieldContainsFold(FieldID, id))
}

// Paper applies equality check predicate on the "paper" field. It's identical to PaperEQ.
func Paper(v schema.BigInt) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldPaper, v))
}

// LastSetPaperBalanceAt applies equality check predicate on the "last_set_paper_balance_at" field. It's identical to LastSetPaperBalanceAtEQ.
func LastSetPaperBalanceAt(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldLastSetPaperBalanceAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldCreatedAt, v))
}

// PaperEQ applies the EQ predicate on the "paper" field.
func PaperEQ(v schema.BigInt) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldPaper, v))
}

// PaperNEQ applies the NEQ predicate on the "paper" field.
func PaperNEQ(v schema.BigInt) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldPaper, v))
}

// PaperIn applies the In predicate on the "paper" field.
func PaperIn(vs ...schema.BigInt) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldPaper, vs...))
}

// PaperNotIn applies the NotIn predicate on the "paper" field.
func PaperNotIn(vs ...schema.BigInt) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldPaper, vs...))
}

// PaperGT applies the GT predicate on the "paper" field.
func PaperGT(v schema.BigInt) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldPaper, v))
}

// PaperGTE applies the GTE predicate on the "paper" field.
func PaperGTE(v schema.BigInt) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldPaper, v))
}

// PaperLT applies the LT predicate on the "paper" field.
func PaperLT(v schema.BigInt) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldPaper, v))
}

// PaperLTE applies the LTE predicate on the "paper" field.
func PaperLTE(v schema.BigInt) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldPaper, v))
}

// LastSetPaperBalanceAtEQ applies the EQ predicate on the "last_set_paper_balance_at" field.
func LastSetPaperBalanceAtEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldLastSetPaperBalanceAt, v))
}

// LastSetPaperBalanceAtNEQ applies the NEQ predicate on the "last_set_paper_balance_at" field.
func LastSetPaperBalanceAtNEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldLastSetPaperBalanceAt, v))
}

// LastSetPaperBalanceAtIn applies the In predicate on the "last_set_paper_balance_at" field.
func LastSetPaperBalanceAtIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldLastSetPaperBalanceAt, vs...))
}

// LastSetPaperBalanceAtNotIn applies the NotIn predicate on the "last_set_paper_balance_at" field.
func LastSetPaperBalanceAtNotIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldLastSetPaperBalanceAt, vs...))
}

// LastSetPaperBalanceAtGT applies the GT predicate on the "last_set_paper_balance_at" field.
func LastSetPaperBalanceAtGT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldLastSetPaperBalanceAt, v))
}

// LastSetPaperBalanceAtGTE applies the GTE predicate on the "last_set_paper_balance_at" field.
func LastSetPaperBalanceAtGTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldLastSetPaperBalanceAt, v))
}

// LastSetPaperBalanceAtLT applies the LT predicate on the "last_set_paper_balance_at" field.
func LastSetPaperBalanceAtLT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldLastSetPaperBalanceAt, v))
}

// LastSetPaperBalanceAtLTE applies the LTE predicate on the "last_set_paper_balance_at" field.
func LastSetPaperBalanceAtLTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldLastSetPaperBalanceAt, v))
}

// LastSetPaperBalanceAtIsNil applies the IsNil predicate on the "last_set_paper_balance_at" field.
func LastSetPaperBalanceAtIsNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldIsNull(FieldLastSetPaperBalanceAt))
}

// LastSetPaperBalanceAtNotNil applies the NotNil predicate on the "last_set_paper_balance_at" field.
func LastSetPaperBalanceAtNotNil() predicate.Wallet {
	return predicate.Wallet(sql.FieldNotNull(FieldLastSetPaperBalanceAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldCreatedAt, v))
}

// HasDopes applies the HasEdge predicate on the "dopes" edge.
func HasDopes() predicate.Wallet {
	return predicate.Wallet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DopesTable, DopesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDopesWith applies the HasEdge predicate on the "dopes" edge with a given conditions (other predicates).
func HasDopesWith(preds ...predicate.Dope) predicate.Wallet {
	return predicate.Wallet(func(s *sql.Selector) {
		step := newDopesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Wallet {
	return predicate.Wallet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.WalletItems) predicate.Wallet {
	return predicate.Wallet(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHustlers applies the HasEdge predicate on the "hustlers" edge.
func HasHustlers() predicate.Wallet {
	return predicate.Wallet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HustlersTable, HustlersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlersWith applies the HasEdge predicate on the "hustlers" edge with a given conditions (other predicates).
func HasHustlersWith(preds ...predicate.Hustler) predicate.Wallet {
	return predicate.Wallet(func(s *sql.Selector) {
		step := newHustlersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Wallet) predicate.Wallet {
	return predicate.Wallet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Wallet) predicate.Wallet {
	return predicate.Wallet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Wallet) predicate.Wallet {
	return predicate.Wallet(sql.NotPredicates(p))
}
