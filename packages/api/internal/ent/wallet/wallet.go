// Code generated by ent, DO NOT EDIT.

package wallet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/schema"
)

const (
	// Label holds the string label denoting the wallet type in the database.
	Label = "wallet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPaper holds the string denoting the paper field in the database.
	FieldPaper = "paper"
	// FieldLastSetPaperBalanceAt holds the string denoting the last_set_paper_balance_at field in the database.
	FieldLastSetPaperBalanceAt = "last_set_paper_balance_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeDopes holds the string denoting the dopes edge name in mutations.
	EdgeDopes = "dopes"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeHustlers holds the string denoting the hustlers edge name in mutations.
	EdgeHustlers = "hustlers"
	// Table holds the table name of the wallet in the database.
	Table = "wallets"
	// DopesTable is the table that holds the dopes relation/edge.
	DopesTable = "dopes"
	// DopesInverseTable is the table name for the Dope entity.
	// It exists in this package in order to avoid circular dependency with the "dope" package.
	DopesInverseTable = "dopes"
	// DopesColumn is the table column denoting the dopes relation/edge.
	DopesColumn = "wallet_dopes"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "wallet_items"
	// ItemsInverseTable is the table name for the WalletItems entity.
	// It exists in this package in order to avoid circular dependency with the "walletitems" package.
	ItemsInverseTable = "wallet_items"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "wallet_items"
	// HustlersTable is the table that holds the hustlers relation/edge.
	HustlersTable = "hustlers"
	// HustlersInverseTable is the table name for the Hustler entity.
	// It exists in this package in order to avoid circular dependency with the "hustler" package.
	HustlersInverseTable = "hustlers"
	// HustlersColumn is the table column denoting the hustlers relation/edge.
	HustlersColumn = "wallet_hustlers"
)

// Columns holds all SQL columns for wallet fields.
var Columns = []string{
	FieldID,
	FieldPaper,
	FieldLastSetPaperBalanceAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPaper holds the default value on creation for the "paper" field.
	DefaultPaper func() schema.BigInt
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Wallet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPaper orders the results by the paper field.
func ByPaper(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaper, opts...).ToFunc()
}

// ByLastSetPaperBalanceAt orders the results by the last_set_paper_balance_at field.
func ByLastSetPaperBalanceAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSetPaperBalanceAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDopesCount orders the results by dopes count.
func ByDopesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDopesStep(), opts...)
	}
}

// ByDopes orders the results by dopes terms.
func ByDopes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDopesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHustlersCount orders the results by hustlers count.
func ByHustlersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHustlersStep(), opts...)
	}
}

// ByHustlers orders the results by hustlers terms.
func ByHustlers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHustlersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDopesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DopesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DopesTable, DopesColumn),
	)
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
	)
}
func newHustlersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HustlersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HustlersTable, HustlersColumn),
	)
}
