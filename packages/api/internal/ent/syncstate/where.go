// Code generated by ent, DO NOT EDIT.

package syncstate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SyncState {
	return predicate.SyncState(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SyncState {
	return predicate.SyncState(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldContainsFold(FieldID, id))
}

// ContractName applies equality check predicate on the "contract_name" field. It's identical to ContractNameEQ.
func ContractName(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldContractName, v))
}

// StartBlock applies equality check predicate on the "start_block" field. It's identical to StartBlockEQ.
func StartBlock(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldStartBlock, v))
}

// BlockTime applies equality check predicate on the "block_time" field. It's identical to BlockTimeEQ.
func BlockTime(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldBlockTime, v))
}

// LastSyncedAt applies equality check predicate on the "last_synced_at" field. It's identical to LastSyncedAtEQ.
func LastSyncedAt(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldLastSyncedAt, v))
}

// ContractNameEQ applies the EQ predicate on the "contract_name" field.
func ContractNameEQ(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldContractName, v))
}

// ContractNameNEQ applies the NEQ predicate on the "contract_name" field.
func ContractNameNEQ(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldNEQ(FieldContractName, v))
}

// ContractNameIn applies the In predicate on the "contract_name" field.
func ContractNameIn(vs ...string) predicate.SyncState {
	return predicate.SyncState(sql.FieldIn(FieldContractName, vs...))
}

// ContractNameNotIn applies the NotIn predicate on the "contract_name" field.
func ContractNameNotIn(vs ...string) predicate.SyncState {
	return predicate.SyncState(sql.FieldNotIn(FieldContractName, vs...))
}

// ContractNameGT applies the GT predicate on the "contract_name" field.
func ContractNameGT(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldGT(FieldContractName, v))
}

// ContractNameGTE applies the GTE predicate on the "contract_name" field.
func ContractNameGTE(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldGTE(FieldContractName, v))
}

// ContractNameLT applies the LT predicate on the "contract_name" field.
func ContractNameLT(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldLT(FieldContractName, v))
}

// ContractNameLTE applies the LTE predicate on the "contract_name" field.
func ContractNameLTE(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldLTE(FieldContractName, v))
}

// ContractNameContains applies the Contains predicate on the "contract_name" field.
func ContractNameContains(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldContains(FieldContractName, v))
}

// ContractNameHasPrefix applies the HasPrefix predicate on the "contract_name" field.
func ContractNameHasPrefix(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldHasPrefix(FieldContractName, v))
}

// ContractNameHasSuffix applies the HasSuffix predicate on the "contract_name" field.
func ContractNameHasSuffix(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldHasSuffix(FieldContractName, v))
}

// ContractNameIsNil applies the IsNil predicate on the "contract_name" field.
func ContractNameIsNil() predicate.SyncState {
	return predicate.SyncState(sql.FieldIsNull(FieldContractName))
}

// ContractNameNotNil applies the NotNil predicate on the "contract_name" field.
func ContractNameNotNil() predicate.SyncState {
	return predicate.SyncState(sql.FieldNotNull(FieldContractName))
}

// ContractNameEqualFold applies the EqualFold predicate on the "contract_name" field.
func ContractNameEqualFold(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldEqualFold(FieldContractName, v))
}

// ContractNameContainsFold applies the ContainsFold predicate on the "contract_name" field.
func ContractNameContainsFold(v string) predicate.SyncState {
	return predicate.SyncState(sql.FieldContainsFold(FieldContractName, v))
}

// StartBlockEQ applies the EQ predicate on the "start_block" field.
func StartBlockEQ(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldStartBlock, v))
}

// StartBlockNEQ applies the NEQ predicate on the "start_block" field.
func StartBlockNEQ(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldNEQ(FieldStartBlock, v))
}

// StartBlockIn applies the In predicate on the "start_block" field.
func StartBlockIn(vs ...uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldIn(FieldStartBlock, vs...))
}

// StartBlockNotIn applies the NotIn predicate on the "start_block" field.
func StartBlockNotIn(vs ...uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldNotIn(FieldStartBlock, vs...))
}

// StartBlockGT applies the GT predicate on the "start_block" field.
func StartBlockGT(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldGT(FieldStartBlock, v))
}

// StartBlockGTE applies the GTE predicate on the "start_block" field.
func StartBlockGTE(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldGTE(FieldStartBlock, v))
}

// StartBlockLT applies the LT predicate on the "start_block" field.
func StartBlockLT(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldLT(FieldStartBlock, v))
}

// StartBlockLTE applies the LTE predicate on the "start_block" field.
func StartBlockLTE(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldLTE(FieldStartBlock, v))
}

// BlockTimeEQ applies the EQ predicate on the "block_time" field.
func BlockTimeEQ(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldBlockTime, v))
}

// BlockTimeNEQ applies the NEQ predicate on the "block_time" field.
func BlockTimeNEQ(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldNEQ(FieldBlockTime, v))
}

// BlockTimeIn applies the In predicate on the "block_time" field.
func BlockTimeIn(vs ...time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldIn(FieldBlockTime, vs...))
}

// BlockTimeNotIn applies the NotIn predicate on the "block_time" field.
func BlockTimeNotIn(vs ...time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldNotIn(FieldBlockTime, vs...))
}

// BlockTimeGT applies the GT predicate on the "block_time" field.
func BlockTimeGT(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldGT(FieldBlockTime, v))
}

// BlockTimeGTE applies the GTE predicate on the "block_time" field.
func BlockTimeGTE(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldGTE(FieldBlockTime, v))
}

// BlockTimeLT applies the LT predicate on the "block_time" field.
func BlockTimeLT(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldLT(FieldBlockTime, v))
}

// BlockTimeLTE applies the LTE predicate on the "block_time" field.
func BlockTimeLTE(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldLTE(FieldBlockTime, v))
}

// BlockTimeIsNil applies the IsNil predicate on the "block_time" field.
func BlockTimeIsNil() predicate.SyncState {
	return predicate.SyncState(sql.FieldIsNull(FieldBlockTime))
}

// BlockTimeNotNil applies the NotNil predicate on the "block_time" field.
func BlockTimeNotNil() predicate.SyncState {
	return predicate.SyncState(sql.FieldNotNull(FieldBlockTime))
}

// LastSyncedAtEQ applies the EQ predicate on the "last_synced_at" field.
func LastSyncedAtEQ(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldLastSyncedAt, v))
}

// LastSyncedAtNEQ applies the NEQ predicate on the "last_synced_at" field.
func LastSyncedAtNEQ(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldNEQ(FieldLastSyncedAt, v))
}

// LastSyncedAtIn applies the In predicate on the "last_synced_at" field.
func LastSyncedAtIn(vs ...time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldIn(FieldLastSyncedAt, vs...))
}

// LastSyncedAtNotIn applies the NotIn predicate on the "last_synced_at" field.
func LastSyncedAtNotIn(vs ...time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldNotIn(FieldLastSyncedAt, vs...))
}

// LastSyncedAtGT applies the GT predicate on the "last_synced_at" field.
func LastSyncedAtGT(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldGT(FieldLastSyncedAt, v))
}

// LastSyncedAtGTE applies the GTE predicate on the "last_synced_at" field.
func LastSyncedAtGTE(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldGTE(FieldLastSyncedAt, v))
}

// LastSyncedAtLT applies the LT predicate on the "last_synced_at" field.
func LastSyncedAtLT(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldLT(FieldLastSyncedAt, v))
}

// LastSyncedAtLTE applies the LTE predicate on the "last_synced_at" field.
func LastSyncedAtLTE(v time.Time) predicate.SyncState {
	return predicate.SyncState(sql.FieldLTE(FieldLastSyncedAt, v))
}

// LastSyncedAtIsNil applies the IsNil predicate on the "last_synced_at" field.
func LastSyncedAtIsNil() predicate.SyncState {
	return predicate.SyncState(sql.FieldIsNull(FieldLastSyncedAt))
}

// LastSyncedAtNotNil applies the NotNil predicate on the "last_synced_at" field.
func LastSyncedAtNotNil() predicate.SyncState {
	return predicate.SyncState(sql.FieldNotNull(FieldLastSyncedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SyncState) predicate.SyncState {
	return predicate.SyncState(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SyncState) predicate.SyncState {
	return predicate.SyncState(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SyncState) predicate.SyncState {
	return predicate.SyncState(sql.NotPredicates(p))
}
