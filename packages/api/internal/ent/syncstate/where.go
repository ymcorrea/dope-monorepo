// Code generated by ent, DO NOT EDIT.

package syncstate

import (
	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SyncState {
	return predicate.SyncState(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SyncState {
	return predicate.SyncState(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SyncState {
	return predicate.SyncState(sql.FieldContainsFold(FieldID, id))
}

// StartBlock applies equality check predicate on the "start_block" field. It's identical to StartBlockEQ.
func StartBlock(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldStartBlock, v))
}

// StartBlockEQ applies the EQ predicate on the "start_block" field.
func StartBlockEQ(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldEQ(FieldStartBlock, v))
}

// StartBlockNEQ applies the NEQ predicate on the "start_block" field.
func StartBlockNEQ(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldNEQ(FieldStartBlock, v))
}

// StartBlockIn applies the In predicate on the "start_block" field.
func StartBlockIn(vs ...uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldIn(FieldStartBlock, vs...))
}

// StartBlockNotIn applies the NotIn predicate on the "start_block" field.
func StartBlockNotIn(vs ...uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldNotIn(FieldStartBlock, vs...))
}

// StartBlockGT applies the GT predicate on the "start_block" field.
func StartBlockGT(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldGT(FieldStartBlock, v))
}

// StartBlockGTE applies the GTE predicate on the "start_block" field.
func StartBlockGTE(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldGTE(FieldStartBlock, v))
}

// StartBlockLT applies the LT predicate on the "start_block" field.
func StartBlockLT(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldLT(FieldStartBlock, v))
}

// StartBlockLTE applies the LTE predicate on the "start_block" field.
func StartBlockLTE(v uint64) predicate.SyncState {
	return predicate.SyncState(sql.FieldLTE(FieldStartBlock, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SyncState) predicate.SyncState {
	return predicate.SyncState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SyncState) predicate.SyncState {
	return predicate.SyncState(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SyncState) predicate.SyncState {
	return predicate.SyncState(func(s *sql.Selector) {
		p(s.Not())
	})
}
