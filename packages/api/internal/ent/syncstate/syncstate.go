// Code generated by ent, DO NOT EDIT.

package syncstate

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the syncstate type in the database.
	Label = "sync_state"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContractName holds the string denoting the contract_name field in the database.
	FieldContractName = "contract_name"
	// FieldStartBlock holds the string denoting the start_block field in the database.
	FieldStartBlock = "start_block"
	// FieldBlockTime holds the string denoting the block_time field in the database.
	FieldBlockTime = "block_time"
	// FieldLastSyncedAt holds the string denoting the last_synced_at field in the database.
	FieldLastSyncedAt = "last_synced_at"
	// Table holds the table name of the syncstate in the database.
	Table = "sync_states"
)

// Columns holds all SQL columns for syncstate fields.
var Columns = []string{
	FieldID,
	FieldContractName,
	FieldStartBlock,
	FieldBlockTime,
	FieldLastSyncedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLastSyncedAt holds the default value on creation for the "last_synced_at" field.
	DefaultLastSyncedAt func() time.Time
	// UpdateDefaultLastSyncedAt holds the default value on update for the "last_synced_at" field.
	UpdateDefaultLastSyncedAt func() time.Time
)

// OrderOption defines the ordering options for the SyncState queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContractName orders the results by the contract_name field.
func ByContractName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractName, opts...).ToFunc()
}

// ByStartBlock orders the results by the start_block field.
func ByStartBlock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartBlock, opts...).ToFunc()
}

// ByBlockTime orders the results by the block_time field.
func ByBlockTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockTime, opts...).ToFunc()
}

// ByLastSyncedAt orders the results by the last_synced_at field.
func ByLastSyncedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSyncedAt, opts...).ToFunc()
}
