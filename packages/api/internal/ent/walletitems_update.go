// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/schema"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/wallet"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/walletitems"
)

// WalletItemsUpdate is the builder for updating WalletItems entities.
type WalletItemsUpdate struct {
	config
	hooks    []Hook
	mutation *WalletItemsMutation
}

// Where appends a list predicates to the WalletItemsUpdate builder.
func (wiu *WalletItemsUpdate) Where(ps ...predicate.WalletItems) *WalletItemsUpdate {
	wiu.mutation.Where(ps...)
	return wiu
}

// SetBalance sets the "balance" field.
func (wiu *WalletItemsUpdate) SetBalance(si schema.BigInt) *WalletItemsUpdate {
	wiu.mutation.ResetBalance()
	wiu.mutation.SetBalance(si)
	return wiu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (wiu *WalletItemsUpdate) SetNillableBalance(si *schema.BigInt) *WalletItemsUpdate {
	if si != nil {
		wiu.SetBalance(*si)
	}
	return wiu
}

// AddBalance adds si to the "balance" field.
func (wiu *WalletItemsUpdate) AddBalance(si schema.BigInt) *WalletItemsUpdate {
	wiu.mutation.AddBalance(si)
	return wiu
}

// SetWalletID sets the "wallet" edge to the Wallet entity by ID.
func (wiu *WalletItemsUpdate) SetWalletID(id string) *WalletItemsUpdate {
	wiu.mutation.SetWalletID(id)
	return wiu
}

// SetNillableWalletID sets the "wallet" edge to the Wallet entity by ID if the given value is not nil.
func (wiu *WalletItemsUpdate) SetNillableWalletID(id *string) *WalletItemsUpdate {
	if id != nil {
		wiu = wiu.SetWalletID(*id)
	}
	return wiu
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (wiu *WalletItemsUpdate) SetWallet(w *Wallet) *WalletItemsUpdate {
	return wiu.SetWalletID(w.ID)
}

// SetItemID sets the "item" edge to the Item entity by ID.
func (wiu *WalletItemsUpdate) SetItemID(id string) *WalletItemsUpdate {
	wiu.mutation.SetItemID(id)
	return wiu
}

// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
func (wiu *WalletItemsUpdate) SetNillableItemID(id *string) *WalletItemsUpdate {
	if id != nil {
		wiu = wiu.SetItemID(*id)
	}
	return wiu
}

// SetItem sets the "item" edge to the Item entity.
func (wiu *WalletItemsUpdate) SetItem(i *Item) *WalletItemsUpdate {
	return wiu.SetItemID(i.ID)
}

// Mutation returns the WalletItemsMutation object of the builder.
func (wiu *WalletItemsUpdate) Mutation() *WalletItemsMutation {
	return wiu.mutation
}

// ClearWallet clears the "wallet" edge to the Wallet entity.
func (wiu *WalletItemsUpdate) ClearWallet() *WalletItemsUpdate {
	wiu.mutation.ClearWallet()
	return wiu
}

// ClearItem clears the "item" edge to the Item entity.
func (wiu *WalletItemsUpdate) ClearItem() *WalletItemsUpdate {
	wiu.mutation.ClearItem()
	return wiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wiu *WalletItemsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WalletItemsMutation](ctx, wiu.sqlSave, wiu.mutation, wiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wiu *WalletItemsUpdate) SaveX(ctx context.Context) int {
	affected, err := wiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wiu *WalletItemsUpdate) Exec(ctx context.Context) error {
	_, err := wiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wiu *WalletItemsUpdate) ExecX(ctx context.Context) {
	if err := wiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wiu *WalletItemsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(walletitems.Table, walletitems.Columns, sqlgraph.NewFieldSpec(walletitems.FieldID, field.TypeString))
	if ps := wiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wiu.mutation.Balance(); ok {
		_spec.SetField(walletitems.FieldBalance, field.TypeInt, value)
	}
	if value, ok := wiu.mutation.AddedBalance(); ok {
		_spec.AddField(walletitems.FieldBalance, field.TypeInt, value)
	}
	if wiu.mutation.WalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   walletitems.WalletTable,
			Columns: []string{walletitems.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiu.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   walletitems.WalletTable,
			Columns: []string{walletitems.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wiu.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   walletitems.ItemTable,
			Columns: []string{walletitems.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiu.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   walletitems.ItemTable,
			Columns: []string{walletitems.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{walletitems.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wiu.mutation.done = true
	return n, nil
}

// WalletItemsUpdateOne is the builder for updating a single WalletItems entity.
type WalletItemsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WalletItemsMutation
}

// SetBalance sets the "balance" field.
func (wiuo *WalletItemsUpdateOne) SetBalance(si schema.BigInt) *WalletItemsUpdateOne {
	wiuo.mutation.ResetBalance()
	wiuo.mutation.SetBalance(si)
	return wiuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (wiuo *WalletItemsUpdateOne) SetNillableBalance(si *schema.BigInt) *WalletItemsUpdateOne {
	if si != nil {
		wiuo.SetBalance(*si)
	}
	return wiuo
}

// AddBalance adds si to the "balance" field.
func (wiuo *WalletItemsUpdateOne) AddBalance(si schema.BigInt) *WalletItemsUpdateOne {
	wiuo.mutation.AddBalance(si)
	return wiuo
}

// SetWalletID sets the "wallet" edge to the Wallet entity by ID.
func (wiuo *WalletItemsUpdateOne) SetWalletID(id string) *WalletItemsUpdateOne {
	wiuo.mutation.SetWalletID(id)
	return wiuo
}

// SetNillableWalletID sets the "wallet" edge to the Wallet entity by ID if the given value is not nil.
func (wiuo *WalletItemsUpdateOne) SetNillableWalletID(id *string) *WalletItemsUpdateOne {
	if id != nil {
		wiuo = wiuo.SetWalletID(*id)
	}
	return wiuo
}

// SetWallet sets the "wallet" edge to the Wallet entity.
func (wiuo *WalletItemsUpdateOne) SetWallet(w *Wallet) *WalletItemsUpdateOne {
	return wiuo.SetWalletID(w.ID)
}

// SetItemID sets the "item" edge to the Item entity by ID.
func (wiuo *WalletItemsUpdateOne) SetItemID(id string) *WalletItemsUpdateOne {
	wiuo.mutation.SetItemID(id)
	return wiuo
}

// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
func (wiuo *WalletItemsUpdateOne) SetNillableItemID(id *string) *WalletItemsUpdateOne {
	if id != nil {
		wiuo = wiuo.SetItemID(*id)
	}
	return wiuo
}

// SetItem sets the "item" edge to the Item entity.
func (wiuo *WalletItemsUpdateOne) SetItem(i *Item) *WalletItemsUpdateOne {
	return wiuo.SetItemID(i.ID)
}

// Mutation returns the WalletItemsMutation object of the builder.
func (wiuo *WalletItemsUpdateOne) Mutation() *WalletItemsMutation {
	return wiuo.mutation
}

// ClearWallet clears the "wallet" edge to the Wallet entity.
func (wiuo *WalletItemsUpdateOne) ClearWallet() *WalletItemsUpdateOne {
	wiuo.mutation.ClearWallet()
	return wiuo
}

// ClearItem clears the "item" edge to the Item entity.
func (wiuo *WalletItemsUpdateOne) ClearItem() *WalletItemsUpdateOne {
	wiuo.mutation.ClearItem()
	return wiuo
}

// Where appends a list predicates to the WalletItemsUpdate builder.
func (wiuo *WalletItemsUpdateOne) Where(ps ...predicate.WalletItems) *WalletItemsUpdateOne {
	wiuo.mutation.Where(ps...)
	return wiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wiuo *WalletItemsUpdateOne) Select(field string, fields ...string) *WalletItemsUpdateOne {
	wiuo.fields = append([]string{field}, fields...)
	return wiuo
}

// Save executes the query and returns the updated WalletItems entity.
func (wiuo *WalletItemsUpdateOne) Save(ctx context.Context) (*WalletItems, error) {
	return withHooks[*WalletItems, WalletItemsMutation](ctx, wiuo.sqlSave, wiuo.mutation, wiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wiuo *WalletItemsUpdateOne) SaveX(ctx context.Context) *WalletItems {
	node, err := wiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wiuo *WalletItemsUpdateOne) Exec(ctx context.Context) error {
	_, err := wiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wiuo *WalletItemsUpdateOne) ExecX(ctx context.Context) {
	if err := wiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wiuo *WalletItemsUpdateOne) sqlSave(ctx context.Context) (_node *WalletItems, err error) {
	_spec := sqlgraph.NewUpdateSpec(walletitems.Table, walletitems.Columns, sqlgraph.NewFieldSpec(walletitems.FieldID, field.TypeString))
	id, ok := wiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WalletItems.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, walletitems.FieldID)
		for _, f := range fields {
			if !walletitems.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != walletitems.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wiuo.mutation.Balance(); ok {
		_spec.SetField(walletitems.FieldBalance, field.TypeInt, value)
	}
	if value, ok := wiuo.mutation.AddedBalance(); ok {
		_spec.AddField(walletitems.FieldBalance, field.TypeInt, value)
	}
	if wiuo.mutation.WalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   walletitems.WalletTable,
			Columns: []string{walletitems.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiuo.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   walletitems.WalletTable,
			Columns: []string{walletitems.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wiuo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   walletitems.ItemTable,
			Columns: []string{walletitems.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiuo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   walletitems.ItemTable,
			Columns: []string{walletitems.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WalletItems{config: wiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{walletitems.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wiuo.mutation.done = true
	return _node, nil
}
