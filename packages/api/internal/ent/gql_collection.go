// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/bodypart"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/event"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustleritem"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustlerquest"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustlerrelation"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/hustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/item"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/search"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/syncstate"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/wallet"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/walletitems"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (bp *BodyPartQuery) CollectFields(ctx context.Context, satisfies ...string) (*BodyPartQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return bp, nil
	}
	if err := bp.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return bp, nil
}

func (bp *BodyPartQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(bodypart.Columns))
		selectedFields = []string{bodypart.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "hustlerBodies":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: bp.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			bp.WithNamedHustlerBodies(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerHairs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: bp.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			bp.WithNamedHustlerHairs(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerBeards":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: bp.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			bp.WithNamedHustlerBeards(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "type":
			if _, ok := fieldSeen[bodypart.FieldType]; !ok {
				selectedFields = append(selectedFields, bodypart.FieldType)
				fieldSeen[bodypart.FieldType] = struct{}{}
			}
		case "sex":
			if _, ok := fieldSeen[bodypart.FieldSex]; !ok {
				selectedFields = append(selectedFields, bodypart.FieldSex)
				fieldSeen[bodypart.FieldSex] = struct{}{}
			}
		case "rle":
			if _, ok := fieldSeen[bodypart.FieldRle]; !ok {
				selectedFields = append(selectedFields, bodypart.FieldRle)
				fieldSeen[bodypart.FieldRle] = struct{}{}
			}
		case "sprite":
			if _, ok := fieldSeen[bodypart.FieldSprite]; !ok {
				selectedFields = append(selectedFields, bodypart.FieldSprite)
				fieldSeen[bodypart.FieldSprite] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		bp.Select(selectedFields...)
	}
	return nil
}

type bodypartPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []BodyPartPaginateOption
}

func newBodyPartPaginateArgs(rv map[string]any) *bodypartPaginateArgs {
	args := &bodypartPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*BodyPartWhereInput); ok {
		args.opts = append(args.opts, WithBodyPartFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (d *DopeQuery) CollectFields(ctx context.Context, satisfies ...string) (*DopeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return d, nil
	}
	if err := d.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return d, nil
}

func (d *DopeQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(dope.Columns))
		selectedFields = []string{dope.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "wallet":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WalletClient{config: d.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			d.withWallet = query
		case "items":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: d.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			d.WithNamedItems(alias, func(wq *ItemQuery) {
				*wq = *query
			})
		case "index":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SearchClient{config: d.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			d.withIndex = query
		case "claimed":
			if _, ok := fieldSeen[dope.FieldClaimed]; !ok {
				selectedFields = append(selectedFields, dope.FieldClaimed)
				fieldSeen[dope.FieldClaimed] = struct{}{}
			}
		case "lastCheckedPaperClaim":
			if _, ok := fieldSeen[dope.FieldLastCheckedPaperClaim]; !ok {
				selectedFields = append(selectedFields, dope.FieldLastCheckedPaperClaim)
				fieldSeen[dope.FieldLastCheckedPaperClaim] = struct{}{}
			}
		case "opened":
			if _, ok := fieldSeen[dope.FieldOpened]; !ok {
				selectedFields = append(selectedFields, dope.FieldOpened)
				fieldSeen[dope.FieldOpened] = struct{}{}
			}
		case "lastCheckedGearClaim":
			if _, ok := fieldSeen[dope.FieldLastCheckedGearClaim]; !ok {
				selectedFields = append(selectedFields, dope.FieldLastCheckedGearClaim)
				fieldSeen[dope.FieldLastCheckedGearClaim] = struct{}{}
			}
		case "score":
			if _, ok := fieldSeen[dope.FieldScore]; !ok {
				selectedFields = append(selectedFields, dope.FieldScore)
				fieldSeen[dope.FieldScore] = struct{}{}
			}
		case "rank":
			if _, ok := fieldSeen[dope.FieldRank]; !ok {
				selectedFields = append(selectedFields, dope.FieldRank)
				fieldSeen[dope.FieldRank] = struct{}{}
			}
		case "order":
			if _, ok := fieldSeen[dope.FieldOrder]; !ok {
				selectedFields = append(selectedFields, dope.FieldOrder)
				fieldSeen[dope.FieldOrder] = struct{}{}
			}
		case "bestAskPriceEth":
			if _, ok := fieldSeen[dope.FieldBestAskPriceEth]; !ok {
				selectedFields = append(selectedFields, dope.FieldBestAskPriceEth)
				fieldSeen[dope.FieldBestAskPriceEth] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		d.Select(selectedFields...)
	}
	return nil
}

type dopePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DopePaginateOption
}

func newDopePaginateArgs(rv map[string]any) *dopePaginateArgs {
	args := &dopePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &DopeOrder{Field: &DopeOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithDopeOrder(order))
			}
		case *DopeOrder:
			if v != nil {
				args.opts = append(args.opts, WithDopeOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*DopeWhereInput); ok {
		args.opts = append(args.opts, WithDopeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *EventQuery) CollectFields(ctx context.Context, satisfies ...string) (*EventQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *EventQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(event.Columns))
		selectedFields = []string{event.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "address":
			if _, ok := fieldSeen[event.FieldAddress]; !ok {
				selectedFields = append(selectedFields, event.FieldAddress)
				fieldSeen[event.FieldAddress] = struct{}{}
			}
		case "index":
			if _, ok := fieldSeen[event.FieldIndex]; !ok {
				selectedFields = append(selectedFields, event.FieldIndex)
				fieldSeen[event.FieldIndex] = struct{}{}
			}
		case "hash":
			if _, ok := fieldSeen[event.FieldHash]; !ok {
				selectedFields = append(selectedFields, event.FieldHash)
				fieldSeen[event.FieldHash] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[event.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, event.FieldCreatedAt)
				fieldSeen[event.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[event.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, event.FieldUpdatedAt)
				fieldSeen[event.FieldUpdatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		e.Select(selectedFields...)
	}
	return nil
}

type eventPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EventPaginateOption
}

func newEventPaginateArgs(rv map[string]any) *eventPaginateArgs {
	args := &eventPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*EventWhereInput); ok {
		args.opts = append(args.opts, WithEventFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gh *GameHustlerQuery) CollectFields(ctx context.Context, satisfies ...string) (*GameHustlerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return gh, nil
	}
	if err := gh.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return gh, nil
}

func (gh *GameHustlerQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(gamehustler.Columns))
		selectedFields = []string{gamehustler.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "relations":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GameHustlerRelationClient{config: gh.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			gh.WithNamedRelations(alias, func(wq *GameHustlerRelationQuery) {
				*wq = *query
			})
		case "items":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GameHustlerItemClient{config: gh.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			gh.WithNamedItems(alias, func(wq *GameHustlerItemQuery) {
				*wq = *query
			})
		case "quests":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GameHustlerQuestClient{config: gh.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			gh.WithNamedQuests(alias, func(wq *GameHustlerQuestQuery) {
				*wq = *query
			})
		case "lastPosition":
			if _, ok := fieldSeen[gamehustler.FieldLastPosition]; !ok {
				selectedFields = append(selectedFields, gamehustler.FieldLastPosition)
				fieldSeen[gamehustler.FieldLastPosition] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[gamehustler.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, gamehustler.FieldCreatedAt)
				fieldSeen[gamehustler.FieldCreatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		gh.Select(selectedFields...)
	}
	return nil
}

type gamehustlerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GameHustlerPaginateOption
}

func newGameHustlerPaginateArgs(rv map[string]any) *gamehustlerPaginateArgs {
	args := &gamehustlerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &GameHustlerOrder{Field: &GameHustlerOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithGameHustlerOrder(order))
			}
		case *GameHustlerOrder:
			if v != nil {
				args.opts = append(args.opts, WithGameHustlerOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*GameHustlerWhereInput); ok {
		args.opts = append(args.opts, WithGameHustlerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ghi *GameHustlerItemQuery) CollectFields(ctx context.Context, satisfies ...string) (*GameHustlerItemQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ghi, nil
	}
	if err := ghi.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ghi, nil
}

func (ghi *GameHustlerItemQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(gamehustleritem.Columns))
		selectedFields = []string{gamehustleritem.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "hustler":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GameHustlerClient{config: ghi.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ghi.withHustler = query
		case "item":
			if _, ok := fieldSeen[gamehustleritem.FieldItem]; !ok {
				selectedFields = append(selectedFields, gamehustleritem.FieldItem)
				fieldSeen[gamehustleritem.FieldItem] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ghi.Select(selectedFields...)
	}
	return nil
}

type gamehustleritemPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GameHustlerItemPaginateOption
}

func newGameHustlerItemPaginateArgs(rv map[string]any) *gamehustleritemPaginateArgs {
	args := &gamehustleritemPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GameHustlerItemWhereInput); ok {
		args.opts = append(args.opts, WithGameHustlerItemFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ghq *GameHustlerQuestQuery) CollectFields(ctx context.Context, satisfies ...string) (*GameHustlerQuestQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ghq, nil
	}
	if err := ghq.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ghq, nil
}

func (ghq *GameHustlerQuestQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(gamehustlerquest.Columns))
		selectedFields = []string{gamehustlerquest.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "hustler":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GameHustlerClient{config: ghq.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ghq.withHustler = query
		case "quest":
			if _, ok := fieldSeen[gamehustlerquest.FieldQuest]; !ok {
				selectedFields = append(selectedFields, gamehustlerquest.FieldQuest)
				fieldSeen[gamehustlerquest.FieldQuest] = struct{}{}
			}
		case "completed":
			if _, ok := fieldSeen[gamehustlerquest.FieldCompleted]; !ok {
				selectedFields = append(selectedFields, gamehustlerquest.FieldCompleted)
				fieldSeen[gamehustlerquest.FieldCompleted] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ghq.Select(selectedFields...)
	}
	return nil
}

type gamehustlerquestPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GameHustlerQuestPaginateOption
}

func newGameHustlerQuestPaginateArgs(rv map[string]any) *gamehustlerquestPaginateArgs {
	args := &gamehustlerquestPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GameHustlerQuestWhereInput); ok {
		args.opts = append(args.opts, WithGameHustlerQuestFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ghr *GameHustlerRelationQuery) CollectFields(ctx context.Context, satisfies ...string) (*GameHustlerRelationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ghr, nil
	}
	if err := ghr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ghr, nil
}

func (ghr *GameHustlerRelationQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(gamehustlerrelation.Columns))
		selectedFields = []string{gamehustlerrelation.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "hustler":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GameHustlerClient{config: ghr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ghr.withHustler = query
		case "citizen":
			if _, ok := fieldSeen[gamehustlerrelation.FieldCitizen]; !ok {
				selectedFields = append(selectedFields, gamehustlerrelation.FieldCitizen)
				fieldSeen[gamehustlerrelation.FieldCitizen] = struct{}{}
			}
		case "conversation":
			if _, ok := fieldSeen[gamehustlerrelation.FieldConversation]; !ok {
				selectedFields = append(selectedFields, gamehustlerrelation.FieldConversation)
				fieldSeen[gamehustlerrelation.FieldConversation] = struct{}{}
			}
		case "text":
			if _, ok := fieldSeen[gamehustlerrelation.FieldText]; !ok {
				selectedFields = append(selectedFields, gamehustlerrelation.FieldText)
				fieldSeen[gamehustlerrelation.FieldText] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ghr.Select(selectedFields...)
	}
	return nil
}

type gamehustlerrelationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GameHustlerRelationPaginateOption
}

func newGameHustlerRelationPaginateArgs(rv map[string]any) *gamehustlerrelationPaginateArgs {
	args := &gamehustlerrelationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GameHustlerRelationWhereInput); ok {
		args.opts = append(args.opts, WithGameHustlerRelationFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (h *HustlerQuery) CollectFields(ctx context.Context, satisfies ...string) (*HustlerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return h, nil
	}
	if err := h.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return h, nil
}

func (h *HustlerQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(hustler.Columns))
		selectedFields = []string{hustler.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "wallet":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WalletClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withWallet = query
		case "weapon":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withWeapon = query
		case "clothes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withClothes = query
		case "vehicle":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withVehicle = query
		case "waist":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withWaist = query
		case "foot":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withFoot = query
		case "hand":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withHand = query
		case "drug":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withDrug = query
		case "neck":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withNeck = query
		case "ring":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withRing = query
		case "accessory":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withAccessory = query
		case "body":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&BodyPartClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withBody = query
		case "hair":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&BodyPartClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withHair = query
		case "beard":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&BodyPartClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withBeard = query
		case "index":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SearchClient{config: h.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			h.withIndex = query
		case "type":
			if _, ok := fieldSeen[hustler.FieldType]; !ok {
				selectedFields = append(selectedFields, hustler.FieldType)
				fieldSeen[hustler.FieldType] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[hustler.FieldName]; !ok {
				selectedFields = append(selectedFields, hustler.FieldName)
				fieldSeen[hustler.FieldName] = struct{}{}
			}
		case "title":
			if _, ok := fieldSeen[hustler.FieldTitle]; !ok {
				selectedFields = append(selectedFields, hustler.FieldTitle)
				fieldSeen[hustler.FieldTitle] = struct{}{}
			}
		case "color":
			if _, ok := fieldSeen[hustler.FieldColor]; !ok {
				selectedFields = append(selectedFields, hustler.FieldColor)
				fieldSeen[hustler.FieldColor] = struct{}{}
			}
		case "background":
			if _, ok := fieldSeen[hustler.FieldBackground]; !ok {
				selectedFields = append(selectedFields, hustler.FieldBackground)
				fieldSeen[hustler.FieldBackground] = struct{}{}
			}
		case "age":
			if _, ok := fieldSeen[hustler.FieldAge]; !ok {
				selectedFields = append(selectedFields, hustler.FieldAge)
				fieldSeen[hustler.FieldAge] = struct{}{}
			}
		case "sex":
			if _, ok := fieldSeen[hustler.FieldSex]; !ok {
				selectedFields = append(selectedFields, hustler.FieldSex)
				fieldSeen[hustler.FieldSex] = struct{}{}
			}
		case "viewbox":
			if _, ok := fieldSeen[hustler.FieldViewbox]; !ok {
				selectedFields = append(selectedFields, hustler.FieldViewbox)
				fieldSeen[hustler.FieldViewbox] = struct{}{}
			}
		case "order":
			if _, ok := fieldSeen[hustler.FieldOrder]; !ok {
				selectedFields = append(selectedFields, hustler.FieldOrder)
				fieldSeen[hustler.FieldOrder] = struct{}{}
			}
		case "svg":
			if _, ok := fieldSeen[hustler.FieldSvg]; !ok {
				selectedFields = append(selectedFields, hustler.FieldSvg)
				fieldSeen[hustler.FieldSvg] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[hustler.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, hustler.FieldCreatedAt)
				fieldSeen[hustler.FieldCreatedAt] = struct{}{}
			}
		case "bestAskPriceEth":
			if _, ok := fieldSeen[hustler.FieldBestAskPriceEth]; !ok {
				selectedFields = append(selectedFields, hustler.FieldBestAskPriceEth)
				fieldSeen[hustler.FieldBestAskPriceEth] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		h.Select(selectedFields...)
	}
	return nil
}

type hustlerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []HustlerPaginateOption
}

func newHustlerPaginateArgs(rv map[string]any) *hustlerPaginateArgs {
	args := &hustlerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &HustlerOrder{Field: &HustlerOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithHustlerOrder(order))
			}
		case *HustlerOrder:
			if v != nil {
				args.opts = append(args.opts, WithHustlerOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*HustlerWhereInput); ok {
		args.opts = append(args.opts, WithHustlerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *ItemQuery) CollectFields(ctx context.Context, satisfies ...string) (*ItemQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return i, nil
	}
	if err := i.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return i, nil
}

func (i *ItemQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(item.Columns))
		selectedFields = []string{item.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "wallets":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WalletItemsClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedWallets(alias, func(wq *WalletItemsQuery) {
				*wq = *query
			})
		case "dopes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DopeClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedDopes(alias, func(wq *DopeQuery) {
				*wq = *query
			})
		case "hustlerWeapons":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerWeapons(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerClothes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerClothes(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerVehicles":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerVehicles(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerWaists":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerWaists(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerFeet":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerFeet(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerHands":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerHands(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerDrugs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerDrugs(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerNecks":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerNecks(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerRings":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerRings(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerAccessories":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerAccessories(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "base":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.withBase = query
		case "derivative":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedDerivative(alias, func(wq *ItemQuery) {
				*wq = *query
			})
		case "index":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SearchClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.withIndex = query
		case "type":
			if _, ok := fieldSeen[item.FieldType]; !ok {
				selectedFields = append(selectedFields, item.FieldType)
				fieldSeen[item.FieldType] = struct{}{}
			}
		case "namePrefix":
			if _, ok := fieldSeen[item.FieldNamePrefix]; !ok {
				selectedFields = append(selectedFields, item.FieldNamePrefix)
				fieldSeen[item.FieldNamePrefix] = struct{}{}
			}
		case "nameSuffix":
			if _, ok := fieldSeen[item.FieldNameSuffix]; !ok {
				selectedFields = append(selectedFields, item.FieldNameSuffix)
				fieldSeen[item.FieldNameSuffix] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[item.FieldName]; !ok {
				selectedFields = append(selectedFields, item.FieldName)
				fieldSeen[item.FieldName] = struct{}{}
			}
		case "suffix":
			if _, ok := fieldSeen[item.FieldSuffix]; !ok {
				selectedFields = append(selectedFields, item.FieldSuffix)
				fieldSeen[item.FieldSuffix] = struct{}{}
			}
		case "augmented":
			if _, ok := fieldSeen[item.FieldAugmented]; !ok {
				selectedFields = append(selectedFields, item.FieldAugmented)
				fieldSeen[item.FieldAugmented] = struct{}{}
			}
		case "count":
			if _, ok := fieldSeen[item.FieldCount]; !ok {
				selectedFields = append(selectedFields, item.FieldCount)
				fieldSeen[item.FieldCount] = struct{}{}
			}
		case "tier":
			if _, ok := fieldSeen[item.FieldTier]; !ok {
				selectedFields = append(selectedFields, item.FieldTier)
				fieldSeen[item.FieldTier] = struct{}{}
			}
		case "greatness":
			if _, ok := fieldSeen[item.FieldGreatness]; !ok {
				selectedFields = append(selectedFields, item.FieldGreatness)
				fieldSeen[item.FieldGreatness] = struct{}{}
			}
		case "rles":
			if _, ok := fieldSeen[item.FieldRles]; !ok {
				selectedFields = append(selectedFields, item.FieldRles)
				fieldSeen[item.FieldRles] = struct{}{}
			}
		case "svg":
			if _, ok := fieldSeen[item.FieldSvg]; !ok {
				selectedFields = append(selectedFields, item.FieldSvg)
				fieldSeen[item.FieldSvg] = struct{}{}
			}
		case "sprite":
			if _, ok := fieldSeen[item.FieldSprite]; !ok {
				selectedFields = append(selectedFields, item.FieldSprite)
				fieldSeen[item.FieldSprite] = struct{}{}
			}
		case "bestAskPriceEth":
			if _, ok := fieldSeen[item.FieldBestAskPriceEth]; !ok {
				selectedFields = append(selectedFields, item.FieldBestAskPriceEth)
				fieldSeen[item.FieldBestAskPriceEth] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		i.Select(selectedFields...)
	}
	return nil
}

type itemPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ItemPaginateOption
}

func newItemPaginateArgs(rv map[string]any) *itemPaginateArgs {
	args := &itemPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ItemOrder{Field: &ItemOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithItemOrder(order))
			}
		case *ItemOrder:
			if v != nil {
				args.opts = append(args.opts, WithItemOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ItemWhereInput); ok {
		args.opts = append(args.opts, WithItemFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SearchQuery) CollectFields(ctx context.Context, satisfies ...string) (*SearchQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *SearchQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(search.Columns))
		selectedFields = []string{search.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "dope":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DopeClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.withDope = query
		case "item":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.withItem = query
		case "hustler":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.withHustler = query
		case "type":
			if _, ok := fieldSeen[search.FieldType]; !ok {
				selectedFields = append(selectedFields, search.FieldType)
				fieldSeen[search.FieldType] = struct{}{}
			}
		case "greatness":
			if _, ok := fieldSeen[search.FieldGreatness]; !ok {
				selectedFields = append(selectedFields, search.FieldGreatness)
				fieldSeen[search.FieldGreatness] = struct{}{}
			}
		case "claimed":
			if _, ok := fieldSeen[search.FieldClaimed]; !ok {
				selectedFields = append(selectedFields, search.FieldClaimed)
				fieldSeen[search.FieldClaimed] = struct{}{}
			}
		case "opened":
			if _, ok := fieldSeen[search.FieldOpened]; !ok {
				selectedFields = append(selectedFields, search.FieldOpened)
				fieldSeen[search.FieldOpened] = struct{}{}
			}
		case "banned":
			if _, ok := fieldSeen[search.FieldBanned]; !ok {
				selectedFields = append(selectedFields, search.FieldBanned)
				fieldSeen[search.FieldBanned] = struct{}{}
			}
		case "salePrice":
			if _, ok := fieldSeen[search.FieldSalePrice]; !ok {
				selectedFields = append(selectedFields, search.FieldSalePrice)
				fieldSeen[search.FieldSalePrice] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type searchPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SearchPaginateOption
}

func newSearchPaginateArgs(rv map[string]any) *searchPaginateArgs {
	args := &searchPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &SearchOrder{Field: &SearchOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithSearchOrder(order))
			}
		case *SearchOrder:
			if v != nil {
				args.opts = append(args.opts, WithSearchOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*SearchWhereInput); ok {
		args.opts = append(args.opts, WithSearchFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ss *SyncStateQuery) CollectFields(ctx context.Context, satisfies ...string) (*SyncStateQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ss, nil
	}
	if err := ss.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ss, nil
}

func (ss *SyncStateQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(syncstate.Columns))
		selectedFields = []string{syncstate.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "contractName":
			if _, ok := fieldSeen[syncstate.FieldContractName]; !ok {
				selectedFields = append(selectedFields, syncstate.FieldContractName)
				fieldSeen[syncstate.FieldContractName] = struct{}{}
			}
		case "startBlock":
			if _, ok := fieldSeen[syncstate.FieldStartBlock]; !ok {
				selectedFields = append(selectedFields, syncstate.FieldStartBlock)
				fieldSeen[syncstate.FieldStartBlock] = struct{}{}
			}
		case "blockTime":
			if _, ok := fieldSeen[syncstate.FieldBlockTime]; !ok {
				selectedFields = append(selectedFields, syncstate.FieldBlockTime)
				fieldSeen[syncstate.FieldBlockTime] = struct{}{}
			}
		case "lastSyncedAt":
			if _, ok := fieldSeen[syncstate.FieldLastSyncedAt]; !ok {
				selectedFields = append(selectedFields, syncstate.FieldLastSyncedAt)
				fieldSeen[syncstate.FieldLastSyncedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ss.Select(selectedFields...)
	}
	return nil
}

type syncstatePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SyncStatePaginateOption
}

func newSyncStatePaginateArgs(rv map[string]any) *syncstatePaginateArgs {
	args := &syncstatePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*SyncStateWhereInput); ok {
		args.opts = append(args.opts, WithSyncStateFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WalletQuery) CollectFields(ctx context.Context, satisfies ...string) (*WalletQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return w, nil
	}
	if err := w.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return w, nil
}

func (w *WalletQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(wallet.Columns))
		selectedFields = []string{wallet.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "dopes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DopeClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.WithNamedDopes(alias, func(wq *DopeQuery) {
				*wq = *query
			})
		case "items":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WalletItemsClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.WithNamedItems(alias, func(wq *WalletItemsQuery) {
				*wq = *query
			})
		case "hustlers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&HustlerClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			w.WithNamedHustlers(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "paper":
			if _, ok := fieldSeen[wallet.FieldPaper]; !ok {
				selectedFields = append(selectedFields, wallet.FieldPaper)
				fieldSeen[wallet.FieldPaper] = struct{}{}
			}
		case "lastSetPaperBalanceAt":
			if _, ok := fieldSeen[wallet.FieldLastSetPaperBalanceAt]; !ok {
				selectedFields = append(selectedFields, wallet.FieldLastSetPaperBalanceAt)
				fieldSeen[wallet.FieldLastSetPaperBalanceAt] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[wallet.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, wallet.FieldCreatedAt)
				fieldSeen[wallet.FieldCreatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		w.Select(selectedFields...)
	}
	return nil
}

type walletPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WalletPaginateOption
}

func newWalletPaginateArgs(rv map[string]any) *walletPaginateArgs {
	args := &walletPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &WalletOrder{Field: &WalletOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithWalletOrder(order))
			}
		case *WalletOrder:
			if v != nil {
				args.opts = append(args.opts, WithWalletOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*WalletWhereInput); ok {
		args.opts = append(args.opts, WithWalletFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wi *WalletItemsQuery) CollectFields(ctx context.Context, satisfies ...string) (*WalletItemsQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return wi, nil
	}
	if err := wi.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return wi, nil
}

func (wi *WalletItemsQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(walletitems.Columns))
		selectedFields = []string{walletitems.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "wallet":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WalletClient{config: wi.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			wi.withWallet = query
		case "item":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: wi.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			wi.withItem = query
		case "balance":
			if _, ok := fieldSeen[walletitems.FieldBalance]; !ok {
				selectedFields = append(selectedFields, walletitems.FieldBalance)
				fieldSeen[walletitems.FieldBalance] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		wi.Select(selectedFields...)
	}
	return nil
}

type walletitemsPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WalletItemsPaginateOption
}

func newWalletItemsPaginateArgs(rv map[string]any) *walletitemsPaginateArgs {
	args := &walletitemsPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*WalletItemsWhereInput); ok {
		args.opts = append(args.opts, WithWalletItemsFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
