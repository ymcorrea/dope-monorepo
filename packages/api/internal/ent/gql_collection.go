// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AmountQuery) CollectFields(ctx context.Context, satisfies ...string) (*AmountQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AmountQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "listingInput":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ListingQuery{config: a.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			a.withListingInput = query
		case "listingOutput":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ListingQuery{config: a.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			a.withListingOutput = query
		}
	}
	return nil
}

type amountPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AmountPaginateOption
}

func newAmountPaginateArgs(rv map[string]interface{}) *amountPaginateArgs {
	args := &amountPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*AmountWhereInput); ok {
		args.opts = append(args.opts, WithAmountFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (bp *BodyPartQuery) CollectFields(ctx context.Context, satisfies ...string) (*BodyPartQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return bp, nil
	}
	if err := bp.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return bp, nil
}

func (bp *BodyPartQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "hustlerBodies":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: bp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			bp.WithNamedHustlerBodies(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerHairs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: bp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			bp.WithNamedHustlerHairs(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerBeards":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: bp.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			bp.WithNamedHustlerBeards(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type bodypartPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []BodyPartPaginateOption
}

func newBodyPartPaginateArgs(rv map[string]interface{}) *bodypartPaginateArgs {
	args := &bodypartPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*BodyPartWhereInput); ok {
		args.opts = append(args.opts, WithBodyPartFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (d *DopeQuery) CollectFields(ctx context.Context, satisfies ...string) (*DopeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return d, nil
	}
	if err := d.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return d, nil
}

func (d *DopeQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "wallet":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &WalletQuery{config: d.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			d.withWallet = query
		case "lastSale":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ListingQuery{config: d.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			d.withLastSale = query
		case "listings":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ListingQuery{config: d.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			d.WithNamedListings(alias, func(wq *ListingQuery) {
				*wq = *query
			})
		case "items":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: d.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			d.WithNamedItems(alias, func(wq *ItemQuery) {
				*wq = *query
			})
		case "index":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &SearchQuery{config: d.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			d.withIndex = query
		}
	}
	return nil
}

type dopePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DopePaginateOption
}

func newDopePaginateArgs(rv map[string]interface{}) *dopePaginateArgs {
	args := &dopePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &DopeOrder{Field: &DopeOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithDopeOrder(order))
			}
		case *DopeOrder:
			if v != nil {
				args.opts = append(args.opts, WithDopeOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*DopeWhereInput); ok {
		args.opts = append(args.opts, WithDopeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *EventQuery) CollectFields(ctx context.Context, satisfies ...string) (*EventQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *EventQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type eventPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EventPaginateOption
}

func newEventPaginateArgs(rv map[string]interface{}) *eventPaginateArgs {
	args := &eventPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*EventWhereInput); ok {
		args.opts = append(args.opts, WithEventFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gh *GameHustlerQuery) CollectFields(ctx context.Context, satisfies ...string) (*GameHustlerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return gh, nil
	}
	if err := gh.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return gh, nil
}

func (gh *GameHustlerQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "relations":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &GameHustlerRelationQuery{config: gh.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			gh.WithNamedRelations(alias, func(wq *GameHustlerRelationQuery) {
				*wq = *query
			})
		case "items":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &GameHustlerItemQuery{config: gh.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			gh.WithNamedItems(alias, func(wq *GameHustlerItemQuery) {
				*wq = *query
			})
		case "quests":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &GameHustlerQuestQuery{config: gh.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			gh.WithNamedQuests(alias, func(wq *GameHustlerQuestQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type gamehustlerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GameHustlerPaginateOption
}

func newGameHustlerPaginateArgs(rv map[string]interface{}) *gamehustlerPaginateArgs {
	args := &gamehustlerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &GameHustlerOrder{Field: &GameHustlerOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithGameHustlerOrder(order))
			}
		case *GameHustlerOrder:
			if v != nil {
				args.opts = append(args.opts, WithGameHustlerOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*GameHustlerWhereInput); ok {
		args.opts = append(args.opts, WithGameHustlerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ghi *GameHustlerItemQuery) CollectFields(ctx context.Context, satisfies ...string) (*GameHustlerItemQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ghi, nil
	}
	if err := ghi.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ghi, nil
}

func (ghi *GameHustlerItemQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "hustler":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &GameHustlerQuery{config: ghi.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			ghi.withHustler = query
		}
	}
	return nil
}

type gamehustleritemPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GameHustlerItemPaginateOption
}

func newGameHustlerItemPaginateArgs(rv map[string]interface{}) *gamehustleritemPaginateArgs {
	args := &gamehustleritemPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GameHustlerItemWhereInput); ok {
		args.opts = append(args.opts, WithGameHustlerItemFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ghq *GameHustlerQuestQuery) CollectFields(ctx context.Context, satisfies ...string) (*GameHustlerQuestQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ghq, nil
	}
	if err := ghq.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ghq, nil
}

func (ghq *GameHustlerQuestQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "hustler":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &GameHustlerQuery{config: ghq.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			ghq.withHustler = query
		}
	}
	return nil
}

type gamehustlerquestPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GameHustlerQuestPaginateOption
}

func newGameHustlerQuestPaginateArgs(rv map[string]interface{}) *gamehustlerquestPaginateArgs {
	args := &gamehustlerquestPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GameHustlerQuestWhereInput); ok {
		args.opts = append(args.opts, WithGameHustlerQuestFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ghr *GameHustlerRelationQuery) CollectFields(ctx context.Context, satisfies ...string) (*GameHustlerRelationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ghr, nil
	}
	if err := ghr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ghr, nil
}

func (ghr *GameHustlerRelationQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "hustler":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &GameHustlerQuery{config: ghr.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			ghr.withHustler = query
		}
	}
	return nil
}

type gamehustlerrelationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GameHustlerRelationPaginateOption
}

func newGameHustlerRelationPaginateArgs(rv map[string]interface{}) *gamehustlerrelationPaginateArgs {
	args := &gamehustlerrelationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GameHustlerRelationWhereInput); ok {
		args.opts = append(args.opts, WithGameHustlerRelationFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (h *HustlerQuery) CollectFields(ctx context.Context, satisfies ...string) (*HustlerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return h, nil
	}
	if err := h.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return h, nil
}

func (h *HustlerQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "wallet":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &WalletQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withWallet = query
		case "weapon":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withWeapon = query
		case "clothes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withClothes = query
		case "vehicle":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withVehicle = query
		case "waist":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withWaist = query
		case "foot":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withFoot = query
		case "hand":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withHand = query
		case "drug":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withDrug = query
		case "neck":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withNeck = query
		case "ring":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withRing = query
		case "accessory":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withAccessory = query
		case "body":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &BodyPartQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withBody = query
		case "hair":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &BodyPartQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withHair = query
		case "beard":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &BodyPartQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withBeard = query
		case "index":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &SearchQuery{config: h.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			h.withIndex = query
		}
	}
	return nil
}

type hustlerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []HustlerPaginateOption
}

func newHustlerPaginateArgs(rv map[string]interface{}) *hustlerPaginateArgs {
	args := &hustlerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &HustlerOrder{Field: &HustlerOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithHustlerOrder(order))
			}
		case *HustlerOrder:
			if v != nil {
				args.opts = append(args.opts, WithHustlerOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*HustlerWhereInput); ok {
		args.opts = append(args.opts, WithHustlerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *ItemQuery) CollectFields(ctx context.Context, satisfies ...string) (*ItemQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return i, nil
	}
	if err := i.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return i, nil
}

func (i *ItemQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "wallets":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &WalletItemsQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedWallets(alias, func(wq *WalletItemsQuery) {
				*wq = *query
			})
		case "dopes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &DopeQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedDopes(alias, func(wq *DopeQuery) {
				*wq = *query
			})
		case "hustlerWeapons":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerWeapons(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerClothes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerClothes(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerVehicles":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerVehicles(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerWaists":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerWaists(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerFeet":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerFeet(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerHands":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerHands(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerDrugs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerDrugs(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerNecks":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerNecks(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerRings":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerRings(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "hustlerAccessories":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedHustlerAccessories(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		case "base":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.withBase = query
		case "derivative":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedDerivative(alias, func(wq *ItemQuery) {
				*wq = *query
			})
		case "index":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &SearchQuery{config: i.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			i.withIndex = query
		}
	}
	return nil
}

type itemPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ItemPaginateOption
}

func newItemPaginateArgs(rv map[string]interface{}) *itemPaginateArgs {
	args := &itemPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &ItemOrder{Field: &ItemOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithItemOrder(order))
			}
		case *ItemOrder:
			if v != nil {
				args.opts = append(args.opts, WithItemOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ItemWhereInput); ok {
		args.opts = append(args.opts, WithItemFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (l *ListingQuery) CollectFields(ctx context.Context, satisfies ...string) (*ListingQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return l, nil
	}
	if err := l.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return l, nil
}

func (l *ListingQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "dope":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &DopeQuery{config: l.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			l.withDope = query
		case "dopeLastsales":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &DopeQuery{config: l.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			l.withDopeLastsales = query
		case "inputs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &AmountQuery{config: l.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			l.WithNamedInputs(alias, func(wq *AmountQuery) {
				*wq = *query
			})
		case "outputs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &AmountQuery{config: l.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			l.WithNamedOutputs(alias, func(wq *AmountQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type listingPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ListingPaginateOption
}

func newListingPaginateArgs(rv map[string]interface{}) *listingPaginateArgs {
	args := &listingPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ListingWhereInput); ok {
		args.opts = append(args.opts, WithListingFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SearchQuery) CollectFields(ctx context.Context, satisfies ...string) (*SearchQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *SearchQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "dope":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &DopeQuery{config: s.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			s.withDope = query
		case "item":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: s.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			s.withItem = query
		case "hustler":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: s.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			s.withHustler = query
		}
	}
	return nil
}

type searchPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SearchPaginateOption
}

func newSearchPaginateArgs(rv map[string]interface{}) *searchPaginateArgs {
	args := &searchPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &SearchOrder{Field: &SearchOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithSearchOrder(order))
			}
		case *SearchOrder:
			if v != nil {
				args.opts = append(args.opts, WithSearchOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*SearchWhereInput); ok {
		args.opts = append(args.opts, WithSearchFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ss *SyncStateQuery) CollectFields(ctx context.Context, satisfies ...string) (*SyncStateQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ss, nil
	}
	if err := ss.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ss, nil
}

func (ss *SyncStateQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type syncstatePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SyncStatePaginateOption
}

func newSyncStatePaginateArgs(rv map[string]interface{}) *syncstatePaginateArgs {
	args := &syncstatePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*SyncStateWhereInput); ok {
		args.opts = append(args.opts, WithSyncStateFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WalletQuery) CollectFields(ctx context.Context, satisfies ...string) (*WalletQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return w, nil
	}
	if err := w.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return w, nil
}

func (w *WalletQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "dopes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &DopeQuery{config: w.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			w.WithNamedDopes(alias, func(wq *DopeQuery) {
				*wq = *query
			})
		case "items":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &WalletItemsQuery{config: w.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			w.WithNamedItems(alias, func(wq *WalletItemsQuery) {
				*wq = *query
			})
		case "hustlers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &HustlerQuery{config: w.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			w.WithNamedHustlers(alias, func(wq *HustlerQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type walletPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WalletPaginateOption
}

func newWalletPaginateArgs(rv map[string]interface{}) *walletPaginateArgs {
	args := &walletPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &WalletOrder{Field: &WalletOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithWalletOrder(order))
			}
		case *WalletOrder:
			if v != nil {
				args.opts = append(args.opts, WithWalletOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*WalletWhereInput); ok {
		args.opts = append(args.opts, WithWalletFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wi *WalletItemsQuery) CollectFields(ctx context.Context, satisfies ...string) (*WalletItemsQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return wi, nil
	}
	if err := wi.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return wi, nil
}

func (wi *WalletItemsQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "wallet":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &WalletQuery{config: wi.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			wi.withWallet = query
		case "item":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ItemQuery{config: wi.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			wi.withItem = query
		}
	}
	return nil
}

type walletitemsPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WalletItemsPaginateOption
}

func newWalletItemsPaginateArgs(rv map[string]interface{}) *walletitemsPaginateArgs {
	args := &walletitemsPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*WalletItemsWhereInput); ok {
		args.opts = append(args.opts, WithWalletItemsFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}
