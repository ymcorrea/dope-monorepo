// Code generated by ent, DO NOT EDIT.

package gamehustleritem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldContainsFold(FieldID, id))
}

// Item applies equality check predicate on the "item" field. It's identical to ItemEQ.
func Item(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldEQ(FieldItem, v))
}

// ItemEQ applies the EQ predicate on the "item" field.
func ItemEQ(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldEQ(FieldItem, v))
}

// ItemNEQ applies the NEQ predicate on the "item" field.
func ItemNEQ(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldNEQ(FieldItem, v))
}

// ItemIn applies the In predicate on the "item" field.
func ItemIn(vs ...string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldIn(FieldItem, vs...))
}

// ItemNotIn applies the NotIn predicate on the "item" field.
func ItemNotIn(vs ...string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldNotIn(FieldItem, vs...))
}

// ItemGT applies the GT predicate on the "item" field.
func ItemGT(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldGT(FieldItem, v))
}

// ItemGTE applies the GTE predicate on the "item" field.
func ItemGTE(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldGTE(FieldItem, v))
}

// ItemLT applies the LT predicate on the "item" field.
func ItemLT(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldLT(FieldItem, v))
}

// ItemLTE applies the LTE predicate on the "item" field.
func ItemLTE(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldLTE(FieldItem, v))
}

// ItemContains applies the Contains predicate on the "item" field.
func ItemContains(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldContains(FieldItem, v))
}

// ItemHasPrefix applies the HasPrefix predicate on the "item" field.
func ItemHasPrefix(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldHasPrefix(FieldItem, v))
}

// ItemHasSuffix applies the HasSuffix predicate on the "item" field.
func ItemHasSuffix(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldHasSuffix(FieldItem, v))
}

// ItemEqualFold applies the EqualFold predicate on the "item" field.
func ItemEqualFold(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldEqualFold(FieldItem, v))
}

// ItemContainsFold applies the ContainsFold predicate on the "item" field.
func ItemContainsFold(v string) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.FieldContainsFold(FieldItem, v))
}

// HasHustler applies the HasEdge predicate on the "hustler" edge.
func HasHustler() predicate.GameHustlerItem {
	return predicate.GameHustlerItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HustlerTable, HustlerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHustlerWith applies the HasEdge predicate on the "hustler" edge with a given conditions (other predicates).
func HasHustlerWith(preds ...predicate.GameHustler) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(func(s *sql.Selector) {
		step := newHustlerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GameHustlerItem) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GameHustlerItem) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GameHustlerItem) predicate.GameHustlerItem {
	return predicate.GameHustlerItem(sql.NotPredicates(p))
}
