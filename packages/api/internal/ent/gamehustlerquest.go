// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustler"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/gamehustlerquest"
)

// GameHustlerQuest is the model entity for the GameHustlerQuest schema.
type GameHustlerQuest struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Quest holds the value of the "quest" field.
	Quest string `json:"quest,omitempty"`
	// Completed holds the value of the "completed" field.
	Completed bool `json:"completed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameHustlerQuestQuery when eager-loading is set.
	Edges               GameHustlerQuestEdges `json:"edges"`
	game_hustler_quests *string
}

// GameHustlerQuestEdges holds the relations/edges for other nodes in the graph.
type GameHustlerQuestEdges struct {
	// Hustler holds the value of the hustler edge.
	Hustler *GameHustler `json:"hustler,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// HustlerOrErr returns the Hustler value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameHustlerQuestEdges) HustlerOrErr() (*GameHustler, error) {
	if e.loadedTypes[0] {
		if e.Hustler == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: gamehustler.Label}
		}
		return e.Hustler, nil
	}
	return nil, &NotLoadedError{edge: "hustler"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameHustlerQuest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gamehustlerquest.FieldCompleted:
			values[i] = new(sql.NullBool)
		case gamehustlerquest.FieldID, gamehustlerquest.FieldQuest:
			values[i] = new(sql.NullString)
		case gamehustlerquest.ForeignKeys[0]: // game_hustler_quests
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GameHustlerQuest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameHustlerQuest fields.
func (ghq *GameHustlerQuest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gamehustlerquest.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ghq.ID = value.String
			}
		case gamehustlerquest.FieldQuest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quest", values[i])
			} else if value.Valid {
				ghq.Quest = value.String
			}
		case gamehustlerquest.FieldCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				ghq.Completed = value.Bool
			}
		case gamehustlerquest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field game_hustler_quests", values[i])
			} else if value.Valid {
				ghq.game_hustler_quests = new(string)
				*ghq.game_hustler_quests = value.String
			}
		}
	}
	return nil
}

// QueryHustler queries the "hustler" edge of the GameHustlerQuest entity.
func (ghq *GameHustlerQuest) QueryHustler() *GameHustlerQuery {
	return NewGameHustlerQuestClient(ghq.config).QueryHustler(ghq)
}

// Update returns a builder for updating this GameHustlerQuest.
// Note that you need to call GameHustlerQuest.Unwrap() before calling this method if this GameHustlerQuest
// was returned from a transaction, and the transaction was committed or rolled back.
func (ghq *GameHustlerQuest) Update() *GameHustlerQuestUpdateOne {
	return NewGameHustlerQuestClient(ghq.config).UpdateOne(ghq)
}

// Unwrap unwraps the GameHustlerQuest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ghq *GameHustlerQuest) Unwrap() *GameHustlerQuest {
	_tx, ok := ghq.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameHustlerQuest is not a transactional entity")
	}
	ghq.config.driver = _tx.drv
	return ghq
}

// String implements the fmt.Stringer.
func (ghq *GameHustlerQuest) String() string {
	var builder strings.Builder
	builder.WriteString("GameHustlerQuest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ghq.ID))
	builder.WriteString("quest=")
	builder.WriteString(ghq.Quest)
	builder.WriteString(", ")
	builder.WriteString("completed=")
	builder.WriteString(fmt.Sprintf("%v", ghq.Completed))
	builder.WriteByte(')')
	return builder.String()
}

// GameHustlerQuests is a parsable slice of GameHustlerQuest.
type GameHustlerQuests []*GameHustlerQuest
