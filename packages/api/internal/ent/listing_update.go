// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/amount"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/dope"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/listing"
	"github.com/dopedao/dope-monorepo/packages/api/internal/ent/predicate"
)

// ListingUpdate is the builder for updating Listing entities.
type ListingUpdate struct {
	config
	hooks    []Hook
	mutation *ListingMutation
}

// Where appends a list predicates to the ListingUpdate builder.
func (lu *ListingUpdate) Where(ps ...predicate.Listing) *ListingUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetActive sets the "active" field.
func (lu *ListingUpdate) SetActive(b bool) *ListingUpdate {
	lu.mutation.SetActive(b)
	return lu
}

// SetWyvernOrder sets the "wyvern_order" field.
func (lu *ListingUpdate) SetWyvernOrder(jm json.RawMessage) *ListingUpdate {
	lu.mutation.SetWyvernOrder(jm)
	return lu
}

// AppendWyvernOrder appends jm to the "wyvern_order" field.
func (lu *ListingUpdate) AppendWyvernOrder(jm json.RawMessage) *ListingUpdate {
	lu.mutation.AppendWyvernOrder(jm)
	return lu
}

// ClearWyvernOrder clears the value of the "wyvern_order" field.
func (lu *ListingUpdate) ClearWyvernOrder() *ListingUpdate {
	lu.mutation.ClearWyvernOrder()
	return lu
}

// SetSeaportOrder sets the "seaport_order" field.
func (lu *ListingUpdate) SetSeaportOrder(jm json.RawMessage) *ListingUpdate {
	lu.mutation.SetSeaportOrder(jm)
	return lu
}

// AppendSeaportOrder appends jm to the "seaport_order" field.
func (lu *ListingUpdate) AppendSeaportOrder(jm json.RawMessage) *ListingUpdate {
	lu.mutation.AppendSeaportOrder(jm)
	return lu
}

// ClearSeaportOrder clears the value of the "seaport_order" field.
func (lu *ListingUpdate) ClearSeaportOrder() *ListingUpdate {
	lu.mutation.ClearSeaportOrder()
	return lu
}

// SetDopeID sets the "dope" edge to the Dope entity by ID.
func (lu *ListingUpdate) SetDopeID(id string) *ListingUpdate {
	lu.mutation.SetDopeID(id)
	return lu
}

// SetNillableDopeID sets the "dope" edge to the Dope entity by ID if the given value is not nil.
func (lu *ListingUpdate) SetNillableDopeID(id *string) *ListingUpdate {
	if id != nil {
		lu = lu.SetDopeID(*id)
	}
	return lu
}

// SetDope sets the "dope" edge to the Dope entity.
func (lu *ListingUpdate) SetDope(d *Dope) *ListingUpdate {
	return lu.SetDopeID(d.ID)
}

// SetDopeLastsalesID sets the "dope_lastsales" edge to the Dope entity by ID.
func (lu *ListingUpdate) SetDopeLastsalesID(id string) *ListingUpdate {
	lu.mutation.SetDopeLastsalesID(id)
	return lu
}

// SetNillableDopeLastsalesID sets the "dope_lastsales" edge to the Dope entity by ID if the given value is not nil.
func (lu *ListingUpdate) SetNillableDopeLastsalesID(id *string) *ListingUpdate {
	if id != nil {
		lu = lu.SetDopeLastsalesID(*id)
	}
	return lu
}

// SetDopeLastsales sets the "dope_lastsales" edge to the Dope entity.
func (lu *ListingUpdate) SetDopeLastsales(d *Dope) *ListingUpdate {
	return lu.SetDopeLastsalesID(d.ID)
}

// AddInputIDs adds the "inputs" edge to the Amount entity by IDs.
func (lu *ListingUpdate) AddInputIDs(ids ...string) *ListingUpdate {
	lu.mutation.AddInputIDs(ids...)
	return lu
}

// AddInputs adds the "inputs" edges to the Amount entity.
func (lu *ListingUpdate) AddInputs(a ...*Amount) *ListingUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lu.AddInputIDs(ids...)
}

// AddOutputIDs adds the "outputs" edge to the Amount entity by IDs.
func (lu *ListingUpdate) AddOutputIDs(ids ...string) *ListingUpdate {
	lu.mutation.AddOutputIDs(ids...)
	return lu
}

// AddOutputs adds the "outputs" edges to the Amount entity.
func (lu *ListingUpdate) AddOutputs(a ...*Amount) *ListingUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lu.AddOutputIDs(ids...)
}

// Mutation returns the ListingMutation object of the builder.
func (lu *ListingUpdate) Mutation() *ListingMutation {
	return lu.mutation
}

// ClearDope clears the "dope" edge to the Dope entity.
func (lu *ListingUpdate) ClearDope() *ListingUpdate {
	lu.mutation.ClearDope()
	return lu
}

// ClearDopeLastsales clears the "dope_lastsales" edge to the Dope entity.
func (lu *ListingUpdate) ClearDopeLastsales() *ListingUpdate {
	lu.mutation.ClearDopeLastsales()
	return lu
}

// ClearInputs clears all "inputs" edges to the Amount entity.
func (lu *ListingUpdate) ClearInputs() *ListingUpdate {
	lu.mutation.ClearInputs()
	return lu
}

// RemoveInputIDs removes the "inputs" edge to Amount entities by IDs.
func (lu *ListingUpdate) RemoveInputIDs(ids ...string) *ListingUpdate {
	lu.mutation.RemoveInputIDs(ids...)
	return lu
}

// RemoveInputs removes "inputs" edges to Amount entities.
func (lu *ListingUpdate) RemoveInputs(a ...*Amount) *ListingUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lu.RemoveInputIDs(ids...)
}

// ClearOutputs clears all "outputs" edges to the Amount entity.
func (lu *ListingUpdate) ClearOutputs() *ListingUpdate {
	lu.mutation.ClearOutputs()
	return lu
}

// RemoveOutputIDs removes the "outputs" edge to Amount entities by IDs.
func (lu *ListingUpdate) RemoveOutputIDs(ids ...string) *ListingUpdate {
	lu.mutation.RemoveOutputIDs(ids...)
	return lu
}

// RemoveOutputs removes "outputs" edges to Amount entities.
func (lu *ListingUpdate) RemoveOutputs(a ...*Amount) *ListingUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lu.RemoveOutputIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *ListingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ListingMutation](ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *ListingUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *ListingUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *ListingUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *ListingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(listing.Table, listing.Columns, sqlgraph.NewFieldSpec(listing.FieldID, field.TypeString))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Active(); ok {
		_spec.SetField(listing.FieldActive, field.TypeBool, value)
	}
	if value, ok := lu.mutation.WyvernOrder(); ok {
		_spec.SetField(listing.FieldWyvernOrder, field.TypeJSON, value)
	}
	if value, ok := lu.mutation.AppendedWyvernOrder(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, listing.FieldWyvernOrder, value)
		})
	}
	if lu.mutation.WyvernOrderCleared() {
		_spec.ClearField(listing.FieldWyvernOrder, field.TypeJSON)
	}
	if value, ok := lu.mutation.SeaportOrder(); ok {
		_spec.SetField(listing.FieldSeaportOrder, field.TypeJSON, value)
	}
	if value, ok := lu.mutation.AppendedSeaportOrder(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, listing.FieldSeaportOrder, value)
		})
	}
	if lu.mutation.SeaportOrderCleared() {
		_spec.ClearField(listing.FieldSeaportOrder, field.TypeJSON)
	}
	if lu.mutation.DopeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listing.DopeTable,
			Columns: []string{listing.DopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dope.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.DopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listing.DopeTable,
			Columns: []string{listing.DopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.DopeLastsalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   listing.DopeLastsalesTable,
			Columns: []string{listing.DopeLastsalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dope.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.DopeLastsalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   listing.DopeLastsalesTable,
			Columns: []string{listing.DopeLastsalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.InputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.InputsTable,
			Columns: []string{listing.InputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedInputsIDs(); len(nodes) > 0 && !lu.mutation.InputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.InputsTable,
			Columns: []string{listing.InputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.InputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.InputsTable,
			Columns: []string{listing.InputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.OutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.OutputsTable,
			Columns: []string{listing.OutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedOutputsIDs(); len(nodes) > 0 && !lu.mutation.OutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.OutputsTable,
			Columns: []string{listing.OutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.OutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.OutputsTable,
			Columns: []string{listing.OutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{listing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// ListingUpdateOne is the builder for updating a single Listing entity.
type ListingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ListingMutation
}

// SetActive sets the "active" field.
func (luo *ListingUpdateOne) SetActive(b bool) *ListingUpdateOne {
	luo.mutation.SetActive(b)
	return luo
}

// SetWyvernOrder sets the "wyvern_order" field.
func (luo *ListingUpdateOne) SetWyvernOrder(jm json.RawMessage) *ListingUpdateOne {
	luo.mutation.SetWyvernOrder(jm)
	return luo
}

// AppendWyvernOrder appends jm to the "wyvern_order" field.
func (luo *ListingUpdateOne) AppendWyvernOrder(jm json.RawMessage) *ListingUpdateOne {
	luo.mutation.AppendWyvernOrder(jm)
	return luo
}

// ClearWyvernOrder clears the value of the "wyvern_order" field.
func (luo *ListingUpdateOne) ClearWyvernOrder() *ListingUpdateOne {
	luo.mutation.ClearWyvernOrder()
	return luo
}

// SetSeaportOrder sets the "seaport_order" field.
func (luo *ListingUpdateOne) SetSeaportOrder(jm json.RawMessage) *ListingUpdateOne {
	luo.mutation.SetSeaportOrder(jm)
	return luo
}

// AppendSeaportOrder appends jm to the "seaport_order" field.
func (luo *ListingUpdateOne) AppendSeaportOrder(jm json.RawMessage) *ListingUpdateOne {
	luo.mutation.AppendSeaportOrder(jm)
	return luo
}

// ClearSeaportOrder clears the value of the "seaport_order" field.
func (luo *ListingUpdateOne) ClearSeaportOrder() *ListingUpdateOne {
	luo.mutation.ClearSeaportOrder()
	return luo
}

// SetDopeID sets the "dope" edge to the Dope entity by ID.
func (luo *ListingUpdateOne) SetDopeID(id string) *ListingUpdateOne {
	luo.mutation.SetDopeID(id)
	return luo
}

// SetNillableDopeID sets the "dope" edge to the Dope entity by ID if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableDopeID(id *string) *ListingUpdateOne {
	if id != nil {
		luo = luo.SetDopeID(*id)
	}
	return luo
}

// SetDope sets the "dope" edge to the Dope entity.
func (luo *ListingUpdateOne) SetDope(d *Dope) *ListingUpdateOne {
	return luo.SetDopeID(d.ID)
}

// SetDopeLastsalesID sets the "dope_lastsales" edge to the Dope entity by ID.
func (luo *ListingUpdateOne) SetDopeLastsalesID(id string) *ListingUpdateOne {
	luo.mutation.SetDopeLastsalesID(id)
	return luo
}

// SetNillableDopeLastsalesID sets the "dope_lastsales" edge to the Dope entity by ID if the given value is not nil.
func (luo *ListingUpdateOne) SetNillableDopeLastsalesID(id *string) *ListingUpdateOne {
	if id != nil {
		luo = luo.SetDopeLastsalesID(*id)
	}
	return luo
}

// SetDopeLastsales sets the "dope_lastsales" edge to the Dope entity.
func (luo *ListingUpdateOne) SetDopeLastsales(d *Dope) *ListingUpdateOne {
	return luo.SetDopeLastsalesID(d.ID)
}

// AddInputIDs adds the "inputs" edge to the Amount entity by IDs.
func (luo *ListingUpdateOne) AddInputIDs(ids ...string) *ListingUpdateOne {
	luo.mutation.AddInputIDs(ids...)
	return luo
}

// AddInputs adds the "inputs" edges to the Amount entity.
func (luo *ListingUpdateOne) AddInputs(a ...*Amount) *ListingUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return luo.AddInputIDs(ids...)
}

// AddOutputIDs adds the "outputs" edge to the Amount entity by IDs.
func (luo *ListingUpdateOne) AddOutputIDs(ids ...string) *ListingUpdateOne {
	luo.mutation.AddOutputIDs(ids...)
	return luo
}

// AddOutputs adds the "outputs" edges to the Amount entity.
func (luo *ListingUpdateOne) AddOutputs(a ...*Amount) *ListingUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return luo.AddOutputIDs(ids...)
}

// Mutation returns the ListingMutation object of the builder.
func (luo *ListingUpdateOne) Mutation() *ListingMutation {
	return luo.mutation
}

// ClearDope clears the "dope" edge to the Dope entity.
func (luo *ListingUpdateOne) ClearDope() *ListingUpdateOne {
	luo.mutation.ClearDope()
	return luo
}

// ClearDopeLastsales clears the "dope_lastsales" edge to the Dope entity.
func (luo *ListingUpdateOne) ClearDopeLastsales() *ListingUpdateOne {
	luo.mutation.ClearDopeLastsales()
	return luo
}

// ClearInputs clears all "inputs" edges to the Amount entity.
func (luo *ListingUpdateOne) ClearInputs() *ListingUpdateOne {
	luo.mutation.ClearInputs()
	return luo
}

// RemoveInputIDs removes the "inputs" edge to Amount entities by IDs.
func (luo *ListingUpdateOne) RemoveInputIDs(ids ...string) *ListingUpdateOne {
	luo.mutation.RemoveInputIDs(ids...)
	return luo
}

// RemoveInputs removes "inputs" edges to Amount entities.
func (luo *ListingUpdateOne) RemoveInputs(a ...*Amount) *ListingUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return luo.RemoveInputIDs(ids...)
}

// ClearOutputs clears all "outputs" edges to the Amount entity.
func (luo *ListingUpdateOne) ClearOutputs() *ListingUpdateOne {
	luo.mutation.ClearOutputs()
	return luo
}

// RemoveOutputIDs removes the "outputs" edge to Amount entities by IDs.
func (luo *ListingUpdateOne) RemoveOutputIDs(ids ...string) *ListingUpdateOne {
	luo.mutation.RemoveOutputIDs(ids...)
	return luo
}

// RemoveOutputs removes "outputs" edges to Amount entities.
func (luo *ListingUpdateOne) RemoveOutputs(a ...*Amount) *ListingUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return luo.RemoveOutputIDs(ids...)
}

// Where appends a list predicates to the ListingUpdate builder.
func (luo *ListingUpdateOne) Where(ps ...predicate.Listing) *ListingUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *ListingUpdateOne) Select(field string, fields ...string) *ListingUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Listing entity.
func (luo *ListingUpdateOne) Save(ctx context.Context) (*Listing, error) {
	return withHooks[*Listing, ListingMutation](ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *ListingUpdateOne) SaveX(ctx context.Context) *Listing {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *ListingUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *ListingUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *ListingUpdateOne) sqlSave(ctx context.Context) (_node *Listing, err error) {
	_spec := sqlgraph.NewUpdateSpec(listing.Table, listing.Columns, sqlgraph.NewFieldSpec(listing.FieldID, field.TypeString))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Listing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, listing.FieldID)
		for _, f := range fields {
			if !listing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != listing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Active(); ok {
		_spec.SetField(listing.FieldActive, field.TypeBool, value)
	}
	if value, ok := luo.mutation.WyvernOrder(); ok {
		_spec.SetField(listing.FieldWyvernOrder, field.TypeJSON, value)
	}
	if value, ok := luo.mutation.AppendedWyvernOrder(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, listing.FieldWyvernOrder, value)
		})
	}
	if luo.mutation.WyvernOrderCleared() {
		_spec.ClearField(listing.FieldWyvernOrder, field.TypeJSON)
	}
	if value, ok := luo.mutation.SeaportOrder(); ok {
		_spec.SetField(listing.FieldSeaportOrder, field.TypeJSON, value)
	}
	if value, ok := luo.mutation.AppendedSeaportOrder(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, listing.FieldSeaportOrder, value)
		})
	}
	if luo.mutation.SeaportOrderCleared() {
		_spec.ClearField(listing.FieldSeaportOrder, field.TypeJSON)
	}
	if luo.mutation.DopeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listing.DopeTable,
			Columns: []string{listing.DopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dope.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.DopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listing.DopeTable,
			Columns: []string{listing.DopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.DopeLastsalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   listing.DopeLastsalesTable,
			Columns: []string{listing.DopeLastsalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dope.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.DopeLastsalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   listing.DopeLastsalesTable,
			Columns: []string{listing.DopeLastsalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dope.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.InputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.InputsTable,
			Columns: []string{listing.InputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedInputsIDs(); len(nodes) > 0 && !luo.mutation.InputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.InputsTable,
			Columns: []string{listing.InputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.InputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.InputsTable,
			Columns: []string{listing.InputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.OutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.OutputsTable,
			Columns: []string{listing.OutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedOutputsIDs(); len(nodes) > 0 && !luo.mutation.OutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.OutputsTable,
			Columns: []string{listing.OutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.OutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   listing.OutputsTable,
			Columns: []string{listing.OutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amount.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Listing{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{listing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
