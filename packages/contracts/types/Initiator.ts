/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IHustlerActions {
  export type SetMetadataStruct = {
    color: BytesLike;
    background: BytesLike;
    options: BytesLike;
    viewbox: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
    body: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
    order: BigNumberish[];
    mask: BytesLike;
    name: string;
  };

  export type SetMetadataStructOutput = [
    color: string,
    background: string,
    options: string,
    viewbox: [bigint, bigint, bigint, bigint],
    body: [bigint, bigint, bigint, bigint],
    order: bigint[],
    mask: string,
    name: string
  ] & {
    color: string;
    background: string;
    options: string;
    viewbox: [bigint, bigint, bigint, bigint];
    body: [bigint, bigint, bigint, bigint];
    order: bigint[];
    mask: string;
    name: string;
  };
}

export interface InitiatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cost"
      | "isOpened"
      | "mintFromDopeTo"
      | "mintOGFromDopeTo"
      | "open"
      | "owner"
      | "release"
      | "renounceOwnership"
      | "setRelease"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Opened" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "cost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOpened",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromDopeTo",
    values: [
      BigNumberish,
      AddressLike,
      IHustlerActions.SetMetadataStruct,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOGFromDopeTo",
    values: [
      BigNumberish,
      AddressLike,
      IHustlerActions.SetMetadataStruct,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRelease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOpened", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFromDopeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOGFromDopeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRelease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace OpenedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Initiator extends BaseContract {
  connect(runner?: ContractRunner | null): Initiator;
  waitForDeployment(): Promise<this>;

  interface: InitiatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cost: TypedContractMethod<[], [bigint], "view">;

  isOpened: TypedContractMethod<[id: BigNumberish], [boolean], "view">;

  mintFromDopeTo: TypedContractMethod<
    [
      id: BigNumberish,
      to: AddressLike,
      meta: IHustlerActions.SetMetadataStruct,
      data: BytesLike,
      gasLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mintOGFromDopeTo: TypedContractMethod<
    [
      id: BigNumberish,
      to: AddressLike,
      meta: IHustlerActions.SetMetadataStruct,
      data: BytesLike,
      gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;

  open: TypedContractMethod<
    [id: BigNumberish, to: AddressLike, gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  release: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setRelease: TypedContractMethod<
    [_release: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cost"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isOpened"
  ): TypedContractMethod<[id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintFromDopeTo"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      to: AddressLike,
      meta: IHustlerActions.SetMetadataStruct,
      data: BytesLike,
      gasLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintOGFromDopeTo"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      to: AddressLike,
      meta: IHustlerActions.SetMetadataStruct,
      data: BytesLike,
      gasLimit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "open"
  ): TypedContractMethod<
    [id: BigNumberish, to: AddressLike, gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRelease"
  ): TypedContractMethod<[_release: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Opened"
  ): TypedContractEvent<
    OpenedEvent.InputTuple,
    OpenedEvent.OutputTuple,
    OpenedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Opened(uint256)": TypedContractEvent<
      OpenedEvent.InputTuple,
      OpenedEvent.OutputTuple,
      OpenedEvent.OutputObject
    >;
    Opened: TypedContractEvent<
      OpenedEvent.InputTuple,
      OpenedEvent.OutputTuple,
      OpenedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
