/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace MetadataBuilder {
  export type ParamsStruct = {
    resolution: BigNumberish;
    color: BytesLike;
    background: BytesLike;
    viewbox: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
    text: string;
    subtext: string;
    name: string;
    description: string;
    attributes: string;
    parts: BytesLike[];
  };

  export type ParamsStructOutput = [
    resolution: bigint,
    color: string,
    background: string,
    viewbox: [bigint, bigint, bigint, bigint],
    text: string,
    subtext: string,
    name: string,
    description: string,
    attributes: string,
    parts: string[]
  ] & {
    resolution: bigint;
    color: string;
    background: string;
    viewbox: [bigint, bigint, bigint, bigint];
    text: string;
    subtext: string;
    name: string;
    description: string;
    attributes: string;
    parts: string[];
  };
}

export interface MetadataBuilderInterface extends Interface {
  getFunction(
    nameOrSignature: "attributes" | "contractURI" | "generateSVG" | "tokenURI"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attributes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSVG",
    values: [MetadataBuilder.ParamsStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [MetadataBuilder.ParamsStruct, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "attributes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
}

export interface MetadataBuilder extends BaseContract {
  connect(runner?: ContractRunner | null): MetadataBuilder;
  waitForDeployment(): Promise<this>;

  interface: MetadataBuilderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attributes: TypedContractMethod<[traits: BytesLike[]], [string], "view">;

  contractURI: TypedContractMethod<
    [name: string, description: string],
    [string],
    "view"
  >;

  generateSVG: TypedContractMethod<
    [params: MetadataBuilder.ParamsStruct, paletteProvider: AddressLike],
    [string],
    "view"
  >;

  tokenURI: TypedContractMethod<
    [params: MetadataBuilder.ParamsStruct, paletteProvider: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attributes"
  ): TypedContractMethod<[traits: BytesLike[]], [string], "view">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[name: string, description: string], [string], "view">;
  getFunction(
    nameOrSignature: "generateSVG"
  ): TypedContractMethod<
    [params: MetadataBuilder.ParamsStruct, paletteProvider: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<
    [params: MetadataBuilder.ParamsStruct, paletteProvider: AddressLike],
    [string],
    "view"
  >;

  filters: {};
}
