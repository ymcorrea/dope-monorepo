/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAccessory"
      | "addBodyRles"
      | "addItemComponent"
      | "batchSetItemRle"
      | "dao"
      | "initiator"
      | "maintainer"
      | "mintItem"
      | "mintItemBatch"
      | "mintOGTo"
      | "mintTo"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "open"
      | "setDAO"
      | "setEnforcer"
      | "setInitiator"
      | "setItemRle"
      | "setMaintainer"
      | "setPalette"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAccessory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addBodyRles",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemComponent",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetItemRle",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(functionFragment: "initiator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maintainer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintItem",
    values: [
      AddressLike,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintItemBatch",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOGTo",
    values: [
      BigNumberish,
      AddressLike,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [
      BigNumberish,
      AddressLike,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setDAO", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setEnforcer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitiator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemRle",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaintainer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPalette",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAccessory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBodyRles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetItemRle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initiator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maintainer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintItemBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintOGTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEnforcer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitiator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setItemRle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaintainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPalette", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface Controller extends BaseContract {
  connect(runner?: ContractRunner | null): Controller;
  waitForDeployment(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAccessory: TypedContractMethod<[component: string], [void], "nonpayable">;

  addBodyRles: TypedContractMethod<
    [part: BigNumberish, _rles: BytesLike[]],
    [void],
    "nonpayable"
  >;

  addItemComponent: TypedContractMethod<
    [componentType: BigNumberish, component: string],
    [void],
    "nonpayable"
  >;

  batchSetItemRle: TypedContractMethod<
    [ids: BigNumberish[], rles: BytesLike[]],
    [void],
    "nonpayable"
  >;

  dao: TypedContractMethod<[], [string], "view">;

  initiator: TypedContractMethod<[], [string], "view">;

  maintainer: TypedContractMethod<[], [string], "view">;

  mintItem: TypedContractMethod<
    [
      to: AddressLike,
      components_: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      componentType: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  mintItemBatch: TypedContractMethod<
    [
      to: AddressLike,
      components_: BigNumberish[],
      componentTypes: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  mintOGTo: TypedContractMethod<
    [
      dopeId: BigNumberish,
      to: AddressLike,
      name: string,
      color: BytesLike,
      background: BytesLike,
      options: BytesLike,
      viewbox: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      body: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      mask: BytesLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  mintTo: TypedContractMethod<
    [
      dopeId: BigNumberish,
      to: AddressLike,
      name: string,
      color: BytesLike,
      background: BytesLike,
      options: BytesLike,
      viewbox: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      body: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      mask: BytesLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      operator: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  open: TypedContractMethod<
    [dopeId: BigNumberish, to: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  setDAO: TypedContractMethod<[dao_: AddressLike], [void], "nonpayable">;

  setEnforcer: TypedContractMethod<
    [enforcer_: AddressLike],
    [void],
    "nonpayable"
  >;

  setInitiator: TypedContractMethod<
    [initiator_: AddressLike],
    [void],
    "nonpayable"
  >;

  setItemRle: TypedContractMethod<
    [id: BigNumberish, male: BytesLike, female: BytesLike],
    [void],
    "nonpayable"
  >;

  setMaintainer: TypedContractMethod<
    [maintainer_: AddressLike],
    [void],
    "nonpayable"
  >;

  setPalette: TypedContractMethod<
    [id: BigNumberish, palette: BytesLike[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAccessory"
  ): TypedContractMethod<[component: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addBodyRles"
  ): TypedContractMethod<
    [part: BigNumberish, _rles: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addItemComponent"
  ): TypedContractMethod<
    [componentType: BigNumberish, component: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchSetItemRle"
  ): TypedContractMethod<
    [ids: BigNumberish[], rles: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dao"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initiator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maintainer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintItem"
  ): TypedContractMethod<
    [
      to: AddressLike,
      components_: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      componentType: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintItemBatch"
  ): TypedContractMethod<
    [
      to: AddressLike,
      components_: BigNumberish[],
      componentTypes: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintOGTo"
  ): TypedContractMethod<
    [
      dopeId: BigNumberish,
      to: AddressLike,
      name: string,
      color: BytesLike,
      background: BytesLike,
      options: BytesLike,
      viewbox: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      body: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      mask: BytesLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintTo"
  ): TypedContractMethod<
    [
      dopeId: BigNumberish,
      to: AddressLike,
      name: string,
      color: BytesLike,
      background: BytesLike,
      options: BytesLike,
      viewbox: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      body: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      mask: BytesLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "open"
  ): TypedContractMethod<
    [dopeId: BigNumberish, to: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDAO"
  ): TypedContractMethod<[dao_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEnforcer"
  ): TypedContractMethod<[enforcer_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInitiator"
  ): TypedContractMethod<[initiator_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setItemRle"
  ): TypedContractMethod<
    [id: BigNumberish, male: BytesLike, female: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaintainer"
  ): TypedContractMethod<[maintainer_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPalette"
  ): TypedContractMethod<
    [id: BigNumberish, palette: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  filters: {};
}
